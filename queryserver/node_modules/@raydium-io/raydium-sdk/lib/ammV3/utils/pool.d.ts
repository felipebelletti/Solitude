import { PublicKey } from '@solana/web3.js';
import BN__default from 'bn.js';
import { AmmV3PoolInfo, AmmV3PoolRewardLayoutInfo, AmmV3PoolRewardInfo } from '../ammV3.js';
import { TickArray } from './tick.js';
import 'decimal.js';
import '../../base/base.js';
import '../../entity/bignumber.js';
import '../../spl/layout.js';
import '../../marshmallow/index.js';
import '../../marshmallow/buffer-layout.js';
import '../../entity/amount.js';
import '../../entity/constant.js';
import '../../entity/currency.js';
import '../../common/pubkey.js';
import '@solana/spl-token';
import '../../entity/fraction.js';
import '../../entity/percent.js';
import '../../entity/price.js';

declare class PoolUtils {
    static getOutputAmountAndRemainAccounts(poolInfo: AmmV3PoolInfo, tickArrayCache: {
        [key: string]: TickArray;
    }, inputTokenMint: PublicKey, inputAmount: BN__default, sqrtPriceLimitX64?: BN__default): {
        expectedAmountOut: BN__default;
        remainingAccounts: PublicKey[];
        executionPrice: BN__default;
        feeAmount: BN__default;
    };
    static getFirstInitializedTickArray(poolInfo: AmmV3PoolInfo, zeroForOne: boolean): {
        isExist: true;
        startIndex: number;
        nextAccountMeta: PublicKey;
    } | {
        isExist: false;
        startIndex: undefined;
        nextAccountMeta: undefined;
    };
    static nextInitializedTickArrayStartIndex(poolInfo: AmmV3PoolInfo, zeroForOne: boolean): {
        isExist: boolean;
        nextStartIndex: number;
    };
    static updatePoolRewardInfos({ chainTime, poolLiquidity, rewardInfos }: {
        chainTime: number;
        poolLiquidity: BN__default;
        rewardInfos: AmmV3PoolRewardLayoutInfo[];
    }): AmmV3PoolRewardInfo[];
}

export { PoolUtils };

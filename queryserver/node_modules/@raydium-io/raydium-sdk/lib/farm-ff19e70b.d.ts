import * as _solana_web3_js from '@solana/web3.js';
import { PublicKey, Connection, TransactionInstruction, Signer, Keypair } from '@solana/web3.js';
import { Structure, GetStructureFromLayoutSchema } from './marshmallow/index.js';
import BN__default from 'bn.js';
import { FarmVersion } from './farm/type.js';
import { TokenAccount, Base } from './base/base.js';
import { PublicKeyish } from './common/pubkey.js';
import { GetMultipleAccountsInfoConfig } from './common/web3.js';
import { BigNumberish } from './entity/bignumber.js';
import { SplAccount } from './spl/layout.js';
import { GetStructureSchema } from './marshmallow/buffer-layout.js';

declare const REAL_FARM_STATE_LAYOUT_V3: Structure<PublicKey | BN__default, "", {
    nonce: BN__default;
    state: BN__default;
    lpVault: PublicKey;
    rewardVault: PublicKey;
    totalReward: BN__default;
    perShareReward: BN__default;
    lastSlot: BN__default;
    perSlotReward: BN__default;
}>;
declare const REAL_FARM_STATE_LAYOUT_V5: Structure<number | PublicKey | Buffer | BN__default, "", {
    nonce: BN__default;
    state: BN__default;
    lpVault: PublicKey;
    lastSlot: BN__default;
    rewardVaultA: PublicKey;
    totalRewardA: BN__default;
    perShareRewardA: BN__default;
    perSlotRewardA: BN__default;
    option: number;
    rewardVaultB: PublicKey;
    totalRewardB: BN__default;
    perShareRewardB: BN__default;
    perSlotRewardB: BN__default;
}>;
declare const REAL_FARM_STATE_LAYOUT_V6: Structure<PublicKey | BN__default | BN__default[] | {
    padding: BN__default[];
    rewardVault: PublicKey;
    totalReward: BN__default;
    rewardState: BN__default;
    rewardOpenTime: BN__default;
    rewardEndTime: BN__default;
    rewardLastUpdateTime: BN__default;
    totalRewardEmissioned: BN__default;
    rewardClaimed: BN__default;
    rewardPerSecond: BN__default;
    accRewardPerShare: BN__default;
    rewardMint: PublicKey;
    rewardSender: PublicKey;
    rewardType: BN__default;
}[], "", {
    nonce: BN__default;
    state: BN__default;
    lpMint: PublicKey;
    lpVault: PublicKey;
    padding: BN__default[];
    validRewardTokenNum: BN__default;
    rewardMultiplier: BN__default;
    rewardPeriodMax: BN__default;
    rewardPeriodMin: BN__default;
    rewardPeriodExtend: BN__default;
    rewardInfos: {
        padding: BN__default[];
        rewardVault: PublicKey;
        totalReward: BN__default;
        rewardState: BN__default;
        rewardOpenTime: BN__default;
        rewardEndTime: BN__default;
        rewardLastUpdateTime: BN__default;
        totalRewardEmissioned: BN__default;
        rewardClaimed: BN__default;
        rewardPerSecond: BN__default;
        accRewardPerShare: BN__default;
        rewardMint: PublicKey;
        rewardSender: PublicKey;
        rewardType: BN__default;
    }[];
    creator: PublicKey;
}>;
declare const FARM_STATE_LAYOUT_V3: GetStructureFromLayoutSchema<{
    version: 3;
    rewardInfos: {
        rewardVault: PublicKey;
        totalReward: BN__default;
        perSlotReward: BN__default;
        perShareReward: BN__default;
    }[];
} & {
    nonce: BN__default;
    state: BN__default;
    lpVault: PublicKey;
    rewardVault: PublicKey;
    totalReward: BN__default;
    perShareReward: BN__default;
    lastSlot: BN__default;
    perSlotReward: BN__default;
}>;
declare const FARM_STATE_LAYOUT_V5: GetStructureFromLayoutSchema<{
    version: 5;
    rewardInfos: {
        rewardVault: PublicKey;
        totalReward: BN__default;
        perSlotReward: BN__default;
        perShareReward: BN__default;
    }[];
} & {
    nonce: BN__default;
    state: BN__default;
    lpVault: PublicKey;
    lastSlot: BN__default;
    rewardVaultA: PublicKey;
    totalRewardA: BN__default;
    perShareRewardA: BN__default;
    perSlotRewardA: BN__default;
    option: number;
    rewardVaultB: PublicKey;
    totalRewardB: BN__default;
    perShareRewardB: BN__default;
    perSlotRewardB: BN__default;
}>;
declare const FARM_STATE_LAYOUT_V6: GetStructureFromLayoutSchema<{
    version: 6;
    rewardInfos: {
        rewardState: BN__default;
        rewardOpenTime: BN__default;
        rewardEndTime: BN__default;
        rewardLastUpdateTime: BN__default;
        totalReward: BN__default;
        totalRewardEmissioned: BN__default;
        rewardClaimed: BN__default;
        rewardPerSecond: BN__default;
        accRewardPerShare: BN__default;
        rewardVault: PublicKey;
        rewardMint: PublicKey;
        rewardSender: PublicKey;
        rewardType: keyof typeof poolTypeV6;
    }[];
} & {
    nonce: BN__default;
    state: BN__default;
    lpMint: PublicKey;
    lpVault: PublicKey;
    padding: BN__default[];
    validRewardTokenNum: BN__default;
    rewardMultiplier: BN__default;
    rewardPeriodMax: BN__default;
    rewardPeriodMin: BN__default;
    rewardPeriodExtend: BN__default;
    rewardInfos: {
        padding: BN__default[];
        rewardVault: PublicKey;
        totalReward: BN__default;
        rewardState: BN__default;
        rewardOpenTime: BN__default;
        rewardEndTime: BN__default;
        rewardLastUpdateTime: BN__default;
        totalRewardEmissioned: BN__default;
        rewardClaimed: BN__default;
        rewardPerSecond: BN__default;
        accRewardPerShare: BN__default;
        rewardMint: PublicKey;
        rewardSender: PublicKey;
        rewardType: BN__default;
    }[];
    creator: PublicKey;
}>;
type FarmStateLayoutV3 = typeof FARM_STATE_LAYOUT_V3;
type FarmStateLayoutV5 = typeof FARM_STATE_LAYOUT_V5;
type FarmStateLayoutV6 = typeof FARM_STATE_LAYOUT_V6;
type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;
type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;
type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;
type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;
type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;
declare const FARM_LEDGER_LAYOUT_V3_1: Structure<PublicKey | BN__default | BN__default[], "", {
    owner: PublicKey;
    state: BN__default;
    id: PublicKey;
    deposited: BN__default;
    rewardDebts: BN__default[];
}>;
declare const FARM_LEDGER_LAYOUT_V3_2: Structure<PublicKey | BN__default | BN__default[], "", {
    owner: PublicKey;
    state: BN__default;
    id: PublicKey;
    deposited: BN__default;
    rewardDebts: BN__default[];
}>;
declare const FARM_LEDGER_LAYOUT_V5_1: Structure<PublicKey | BN__default | BN__default[], "", {
    owner: PublicKey;
    state: BN__default;
    id: PublicKey;
    deposited: BN__default;
    rewardDebts: BN__default[];
}>;
declare const FARM_LEDGER_LAYOUT_V5_2: Structure<PublicKey | BN__default | BN__default[], "", {
    owner: PublicKey;
    state: BN__default;
    id: PublicKey;
    deposited: BN__default;
    rewardDebts: BN__default[];
}>;
declare const FARM_LEDGER_LAYOUT_V6_1: Structure<PublicKey | BN__default | BN__default[], "", {
    owner: PublicKey;
    state: BN__default;
    id: PublicKey;
    deposited: BN__default;
    rewardDebts: BN__default[];
}>;
type FarmLedgerLayoutV3_1 = typeof FARM_LEDGER_LAYOUT_V3_1;
type FarmLedgerLayoutV3_2 = typeof FARM_LEDGER_LAYOUT_V3_2;
type FarmLedgerLayoutV5_1 = typeof FARM_LEDGER_LAYOUT_V5_1;
type FarmLedgerLayoutV5_2 = typeof FARM_LEDGER_LAYOUT_V5_2;
type FarmLedgerLayoutV6_1 = typeof FARM_LEDGER_LAYOUT_V6_1;
type FarmLedgerLayout = FarmLedgerLayoutV3_1 | FarmLedgerLayoutV3_2 | FarmLedgerLayoutV5_1 | FarmLedgerLayoutV5_2 | FarmLedgerLayoutV6_1;
type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;
type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;
type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;
type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;
type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;
type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;
declare const FARM_VERSION_TO_STATE_LAYOUT: {
    [version in FarmVersion]?: FarmStateLayout;
} & {
    [version: number]: FarmStateLayout;
};
declare const FARM_VERSION_TO_LEDGER_LAYOUT: {
    [version in FarmVersion]?: FarmLedgerLayout;
} & {
    [version: number]: FarmLedgerLayout;
};

declare const poolTypeV6: {
    readonly 'Standard SPL': 0;
    readonly 'Option tokens': 1;
};
type FarmPoolKeys = {
    readonly id: PublicKey;
    readonly lpMint: PublicKey;
    readonly version: number;
    readonly programId: PublicKey;
    readonly authority: PublicKey;
    readonly lpVault: PublicKey;
    readonly upcoming: boolean;
    readonly rewardInfos: ({
        readonly rewardMint: PublicKey;
        readonly rewardVault: PublicKey;
    } | {
        readonly rewardMint: PublicKey;
        readonly rewardVault: PublicKey;
        readonly rewardOpenTime: number;
        readonly rewardEndTime: number;
        readonly rewardPerSecond: number;
        readonly rewardType: keyof typeof poolTypeV6;
    })[];
};
/**
 * Full user keys that build transaction need
 */
interface FarmUserKeys {
    ledger: PublicKey;
    auxiliaryLedgers?: PublicKey[];
    lpTokenAccount: PublicKey;
    rewardTokenAccounts: PublicKey[];
    owner: PublicKey;
}
interface FarmRewardInfo {
    rewardMint: PublicKey;
    rewardPerSecond: BigNumberish;
    rewardOpenTime: BigNumberish;
    rewardEndTime: BigNumberish;
    rewardType: keyof typeof poolTypeV6;
}
interface FarmDepositInstructionParams {
    poolKeys: FarmPoolKeys;
    userKeys: FarmUserKeys;
    amount: BigNumberish;
}
type FarmWithdrawInstructionParams = FarmDepositInstructionParams;
interface FarmCreateAssociatedLedgerAccountInstructionParams {
    poolKeys: FarmPoolKeys;
    userKeys: {
        ledger: PublicKey;
        owner: PublicKey;
    };
}
interface FarmCreateInstructionParamsV6 {
    version: 6;
    programId: PublicKey;
    lpMint: PublicKey;
    rewardInfos: {
        rewardMint: PublicKey;
        rewardPerSecond: BigNumberish;
        rewardOpenTime: BigNumberish;
        rewardEndTime: BigNumberish;
        rewardType: keyof typeof poolTypeV6;
    }[];
    lockInfo: {
        lockMint: PublicKey;
        lockVault: PublicKey;
    };
}
type FarmCreateInstructionParams = FarmCreateInstructionParamsV6;
interface FarmRestartInstructionParamsV6 {
    connection: Connection;
    poolKeys: FarmPoolKeys;
    userKeys: {
        tokenAccounts: TokenAccount[];
        owner: PublicKey;
        payer?: PublicKey;
    };
    newRewardInfo: FarmRewardInfo;
}
type FarmRestartInstructionParams = FarmRestartInstructionParamsV6;
interface FarmCreatorWithdrawRewardInstructionParamsV6 {
    connection: Connection;
    poolKeys: FarmPoolKeys;
    userKeys: {
        tokenAccounts: TokenAccount[];
        owner: PublicKey;
        payer?: PublicKey;
    };
    withdrawMint: PublicKey;
}
type FarmCreatorWithdrawRewardInstructionParams = FarmCreatorWithdrawRewardInstructionParamsV6;
interface FarmCreatorAddRewardTokenInstructionParamsV6 {
    connection: Connection;
    poolKeys: FarmPoolKeys;
    userKeys: {
        tokenAccounts: TokenAccount[];
        owner: PublicKey;
        payer?: PublicKey;
    };
    newRewardInfo: FarmRewardInfo;
}
type FarmCreatorAddRewardTokenInstructionParams = FarmCreatorAddRewardTokenInstructionParamsV6;
interface makeCreateFarmInstructionParamsV6 {
    connection: Connection;
    userKeys: {
        tokenAccounts: TokenAccount[];
        owner: PublicKey;
        payer?: PublicKey;
    };
    poolInfo: FarmCreateInstructionParams;
}
type makeCreateFarmInstructionParams = makeCreateFarmInstructionParamsV6;
interface FarmFetchMultipleInfoParams {
    connection: Connection;
    pools: FarmPoolKeys[];
    owner?: PublicKey;
    config?: GetMultipleAccountsInfoConfig;
}
interface FarmFetchMultipleInfoReturn {
    [id: string]: {
        apiPoolInfo: FarmPoolKeys;
        state: FarmState;
        lpVault: SplAccount;
        ledger?: FarmLedger;
        wrapped?: {
            pendingRewards: BN__default[];
        };
    };
}
declare class Farm extends Base {
    static getProgramId(version: number): PublicKey;
    static getVersion(programId: PublicKeyish): FarmVersion;
    static getStateLayout(version: number): FarmStateLayout;
    static getLedgerLayout(version: number): FarmLedgerLayout;
    static getLayouts(version: number): {
        state: FarmStateLayout;
        ledger: FarmLedgerLayout;
    };
    static getAssociatedAuthority({ programId, poolId }: {
        programId: PublicKey;
        poolId: PublicKey;
    }): {
        publicKey: PublicKey;
        nonce: number;
    };
    static getAssociatedLedgerAccount({ programId, poolId, owner, }: {
        programId: PublicKey;
        poolId: PublicKey;
        owner: PublicKey;
    }): PublicKey;
    static getAssociatedLedgerPoolAccount({ programId, poolId, mint, type, }: {
        programId: PublicKey;
        poolId: PublicKey;
        mint: PublicKey;
        type: "lpVault" | "rewardVault";
    }): PublicKey;
    static makeDepositInstruction(params: FarmDepositInstructionParams): TransactionInstruction;
    static makeDepositInstructionV3({ poolKeys, userKeys, amount }: FarmDepositInstructionParams): TransactionInstruction;
    static makeDepositInstructionV5({ poolKeys, userKeys, amount }: FarmDepositInstructionParams): TransactionInstruction;
    static makeDepositInstructionV6({ poolKeys, userKeys, amount }: FarmDepositInstructionParams): TransactionInstruction;
    static makeWithdrawInstruction(params: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeWithdrawInstructionV3({ poolKeys, userKeys, amount }: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeWithdrawInstructionV5({ poolKeys, userKeys, amount }: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeWithdrawInstructionV6({ poolKeys, userKeys, amount }: FarmWithdrawInstructionParams): TransactionInstruction;
    static makeCreateAssociatedLedgerAccountInstruction(params: FarmCreateAssociatedLedgerAccountInstructionParams): TransactionInstruction;
    static makeCreateAssociatedLedgerAccountInstructionV3({ poolKeys, userKeys, }: FarmCreateAssociatedLedgerAccountInstructionParams): TransactionInstruction;
    static makeCreateAssociatedLedgerAccountInstructionV5({ poolKeys, userKeys, }: FarmCreateAssociatedLedgerAccountInstructionParams): TransactionInstruction;
    static makeCreateFarmInstruction({ connection, userKeys, poolInfo }: makeCreateFarmInstructionParams): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeCreateFarmInstructionV6({ connection, userKeys, poolInfo }: makeCreateFarmInstructionParamsV6): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeRestartFarmInstruction(params: FarmRestartInstructionParams): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeRestartFarmInstructionV6({ connection, poolKeys, userKeys, newRewardInfo, }: FarmRestartInstructionParamsV6): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeCreatorWithdrawFarmRewardInstruction(params: FarmCreatorWithdrawRewardInstructionParams): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeCreatorWithdrawFarmRewardInstructionV6({ connection, poolKeys, userKeys, withdrawMint, }: FarmCreatorWithdrawRewardInstructionParamsV6): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeFarmCreatorAddRewardTokenInstruction(params: FarmCreatorAddRewardTokenInstructionParams): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static makeFarmCreatorAddRewardTokenInstructionV6({ connection, poolKeys, userKeys, newRewardInfo, }: FarmCreatorAddRewardTokenInstructionParamsV6): Promise<{
        newAccounts: Signer[];
        instructions: TransactionInstruction[];
    }>;
    static fetchMultipleInfo({ connection, pools, owner, config }: FarmFetchMultipleInfoParams): Promise<FarmFetchMultipleInfoReturn>;
    static fetchMultipleInfoAndUpdate({ connection, pools, owner, config }: FarmFetchMultipleInfoParams): Promise<FarmFetchMultipleInfoReturn>;
    static updatePoolInfo(poolInfo: FarmState, lpVault: SplAccount, slot: number, chainTime: number): FarmState;
    static makeHarvestAllRewardTransaction({ connection, fetchPoolInfos, ownerInfo, associatedOnly }: {
        connection: Connection;
        fetchPoolInfos: FarmFetchMultipleInfoReturn;
        ownerInfo: {
            feePayer: PublicKey;
            wallet: PublicKey;
            tokenAccounts: TokenAccount[];
            useSOLBalance?: boolean;
        };
        associatedOnly?: boolean;
    }): Promise<{
        transactions: {
            transaction: _solana_web3_js.Transaction;
            signer: (Signer | Keypair)[];
        }[];
        address: {};
    }>;
}

export { FarmStateLayoutV6 as A, FarmStateLayout as B, FarmStateV3 as C, FarmStateV5 as D, FarmStateV6 as E, FarmPoolKeys as F, FarmState as G, FARM_LEDGER_LAYOUT_V3_1 as H, FARM_LEDGER_LAYOUT_V3_2 as I, FARM_LEDGER_LAYOUT_V5_1 as J, FARM_LEDGER_LAYOUT_V5_2 as K, FARM_LEDGER_LAYOUT_V6_1 as L, FarmLedgerLayoutV3_1 as M, FarmLedgerLayoutV3_2 as N, FarmLedgerLayoutV5_1 as O, FarmLedgerLayoutV5_2 as P, FarmLedgerLayoutV6_1 as Q, REAL_FARM_STATE_LAYOUT_V3 as R, FarmLedgerLayout as S, FarmLedgerV3_1 as T, FarmLedgerV3_2 as U, FarmLedgerV5_1 as V, FarmLedgerV5_2 as W, FarmLedgerV6_1 as X, FarmLedger as Y, FARM_VERSION_TO_STATE_LAYOUT as Z, FARM_VERSION_TO_LEDGER_LAYOUT as _, FarmUserKeys as a, FarmRewardInfo as b, FarmDepositInstructionParams as c, FarmWithdrawInstructionParams as d, FarmCreateAssociatedLedgerAccountInstructionParams as e, FarmCreateInstructionParamsV6 as f, FarmCreateInstructionParams as g, FarmRestartInstructionParamsV6 as h, FarmRestartInstructionParams as i, FarmCreatorWithdrawRewardInstructionParamsV6 as j, FarmCreatorWithdrawRewardInstructionParams as k, FarmCreatorAddRewardTokenInstructionParamsV6 as l, FarmCreatorAddRewardTokenInstructionParams as m, makeCreateFarmInstructionParamsV6 as n, makeCreateFarmInstructionParams as o, poolTypeV6 as p, FarmFetchMultipleInfoParams as q, FarmFetchMultipleInfoReturn as r, Farm as s, REAL_FARM_STATE_LAYOUT_V5 as t, REAL_FARM_STATE_LAYOUT_V6 as u, FARM_STATE_LAYOUT_V3 as v, FARM_STATE_LAYOUT_V5 as w, FARM_STATE_LAYOUT_V6 as x, FarmStateLayoutV3 as y, FarmStateLayoutV5 as z };

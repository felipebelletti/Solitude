import { Structure } from '../marshmallow/index.js';
import * as BN from 'bn.js';
import * as _solana_web3_js from '@solana/web3.js';
import { GetStructureSchema } from '../marshmallow/buffer-layout.js';

declare const LIQUIDITY_STATE_LAYOUT_V4: Structure<_solana_web3_js.PublicKey | BN | BN[], "", {
    nonce: BN;
    owner: _solana_web3_js.PublicKey;
    baseMint: _solana_web3_js.PublicKey;
    quoteMint: _solana_web3_js.PublicKey;
    baseVault: _solana_web3_js.PublicKey;
    quoteVault: _solana_web3_js.PublicKey;
    baseLotSize: BN;
    quoteLotSize: BN;
    marketId: _solana_web3_js.PublicKey;
    status: BN;
    maxOrder: BN;
    depth: BN;
    baseDecimal: BN;
    quoteDecimal: BN;
    state: BN;
    resetFlag: BN;
    minSize: BN;
    volMaxCutRatio: BN;
    amountWaveRatio: BN;
    minPriceMultiplier: BN;
    maxPriceMultiplier: BN;
    systemDecimalValue: BN;
    minSeparateNumerator: BN;
    minSeparateDenominator: BN;
    tradeFeeNumerator: BN;
    tradeFeeDenominator: BN;
    pnlNumerator: BN;
    pnlDenominator: BN;
    swapFeeNumerator: BN;
    swapFeeDenominator: BN;
    baseNeedTakePnl: BN;
    quoteNeedTakePnl: BN;
    quoteTotalPnl: BN;
    baseTotalPnl: BN;
    quoteTotalDeposited: BN;
    baseTotalDeposited: BN;
    swapBaseInAmount: BN;
    swapQuoteOutAmount: BN;
    swapBase2QuoteFee: BN;
    swapQuoteInAmount: BN;
    swapBaseOutAmount: BN;
    swapQuote2BaseFee: BN;
    lpMint: _solana_web3_js.PublicKey;
    openOrders: _solana_web3_js.PublicKey;
    marketProgramId: _solana_web3_js.PublicKey;
    targetOrders: _solana_web3_js.PublicKey;
    withdrawQueue: _solana_web3_js.PublicKey;
    lpVault: _solana_web3_js.PublicKey;
    lpReserve: BN;
    padding: BN[];
}>;
type LiquidityStateLayoutV4 = typeof LIQUIDITY_STATE_LAYOUT_V4;
type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;
declare const LIQUIDITY_STATE_LAYOUT_V5: Structure<_solana_web3_js.PublicKey | BN | BN[], "", {
    nonce: BN;
    owner: _solana_web3_js.PublicKey;
    baseMint: _solana_web3_js.PublicKey;
    quoteMint: _solana_web3_js.PublicKey;
    baseVault: _solana_web3_js.PublicKey;
    quoteVault: _solana_web3_js.PublicKey;
    baseLotSize: BN;
    quoteLotSize: BN;
    marketId: _solana_web3_js.PublicKey;
    status: BN;
    maxOrder: BN;
    depth: BN;
    baseDecimal: BN;
    quoteDecimal: BN;
    state: BN;
    resetFlag: BN;
    minSize: BN;
    volMaxCutRatio: BN;
    amountWaveRatio: BN;
    minPriceMultiplier: BN;
    maxPriceMultiplier: BN;
    minSeparateNumerator: BN;
    minSeparateDenominator: BN;
    tradeFeeNumerator: BN;
    tradeFeeDenominator: BN;
    pnlNumerator: BN;
    pnlDenominator: BN;
    swapFeeNumerator: BN;
    swapFeeDenominator: BN;
    baseNeedTakePnl: BN;
    quoteNeedTakePnl: BN;
    quoteTotalPnl: BN;
    baseTotalPnl: BN;
    swapBaseInAmount: BN;
    swapQuoteOutAmount: BN;
    swapBase2QuoteFee: BN;
    swapQuoteInAmount: BN;
    swapBaseOutAmount: BN;
    swapQuote2BaseFee: BN;
    lpMint: _solana_web3_js.PublicKey;
    openOrders: _solana_web3_js.PublicKey;
    marketProgramId: _solana_web3_js.PublicKey;
    targetOrders: _solana_web3_js.PublicKey;
    padding: BN[];
    accountType: BN;
    systemDecimalsValue: BN;
    abortTradeFactor: BN;
    priceTickMultiplier: BN;
    priceTick: BN;
    poolOpenTime: BN;
    punishPcAmount: BN;
    punishCoinAmount: BN;
    orderbookToInitTime: BN;
    modelDataAccount: _solana_web3_js.PublicKey;
}>;
type LiquidityStateLayoutV5 = typeof LIQUIDITY_STATE_LAYOUT_V5;
type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;
type LiquidityState = LiquidityStateV4 | LiquidityStateV5;
type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;
declare const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {
    [version: number]: LiquidityStateLayout;
};

export { LIQUIDITY_STATE_LAYOUT_V4, LIQUIDITY_STATE_LAYOUT_V5, LIQUIDITY_VERSION_TO_STATE_LAYOUT, LiquidityState, LiquidityStateLayout, LiquidityStateLayoutV4, LiquidityStateLayoutV5, LiquidityStateV4, LiquidityStateV5 };

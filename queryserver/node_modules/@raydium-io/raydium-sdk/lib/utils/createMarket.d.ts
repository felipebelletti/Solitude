import { Structure } from '../marshmallow/index.js';
import { Connection, PublicKey, Transaction, Keypair, TransactionInstruction } from '@solana/web3.js';
import BN__default from 'bn.js';
import { Base } from '../base/base.js';
import '../marshmallow/buffer-layout.js';
import '../entity/bignumber.js';
import '../spl/layout.js';

declare const MARKET_STATE_LAYOUT_V2: Structure<any, "", {
    [x: string]: any;
}>;
declare class MarketV2 extends Base {
    static makeCreateMarketTransaction({ connection, wallet, baseInfo, quoteInfo, lotSize, // 1
    tickSize, // 0.01
    dexProgramId, }: {
        connection: Connection;
        wallet: PublicKey;
        baseInfo: {
            mint: PublicKey;
            decimals: number;
        };
        quoteInfo: {
            mint: PublicKey;
            decimals: number;
        };
        lotSize: number;
        tickSize: number;
        dexProgramId: PublicKey;
    }): Promise<{
        transactions: {
            transaction: Transaction;
            signer: Keypair[];
        }[];
        address: {
            id: PublicKey;
        };
    }>;
    static makeCreateMarketInstruction({ connection, wallet, marketInfo }: {
        connection: Connection;
        wallet: PublicKey;
        marketInfo: {
            programId: PublicKey;
            id: Keypair;
            baseMint: PublicKey;
            quoteMint: PublicKey;
            baseVault: Keypair;
            quoteVault: Keypair;
            vaultOwner: PublicKey;
            requestQueue: Keypair;
            eventQueue: Keypair;
            bids: Keypair;
            asks: Keypair;
            feeRateBps: number;
            vaultSignerNonce: BN__default;
            quoteDustThreshold: BN__default;
            baseLotSize: BN__default;
            quoteLotSize: BN__default;
        };
    }): Promise<{
        transaction: Transaction;
        signer: Keypair[];
    }[]>;
    static initializeMarket({ programId, marketInfo }: {
        programId: PublicKey;
        marketInfo: {
            id: PublicKey;
            requestQueue: PublicKey;
            eventQueue: PublicKey;
            bids: PublicKey;
            asks: PublicKey;
            baseVault: PublicKey;
            quoteVault: PublicKey;
            baseMint: PublicKey;
            quoteMint: PublicKey;
            authority?: PublicKey;
            pruneAuthority?: PublicKey;
            baseLotSize: BN__default;
            quoteLotSize: BN__default;
            feeRateBps: number;
            vaultSignerNonce: BN__default;
            quoteDustThreshold: BN__default;
        };
    }): TransactionInstruction;
}

export { MARKET_STATE_LAYOUT_V2, MarketV2 };

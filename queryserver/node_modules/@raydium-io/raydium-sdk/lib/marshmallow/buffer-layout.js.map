{"version":3,"sources":["../../src/marshmallow/buffer-layout.ts"],"sourcesContent":["import {\n  bits as _bits, BitStructure as _BitStructure, blob as _blob, Blob as _Blob, cstr as _cstr, f32 as _f32,\n  f32be as _f32be, f64 as _f64, f64be as _f64be, greedy as _greedy, Layout as _Layout, ns64 as _ns64, ns64be as _ns64be,\n  nu64 as _nu64, nu64be as _nu64be, offset as _offset, s16 as _s16, s16be as _s16be, s24 as _s24, s24be as _s24be,\n  s32 as _s32, s32be as _s32be, s40 as _s40, s40be as _s40be, s48 as _s48, s48be as _s48be, s8 as _s8, seq as _seq,\n  struct as _struct, Structure as _Structure, u16 as _u16, u16be as _u16be, u24 as _u24, u24be as _u24be, u32 as _u32,\n  u32be as _u32be, u40 as _u40, u40be as _u40be, u48 as _u48, u48be as _u48be, u8 as _u8, UInt as _UInt,\n  union as _union, Union as _Union, unionLayoutDiscriminator as _unionLayoutDiscriminator, utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(length: number | Layout<number, P>, property?: P) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n"],"mappings":"yaAAA,IAAAA,GAAA,GAAAC,EAAAD,GAAA,kBAAAE,EAAA,SAAAC,EAAA,WAAAC,EAAA,cAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,SAAAC,GAAA,SAAAC,GAAA,SAAAC,GAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,WAAAC,EAAA,WAAAC,GAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,OAAAC,EAAA,QAAAC,EAAA,WAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,QAAAC,EAAA,UAAAC,EAAA,OAAAC,EAAA,UAAAC,EAAA,6BAAAC,EAAA,SAAAC,KAAA,eAAAC,EAAAhD,IAAA,IAAAiD,EAQO,iCAgBM7C,EAAS,EAAA8C,OAoBT7C,EAAY,EAAA8C,UAqBZ5C,EAAQ,EAAA6C,MAQRlD,EAAe,EAAAmD,aAQf/C,EAAO,EAAAgD,KAQPnD,EAAO,EAAAoD,KAGPxC,EAAS,EAAAyC,OACTZ,EAAK,EAAAa,GACLvB,EAAM,EAAAwB,IACNtB,EAAM,EAAAuB,IACNrB,EAAM,EAAAsB,IACNpB,EAAM,EAAAqB,IACNnB,EAAM,EAAAoB,IACN5C,EAAO,EAAA6C,KACP5B,EAAQ,EAAA6B,MACR3B,EAAQ,EAAA4B,MACR1B,EAAQ,EAAA2B,MACRzB,EAAQ,EAAA0B,MACRxB,EAAQ,EAAAyB,MACRjD,EAAS,EAAAkD,OACTtC,EAAK,EAAAuC,GACLjD,EAAM,EAAAkD,IACNhD,EAAM,EAAAiD,IACN/C,EAAM,EAAAgD,IACN9C,EAAM,EAAA+C,IACN7C,EAAM,EAAA8C,IACN3D,EAAO,EAAA4D,KACPtD,EAAQ,EAAAuD,MACRrD,EAAQ,EAAAsD,MACRpD,EAAQ,EAAAqD,MACRnD,EAAQ,EAAAoD,MACRlD,EAAQ,EAAAmD,MACRhE,EAAS,EAAAiE,OACTvE,EAAM,EAAAwE,IACNvE,EAAQ,EAAAwE,MACRvE,EAAM,EAAAwE,IACNvE,EAAQ,EAAAwE,MACRrD,EAAS,EAAAsD,OAgBTvD,EAAM,EAAAwD,IAKN3C,EAAQ,EAAA4C,MAKR3C,EAA2B,EAAA4C,yBAI3BjF,GAAO,EAAAkF,KACPjF,GAAO,EAAAkF,KACP7C,GAAO,EAAA8C,KACPrF,GAAO,EAAAsF,KAKP1E,GAAS,EAAA2E","names":["buffer_layout_exports","__export","BitStructure","Blob","Layout","Structure","UInt","Union","bits","blob","cstr","f32","f32be","f64","f64be","greedy","ns64","ns64be","nu64","nu64be","offset","s16","s16be","s24","s24be","s32","s32be","s40","s40be","s48","s48be","s8","seq","struct","u16","u16be","u24","u24be","u32","u32be","u40","u40be","u48","u48be","u8","union","unionLayoutDiscriminator","utf8","__toCommonJS","import_buffer_layout","_Layout","_Structure","_Union","_BitStructure","_UInt","_Blob","_greedy","_u8","_u16","_u24","_u32","_u40","_u48","_nu64","_u16be","_u24be","_u32be","_u40be","_u48be","_nu64be","_s8","_s16","_s24","_s32","_s40","_s48","_ns64","_s16be","_s24be","_s32be","_s40be","_s48be","_ns64be","_f32","_f32be","_f64","_f64be","_struct","_seq","_union","_unionLayoutDiscriminator","_blob","_cstr","_utf8","_bits","_offset"]}
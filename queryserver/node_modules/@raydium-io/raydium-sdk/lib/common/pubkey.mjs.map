{"version":3,"sources":["../../src/common/pubkey.ts","../../src/common/logger.ts","../../src/version.ts"],"sourcesContent":["import { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nimport { Logger } from \"./logger\";\n\nconst logger = Logger.from(\"common/pubkey\");\n\n/* ================= global public keys ================= */\nexport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nexport { SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\nexport const MEMO_PROGRAM_ID = new PublicKey(\"Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo\");\nexport const RENT_PROGRAM_ID = new PublicKey('SysvarRent111111111111111111111111111111111')\nexport const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')\n\n/* ================= validate public key ================= */\nexport type PublicKeyish = PublicKey | string;\n\nexport function validateAndParsePublicKey(publicKey: PublicKeyish) {\n  if (publicKey instanceof PublicKey) {\n    return publicKey;\n  }\n\n  if (typeof publicKey === \"string\") {\n    try {\n      const key = new PublicKey(publicKey);\n      return key;\n    } catch {\n      return logger.throwArgumentError(\"invalid public key\", \"publicKey\", publicKey);\n    }\n  }\n\n  return logger.throwArgumentError(\"invalid public key\", \"publicKey\", publicKey);\n}\n\nexport function findProgramAddress(seeds: Array<Buffer | Uint8Array>, programId: PublicKey) {\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\n  return { publicKey, nonce };\n}\n\nexport function AccountMeta(publicKey: PublicKey, isSigner: boolean) {\n  return {\n    pubkey: publicKey,\n    isWritable: true,\n    isSigner,\n  };\n}\n\nexport function AccountMetaReadonly(publicKey: PublicKey, isSigner: boolean) {\n  return {\n    pubkey: publicKey,\n    isWritable: false,\n    isSigner,\n  };\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { version } from \"../version\";\n\n// https://github.com/DABH/colors.js\nimport \"@colors/colors\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [name: string]: number } = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };\nconst _moduleLogLevel: { [name: string]: number } = {};\n\nlet _globalLogger: Logger;\n\nfunction _checkNormalize(): string {\n  try {\n    const missing: Array<string> = [];\n\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      return error.message;\n    }\n  }\n\n  return \"\";\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n  DEBUG = \"DEBUG\",\n  INFO = \"INFO\",\n  WARNING = \"WARNING\",\n  ERROR = \"ERROR\",\n  OFF = \"OFF\",\n}\n\nexport enum ErrorCode {\n  ///////////////////\n  // Generic Errors\n\n  // Unknown Error\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n  // Not Implemented\n  NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n  // Unsupported Operation\n  //   - operation\n  UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  NETWORK_ERROR = \"NETWORK_ERROR\",\n\n  // Some sort of bad response from the server\n  RPC_ERROR = \"RPC_ERROR\",\n\n  // Timeout\n  TIMEOUT = \"TIMEOUT\",\n\n  ///////////////////\n  // Operational  Errors\n\n  // Buffer Overrun\n  BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n  ///////////////////\n  // Argument Errors\n\n  // Missing new operator to an object\n  //  - name: The name of the class\n  MISSING_NEW = \"MISSING_NEW\",\n\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n  ///////////////////\n  // Blockchain Errors\n\n  // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n}\n\nconst HEX = \"0123456789abcdef\";\n\nfunction perfectDisplay(value: any, deeping = false) {\n  let _value = value;\n\n  try {\n    if (value instanceof Uint8Array) {\n      let hex = \"\";\n      for (let i = 0; i < value.length; i++) {\n        hex += HEX[value[i] >> 4];\n        hex += HEX[value[i] & 0x0f];\n      }\n      _value = `Uint8Array(0x${hex})`;\n    } else if (value instanceof PublicKey) {\n      _value = `PublicKey(${value.toBase58()})`;\n    } else if (value instanceof Object && !deeping) {\n      const obj = {};\n      Object.entries(value).forEach(([k, v]) => {\n        obj[k] = perfectDisplay(v, true);\n      });\n      _value = JSON.stringify(obj);\n    } else if (!deeping) {\n      _value = JSON.stringify(value);\n    }\n  } catch (error) {\n    _value = JSON.stringify(value.toString());\n  }\n\n  return _value;\n}\n\nexport class Logger {\n  readonly version: string = version;\n  readonly moduleName: string;\n\n  static errors = ErrorCode;\n\n  static levels = LogLevel;\n\n  constructor(moduleName: string) {\n    this.moduleName = moduleName;\n  }\n\n  _log(logLevel: LogLevel, args: Array<any>): void {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    const _logLevel = _moduleLogLevel[this.moduleName] || LogLevels[\"default\"];\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log(...args);\n  }\n\n  debug(...args: Array<any>): void {\n    this._log(Logger.levels.DEBUG, [\"[DEBUG]\".blue, ...args]);\n  }\n\n  info(...args: Array<any>): void {\n    this._log(Logger.levels.INFO, [\"[INFO]\".green, ...args]);\n  }\n\n  warn(...args: Array<any>): void {\n    this._log(Logger.levels.WARNING, [\"[WARN]\".yellow, ...args]);\n  }\n\n  makeError(message: string, code?: ErrorCode, params?: any): Error {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails: Array<string> = [];\n    Object.entries(params).forEach(([key, value]) => {\n      messageDetails.push(`${key}=${perfectDisplay(value)})`);\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`module=${this.moduleName}`);\n    messageDetails.push(`version=${this.version}`);\n\n    const reason = message;\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n\n    // @TODO: Any??\n    const error: any = new Error(message);\n    error.reason = reason;\n    error.code = code;\n\n    Object.entries(params).forEach(([key, value]) => {\n      error[key] = value;\n    });\n\n    return error;\n  }\n\n  throwError(message: string, code?: ErrorCode, params?: any): never {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message: string, name: string, value: any): never {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value,\n    });\n  }\n\n  assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n    if (condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition: any, message: string, name: string, value: any): void {\n    if (condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message?: string): void {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError,\n      });\n    }\n  }\n\n  checkSafeUint53(value: number, message?: string): void {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value,\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value,\n      });\n    }\n  }\n\n  checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count,\n        expectedCount,\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count,\n        expectedCount,\n      });\n    }\n  }\n\n  checkNew(target: any, kind: any): void {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n    }\n  }\n\n  checkAbstract(target: any, kind: any): void {\n    if (target === kind) {\n      this.throwError(\n        \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        { name: target.name, operation: \"new\" },\n      );\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n    }\n  }\n\n  static globalLogger(): Logger {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship: boolean, permanent?: boolean): void {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\",\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\",\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(moduleName: string, logLevel: \"DEBUG\" | \"INFO\" | \"WARNING\" | \"ERROR\" | \"OFF\"): void {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _moduleLogLevel[moduleName] = level;\n  }\n\n  static from(version: string): Logger {\n    return new Logger(version);\n  }\n}\n","export const version = \"1.1.0-beta.6\";\n"],"mappings":"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","names":["PublicKey","SystemProgram","PublicKey","version","_permanentCensorErrors","_censorErrors","LogLevels","_moduleLogLevel","_globalLogger","_checkNormalize","missing","form","error","_normalizeError","LogLevel","ErrorCode","HEX","perfectDisplay","value","deeping","_value","hex","PublicKey","obj","k","v","_Logger","moduleName","version","logLevel","args","level","message","code","params","messageDetails","key","reason","name","condition","count","expectedCount","target","kind","censorship","permanent","Logger","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","SYSVAR_CLOCK_PUBKEY","SYSVAR_RENT_PUBKEY","logger","Logger","SYSTEM_PROGRAM_ID","SystemProgram","MEMO_PROGRAM_ID","PublicKey","RENT_PROGRAM_ID","METADATA_PROGRAM_ID","validateAndParsePublicKey","publicKey","e","findProgramAddress","seeds","programId","nonce","AccountMeta","isSigner","AccountMetaReadonly"]}
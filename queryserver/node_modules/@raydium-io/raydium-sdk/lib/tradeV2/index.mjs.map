{"version":3,"sources":["../../src/tradeV2/trade.ts","../../src/marshmallow/index.ts","../../src/marshmallow/buffer-layout.ts","../../src/ammV3/utils/tick.ts","../../src/ammV3/utils/pda.ts","../../src/common/convert-json.ts","../../src/entity/amount.ts","../../src/entity/bignumber.ts","../../src/entity/constant.ts","../../src/token/sol.ts","../../src/token/mainnet.ts","../../src/token/devnet.ts","../../src/token/testnet.ts","../../src/token/util.ts","../../src/entity/currency.ts","../../src/entity/fraction.ts","../../src/entity/to-format.ts","../../src/entity/percent.ts","../../src/entity/price.ts","../../src/common/pubkey.ts","../../src/common/logger.ts","../../src/version.ts","../../src/common/inspect.ts","../../src/common/lodash.ts","../../src/common/web3.ts","../../src/ammV3/utils/util.ts","../../src/ammV3/layout.ts","../../src/ammV3/instrument.ts","../../src/ammV3/ammV3.ts","../../src/base/base.ts","../../src/spl/layout.ts","../../src/spl/spl.ts","../../src/base/util.ts","../../src/ammV3/utils/constants.ts","../../src/ammV3/utils/math.ts","../../src/ammV3/utils/tickQuery.ts","../../src/ammV3/utils/pool.ts","../../src/ammV3/utils/position.ts","../../src/liquidity/id.ts","../../src/liquidity/layout.ts","../../src/liquidity/liquidity.ts","../../src/serum/id.ts","../../src/serum/layout.ts","../../src/serum/serum.ts","../../src/liquidity/stable.ts","../../src/route/id.ts","../../src/route/route.ts","../../src/tradeV2/instrument.ts"],"sourcesContent":["import { Connection, Keypair, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { AmmV3, AmmV3PoolInfo, ReturnTypeFetchMultiplePoolTickArrays } from \"../ammV3\";\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64 } from \"../ammV3/utils/constants\";\nimport { Base, TokenAccount } from \"../base\";\nimport {\n  forecastTransactionSize, jsonInfo2PoolKeys, parseSimulateLogToJson, parseSimulateValue, simulateMultipleInstruction,\n} from \"../common\";\nimport { Currency, CurrencyAmount, ONE, Percent, Price, Token, TokenAmount, ZERO } from \"../entity\";\nimport {\n  initStableModelLayout, Liquidity, LiquidityPoolJsonInfo, LiquidityPoolKeys, LiquidityPoolsJsonFile,\n} from \"../liquidity\";\nimport { Route } from \"../route\";\n\nimport { route1Instruction, route2Instruction } from \"./instrument\";\n\nexport type PoolType = AmmV3PoolInfo | LiquidityPoolJsonInfo\ntype RoutePathType = {\n  [routeMint: string]: {\n    in: PoolType[];\n    out: PoolType[];\n    mDecimals: number\n  }\n}\n\n\ninterface poolAccountInfoV4 {\n  ammId: string;\n  status: BN;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  baseReserve: BN;\n  quoteReserve: BN;\n  lpSupply: BN;\n  startTime: BN;\n}\n\nexport interface ComputeAmountOutAmmLayout {\n  amountIn: CurrencyAmount | TokenAmount,\n  amountOut: CurrencyAmount | TokenAmount,\n  minAmountOut: CurrencyAmount | TokenAmount,\n  currentPrice: Price | undefined\n  executionPrice: Price | null\n  priceImpact: Percent\n  fee: CurrencyAmount[],\n  routeType: 'amm',\n  poolKey: PoolType[],\n  remainingAccounts: PublicKey[][]\n  middleMint: PublicKey | undefined,\n  poolReady: boolean\n  poolType: string | undefined\n}\nexport interface ComputeAmountOutRouteLayout {\n  amountIn: CurrencyAmount | TokenAmount,\n  amountOut: CurrencyAmount | TokenAmount,\n  minAmountOut: CurrencyAmount | TokenAmount,\n  currentPrice: Price | undefined\n  executionPrice: Price | null\n  priceImpact: Percent\n  fee: CurrencyAmount[],\n  routeType: 'route',\n  poolKey: PoolType[],\n  remainingAccounts: PublicKey[][]\n  middleMint: PublicKey | undefined,\n  poolReady: boolean\n  poolType: (string | undefined)[]\n}\ntype ComputeAmountOutLayout = ComputeAmountOutAmmLayout | ComputeAmountOutRouteLayout\n\ntype makeSwapInstructionParam = {\n  ownerInfo: {\n    wallet: PublicKey,\n    // tokenAccountA: PublicKey\n    // tokenAccountB: PublicKey\n\n    sourceToken: PublicKey,\n    routeToken?: PublicKey,\n    destinationToken: PublicKey,\n    userPdaAccount?: PublicKey,\n  },\n\n  inputMint: PublicKey\n  routeProgram: PublicKey\n\n  swapInfo: ComputeAmountOutLayout\n}\n\nexport interface ReturnTypeGetAllRoute {\n  directPath: PoolType[];\n  addLiquidityPools: LiquidityPoolJsonInfo[];\n  routePathDict: RoutePathType;\n  needSimulate: LiquidityPoolJsonInfo[];\n  needTickArray: AmmV3PoolInfo[];\n}\nexport interface ReturnTypeFetchMultipleInfo { [ammId: string]: poolAccountInfoV4 }\nexport type ReturnTypeGetAddLiquidityDefaultPool = LiquidityPoolJsonInfo | undefined\nexport type ReturnTypeGetAllRouteComputeAmountOut = ComputeAmountOutLayout[]\nexport interface ReturnTypeMakeSwapInstruction {\n  signers: (Keypair | Signer)[],\n  instructions: TransactionInstruction[]\n  address: { [key: string]: PublicKey },\n}\nexport interface ReturnTypeMakeSwapTranscation {\n  transactions: {\n    transaction: Transaction,\n    signer: (Keypair | Signer)[]\n  }[],\n  address: { [key: string]: PublicKey },\n}\n\nexport class TradeV2 extends Base {\n\n  static getAllRoute({\n    inputMint, outputMint, apiPoolList, ammV3List\n  }: {\n    inputMint: PublicKey,\n    outputMint: PublicKey,\n\n    apiPoolList?: LiquidityPoolsJsonFile\n    ammV3List?: AmmV3PoolInfo[]\n  }): ReturnTypeGetAllRoute {\n\n    const needSimulate: { [poolKey: string]: LiquidityPoolJsonInfo } = {}\n    const needTickArray: { [poolKey: string]: AmmV3PoolInfo } = {}\n\n    const directPath: PoolType[] = []\n\n    const routePathDict: RoutePathType = {} // {[route mint: string]: {in: [] , out: []}}\n\n    for (const itemAmmPool of ammV3List ?? []) {\n      if ((itemAmmPool.mintA.mint.equals(inputMint) && itemAmmPool.mintB.mint.equals(outputMint)) || (itemAmmPool.mintA.mint.equals(outputMint) && itemAmmPool.mintB.mint.equals(inputMint))) {\n        directPath.push(itemAmmPool)\n        needTickArray[itemAmmPool.id.toString()] = itemAmmPool\n      }\n      if (itemAmmPool.mintA.mint.equals(inputMint)) {\n        const t = itemAmmPool.mintB.mint.toString()\n        if (routePathDict[t] === undefined) routePathDict[t] = { in: [], out: [], mDecimals: itemAmmPool.mintB.decimals }\n        routePathDict[t].in.push(itemAmmPool)\n      }\n      if (itemAmmPool.mintB.mint.equals(inputMint)) {\n        const t = itemAmmPool.mintA.mint.toString()\n        if (routePathDict[t] === undefined) routePathDict[t] = { in: [], out: [], mDecimals: itemAmmPool.mintA.decimals }\n        routePathDict[t].in.push(itemAmmPool)\n      }\n      if (itemAmmPool.mintA.mint.equals(outputMint)) {\n        const t = itemAmmPool.mintB.mint.toString()\n        if (routePathDict[t] === undefined) routePathDict[t] = { in: [], out: [], mDecimals: itemAmmPool.mintB.decimals }\n        routePathDict[t].out.push(itemAmmPool)\n      }\n      if (itemAmmPool.mintB.mint.equals(outputMint)) {\n        const t = itemAmmPool.mintA.mint.toString()\n        if (routePathDict[t] === undefined) routePathDict[t] = { in: [], out: [], mDecimals: itemAmmPool.mintA.decimals }\n        routePathDict[t].out.push(itemAmmPool)\n      }\n    }\n\n    const addLiquidityPools: LiquidityPoolJsonInfo[] = []\n\n    const _inputMint = inputMint.toString()\n    const _outputMint = outputMint.toString()\n    for (const itemAmmPool of (apiPoolList ?? {}).official ?? []) {\n      if ((itemAmmPool.baseMint === _inputMint && itemAmmPool.quoteMint === _outputMint) || (itemAmmPool.baseMint === _outputMint && itemAmmPool.quoteMint === _inputMint)) {\n        directPath.push(itemAmmPool)\n        needSimulate[itemAmmPool.id] = itemAmmPool\n        addLiquidityPools.push(itemAmmPool)\n      }\n      if (itemAmmPool.baseMint === _inputMint) {\n        if (routePathDict[itemAmmPool.quoteMint] === undefined) routePathDict[itemAmmPool.quoteMint] = { in: [], out: [], mDecimals: itemAmmPool.quoteDecimals }\n        routePathDict[itemAmmPool.quoteMint].in.push(itemAmmPool)\n      }\n      if (itemAmmPool.quoteMint === _inputMint) {\n        if (routePathDict[itemAmmPool.baseMint] === undefined) routePathDict[itemAmmPool.baseMint] = { in: [], out: [], mDecimals: itemAmmPool.baseDecimals }\n        routePathDict[itemAmmPool.baseMint].in.push(itemAmmPool)\n      }\n      if (itemAmmPool.baseMint === _outputMint) {\n        if (routePathDict[itemAmmPool.quoteMint] === undefined) routePathDict[itemAmmPool.quoteMint] = { in: [], out: [], mDecimals: itemAmmPool.quoteDecimals }\n        routePathDict[itemAmmPool.quoteMint].out.push(itemAmmPool)\n      }\n      if (itemAmmPool.quoteMint === _outputMint) {\n        if (routePathDict[itemAmmPool.baseMint] === undefined) routePathDict[itemAmmPool.baseMint] = { in: [], out: [], mDecimals: itemAmmPool.baseDecimals }\n        routePathDict[itemAmmPool.baseMint].out.push(itemAmmPool)\n      }\n    }\n    const _insertAddLiquidityPool = addLiquidityPools.length === 0\n    for (const itemAmmPool of (apiPoolList ?? {}).unOfficial ?? []) {\n      if ((itemAmmPool.baseMint === _inputMint && itemAmmPool.quoteMint === _outputMint) || (itemAmmPool.baseMint === _outputMint && itemAmmPool.quoteMint === _inputMint)) {\n        directPath.push(itemAmmPool)\n        needSimulate[itemAmmPool.id] = itemAmmPool\n        if (_insertAddLiquidityPool) addLiquidityPools.push(itemAmmPool)\n      }\n      if (itemAmmPool.baseMint === _inputMint) {\n        if (routePathDict[itemAmmPool.quoteMint] === undefined) routePathDict[itemAmmPool.quoteMint] = { in: [], out: [], mDecimals: itemAmmPool.quoteDecimals }\n        routePathDict[itemAmmPool.quoteMint].in.push(itemAmmPool)\n      }\n      if (itemAmmPool.quoteMint === _inputMint) {\n        if (routePathDict[itemAmmPool.baseMint] === undefined) routePathDict[itemAmmPool.baseMint] = { in: [], out: [], mDecimals: itemAmmPool.baseDecimals }\n        routePathDict[itemAmmPool.baseMint].in.push(itemAmmPool)\n      }\n      if (itemAmmPool.baseMint === _outputMint) {\n        if (routePathDict[itemAmmPool.quoteMint] === undefined) routePathDict[itemAmmPool.quoteMint] = { in: [], out: [], mDecimals: itemAmmPool.quoteDecimals }\n        routePathDict[itemAmmPool.quoteMint].out.push(itemAmmPool)\n      }\n      if (itemAmmPool.quoteMint === _outputMint) {\n        if (routePathDict[itemAmmPool.baseMint] === undefined) routePathDict[itemAmmPool.baseMint] = { in: [], out: [], mDecimals: itemAmmPool.baseDecimals }\n        routePathDict[itemAmmPool.baseMint].out.push(itemAmmPool)\n      }\n    }\n\n\n    for (const t of Object.keys(routePathDict)) {\n      if (routePathDict[t].in.length === 1 && routePathDict[t].out.length === 1 && String(routePathDict[t].in[0].id) === String(routePathDict[t].out[0].id)) {\n        delete routePathDict[t]\n        continue\n      }\n      if (routePathDict[t].in.length === 0 || routePathDict[t].out.length === 0) {\n        delete routePathDict[t]\n        continue\n      }\n\n      const info = routePathDict[t]\n\n      for (const infoIn of info.in) {\n        for (const infoOut of info.out) {\n          if (infoIn.version === 6 && needTickArray[infoIn.id.toString()] === undefined) {\n            needTickArray[infoIn.id.toString()] = infoIn as AmmV3PoolInfo\n          } else if (infoIn.version !== 6 && needSimulate[infoIn.id as string] === undefined) {\n            needSimulate[infoIn.id as string] = infoIn as LiquidityPoolJsonInfo\n          }\n          if (infoOut.version === 6 && needTickArray[infoOut.id.toString()] === undefined) {\n            needTickArray[infoOut.id.toString()] = infoOut as AmmV3PoolInfo\n          } else if (infoOut.version !== 6 && needSimulate[infoOut.id as string] === undefined) {\n            needSimulate[infoOut.id as string] = infoOut as LiquidityPoolJsonInfo\n          }\n        }\n      }\n    }\n\n    return {\n      directPath,\n      addLiquidityPools,\n      routePathDict,\n      needSimulate: Object.values(needSimulate),\n      needTickArray: Object.values(needTickArray),\n    }\n  }\n\n  static async fetchMultipleInfo({\n    connection, pools, batchRequest = true\n  }: {\n    connection: Connection,\n    pools: LiquidityPoolJsonInfo[],\n    batchRequest?: boolean,\n  }): Promise<ReturnTypeFetchMultipleInfo> {\n    if (pools.find(i => i.version === 5)) await initStableModelLayout(connection);\n\n    const instructions = pools.map((pool) => Liquidity.makeSimulatePoolInfoInstruction({ poolKeys: jsonInfo2PoolKeys(pool) }));\n\n    const logs = await simulateMultipleInstruction(connection, instructions, \"GetPoolData\", batchRequest);\n\n    const poolsInfo: ReturnTypeFetchMultipleInfo = {}\n    for (const log of logs) {\n      const json = parseSimulateLogToJson(log, \"GetPoolData\");\n\n      const ammId = JSON.parse(json)['amm_id']\n      const status = new BN(parseSimulateValue(json, \"status\"));\n      const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\n      const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\n      const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\n      const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\n      const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\n      const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\n      // TODO fix it when split stable\n      let startTime = \"0\";\n      try {\n        startTime = parseSimulateValue(json, \"pool_open_time\");\n      } catch (error) {\n        //\n      }\n\n      poolsInfo[ammId] = {\n        ammId,\n        status,\n        baseDecimals,\n        quoteDecimals,\n        lpDecimals,\n        baseReserve,\n        quoteReserve,\n        lpSupply,\n        startTime: new BN(startTime),\n      }\n    }\n\n    return poolsInfo;\n  }\n\n  static getAddLiquidityDefaultPool({ addLiquidityPools, poolInfosCache }: {\n    addLiquidityPools: LiquidityPoolJsonInfo[]\n    poolInfosCache: { [ammId: string]: poolAccountInfoV4 }\n  }): ReturnTypeGetAddLiquidityDefaultPool {\n    if (addLiquidityPools.length === 0) return undefined\n    if (addLiquidityPools.length === 1) return addLiquidityPools[0]\n    addLiquidityPools.sort((a, b) => b.version - a.version)\n    if (addLiquidityPools[0].version !== addLiquidityPools[1].version) return addLiquidityPools[0]\n\n    const _addLiquidityPools = addLiquidityPools.filter(i => i.version === addLiquidityPools[0].version)\n\n    _addLiquidityPools.sort((a, b) => this.ComparePoolSize(a, b, poolInfosCache))\n    return _addLiquidityPools[0]\n  }\n\n  private static ComparePoolSize(a: LiquidityPoolJsonInfo, b: LiquidityPoolJsonInfo, ammIdToPoolInfo: { [ammId: string]: poolAccountInfoV4 }) {\n    const aInfo = ammIdToPoolInfo[a.id]\n    const bInfo = ammIdToPoolInfo[b.id]\n    if (aInfo === undefined) return 1\n    if (bInfo === undefined) return -1\n\n    if (a.baseMint === b.baseMint) {\n      const sub = aInfo.baseReserve.sub(bInfo.baseReserve)\n      return sub.gte(ZERO) ? -1 : 1\n    } else {\n      const sub = aInfo.baseReserve.sub(bInfo.quoteReserve)\n      return sub.gte(ZERO) ? -1 : 1\n    }\n  }\n\n  static getAllRouteComputeAmountOut({ inputTokenAmount, outputToken, directPath, routePathDict, simulateCache, tickCache, slippage, chainTime }: {\n    directPath: PoolType[],\n    routePathDict: RoutePathType,\n    simulateCache: ReturnTypeFetchMultipleInfo,\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays,\n\n    inputTokenAmount: CurrencyAmount | TokenAmount,\n    outputToken: Token | Currency,\n    slippage: Percent,\n    chainTime: number\n  }): ReturnTypeGetAllRouteComputeAmountOut {\n    const amountIn = inputTokenAmount\n    const outRoute: ComputeAmountOutLayout[] = []\n\n    for (const itemPool of directPath) {\n      if (itemPool.version === 6) {\n        try {\n          const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee, remainingAccounts } = AmmV3.computeAmountOutFormat({\n            poolInfo: itemPool as AmmV3PoolInfo,\n            tickArrayCache: tickCache[itemPool.id.toString()],\n            amountIn,\n            currencyOut: outputToken,\n            slippage,\n          })\n          outRoute.push({ amountIn, amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee: [fee], remainingAccounts: [remainingAccounts], routeType: 'amm', poolKey: [itemPool], middleMint: undefined, poolReady: true, poolType: 'CLMM' })\n        } catch (e) {\n          // \n        }\n      } else {\n        try {\n          if (![1,6,7].includes(simulateCache[itemPool.id as string].status.toNumber())) continue\n          const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee } =\n            Liquidity.computeAmountOut({\n              poolKeys: jsonInfo2PoolKeys(itemPool) as LiquidityPoolKeys,\n              poolInfo: simulateCache[itemPool.id as string],\n              amountIn,\n              currencyOut: outputToken,\n              slippage,\n            })\n          outRoute.push({ amountIn, amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee: [fee], routeType: 'amm', poolKey: [itemPool], remainingAccounts: [], middleMint: undefined, poolReady: simulateCache[itemPool.id as string].startTime.toNumber() < chainTime, poolType: itemPool.version === 5 ? 'STABLE' : undefined  })\n        } catch (e) {\n          //\n        }\n      }\n    }\n    for (const [routeMint, info] of Object.entries(routePathDict)) {\n      for (const iFromPool of info.in) {\n        if (!simulateCache[iFromPool.id as string] && !tickCache[iFromPool.id.toString()]) continue\n        if (iFromPool.version !== 6 && ![1,6,7].includes(simulateCache[iFromPool.id as string].status.toNumber())) continue\n        for (const iOutPool of info.out) {\n          if (!simulateCache[iOutPool.id as string] && !tickCache[iOutPool.id.toString()]) continue\n          if (iOutPool.version !== 6 && ![1,6,7].includes(simulateCache[iOutPool.id as string].status.toNumber())) continue\n          try {\n            const { amountOut, minAmountOut, executionPrice, priceImpact, fee, remainingAccounts } = TradeV2.computeAmountOut({\n              middleMintInfo: {\n                mint: new PublicKey(routeMint),\n                decimals: info.mDecimals\n              },\n              amountIn,\n              currencyOut: outputToken,\n              slippage,\n\n              fromPool: iFromPool,\n              toPool: iOutPool,\n              simulateCache,\n              tickCache\n            });\n            const infoAPoolOpen = iFromPool.version === 6 ? true : simulateCache[iFromPool.id as string].startTime.toNumber() < chainTime\n            const infoBPoolOpen = iOutPool.version === 6 ? true : simulateCache[iOutPool.id as string].startTime.toNumber() < chainTime\n\n            const poolTypeA = iFromPool.version === 6 ? 'CLMM' : iFromPool.version === 5 ? \"STABLE\" : undefined\n            const poolTypeB = iOutPool.version === 6 ? 'CLMM' : iOutPool.version === 5 ? \"STABLE\" : undefined\n            outRoute.push({\n              amountIn, amountOut, minAmountOut, currentPrice: undefined, executionPrice, priceImpact, fee, routeType: 'route', poolKey: [iFromPool, iOutPool], remainingAccounts, middleMint: new PublicKey(routeMint), poolReady: infoAPoolOpen && infoBPoolOpen, poolType: [poolTypeA, poolTypeB]\n            })\n          } catch (e) {\n            //\n          }\n        }\n      }\n    }\n\n    outRoute.sort((a, b) => (a.amountOut.raw.sub(b.amountOut.raw).gt(ZERO) ? -1 : 1))\n\n    return outRoute\n  }\n\n  private static computeAmountOut({\n    middleMintInfo,\n    amountIn,\n    currencyOut,\n    slippage,\n\n    fromPool,\n    toPool,\n    simulateCache,\n    tickCache,\n  }: {\n    middleMintInfo: { mint: PublicKey, decimals: number },\n    amountIn: CurrencyAmount | TokenAmount;\n    currencyOut: Currency | Token;\n    slippage: Percent;\n\n    fromPool: PoolType,\n    toPool: PoolType,\n    simulateCache: ReturnTypeFetchMultipleInfo,\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays,\n  }) {\n    const middleToken = new Token(middleMintInfo.mint, middleMintInfo.decimals);\n\n    let minMiddleAmountOut\n    let firstPriceImpact\n    let firstFee\n    let firstRemainingAccounts\n\n    const _slippage = new Percent(0, 100)\n\n    if (fromPool.version === 6) {\n      const {\n        minAmountOut: _minMiddleAmountOut,\n        priceImpact: _firstPriceImpact,\n        fee: _firstFee,\n        remainingAccounts: _firstRemainingAccounts\n      } = AmmV3.computeAmountOutFormat({\n        poolInfo: fromPool as AmmV3PoolInfo,\n        tickArrayCache: tickCache[fromPool.id.toString()],\n        amountIn,\n        currencyOut: middleToken,\n        slippage: _slippage,\n      })\n      minMiddleAmountOut = _minMiddleAmountOut\n      firstPriceImpact = _firstPriceImpact\n      firstFee = _firstFee\n      firstRemainingAccounts = _firstRemainingAccounts\n    } else {\n      const {\n        minAmountOut: _minMiddleAmountOut,\n        priceImpact: _firstPriceImpact,\n        fee: _firstFee,\n      } = Liquidity.computeAmountOut({\n        poolKeys: jsonInfo2PoolKeys(fromPool) as LiquidityPoolKeys,\n        poolInfo: simulateCache[fromPool.id as string],\n        amountIn,\n        currencyOut: middleToken,\n        slippage: _slippage,\n      });\n      minMiddleAmountOut = _minMiddleAmountOut\n      firstPriceImpact = _firstPriceImpact\n      firstFee = _firstFee\n    }\n\n    let amountOut\n    let minAmountOut\n    let secondPriceImpact\n    let secondFee\n    let secondRemainingAccounts\n    if (toPool.version === 6) {\n      const {\n        amountOut: _amountOut,\n        minAmountOut: _minAmountOut,\n        priceImpact: _secondPriceImpact,\n        fee: _secondFee,\n        remainingAccounts: _secondRemainingAccounts\n      } = AmmV3.computeAmountOutFormat({\n        poolInfo: toPool as AmmV3PoolInfo,\n        tickArrayCache: tickCache[toPool.id.toString()],\n        amountIn: minMiddleAmountOut,\n        currencyOut,\n        slippage,\n      })\n      amountOut = _amountOut\n      minAmountOut = _minAmountOut\n      secondPriceImpact = _secondPriceImpact\n      secondFee = _secondFee\n      secondRemainingAccounts = _secondRemainingAccounts\n    } else {\n      const {\n        amountOut: _amountOut,\n        minAmountOut: _minAmountOut,\n        priceImpact: _secondPriceImpact,\n        fee: _secondFee,\n      } = Liquidity.computeAmountOut({\n        poolKeys: jsonInfo2PoolKeys(toPool) as LiquidityPoolKeys,\n        poolInfo: simulateCache[toPool.id as string],\n        amountIn: minMiddleAmountOut,\n        currencyOut,\n        slippage,\n      });\n      amountOut = _amountOut\n      minAmountOut = _minAmountOut\n      secondPriceImpact = _secondPriceImpact\n      secondFee = _secondFee\n    }\n\n    let executionPrice: Price | null = null;\n    const amountInRaw = amountIn.raw;\n    const amountOutRaw = amountOut.raw;\n    const currencyIn = amountIn instanceof TokenAmount ? amountIn.token : amountIn.currency;\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Price(currencyIn, amountInRaw, currencyOut, amountOutRaw);\n    }\n\n    return {\n      // middleAmountOut,\n      minMiddleAmountOut,\n      amountOut,\n      minAmountOut,\n      executionPrice,\n      priceImpact: firstPriceImpact.add(secondPriceImpact),\n      fee: [firstFee, secondFee],\n      remainingAccounts: [firstRemainingAccounts, secondRemainingAccounts]\n    };\n  }\n\n  static makeSwapInstruction({ routeProgram, ownerInfo, inputMint, swapInfo }: makeSwapInstructionParam): ReturnTypeMakeSwapInstruction {\n    if (swapInfo.routeType === 'amm') {\n      if (swapInfo.poolKey[0].version === 6) {\n        const _poolKey = swapInfo.poolKey[0] as AmmV3PoolInfo\n        const sqrtPriceLimitX64 = inputMint.equals((_poolKey).mintA.mint)\n          ? MIN_SQRT_PRICE_X64.add(ONE)\n          : MAX_SQRT_PRICE_X64.sub(ONE);\n\n        return AmmV3.makeSwapBaseInInstructions({\n          poolInfo: _poolKey,\n          ownerInfo: {\n            wallet: ownerInfo.wallet,\n            tokenAccountA: _poolKey.mintA.mint.equals(inputMint) ? ownerInfo.sourceToken : ownerInfo.destinationToken,\n            tokenAccountB: _poolKey.mintA.mint.equals(inputMint) ? ownerInfo.destinationToken : ownerInfo.sourceToken,\n          },\n          inputMint,\n          amountIn: swapInfo.amountIn.raw,\n          amountOutMin: swapInfo.minAmountOut.raw,\n          sqrtPriceLimitX64,\n          remainingAccounts: swapInfo.remainingAccounts[0]\n        })\n      } else {\n        const _poolKey = swapInfo.poolKey[0] as LiquidityPoolJsonInfo\n\n        return {\n          signers: [] as Keypair[],\n          instructions: [\n            Liquidity.makeSwapInstruction({\n              poolKeys: jsonInfo2PoolKeys(_poolKey),\n              userKeys: {\n                tokenAccountIn: ownerInfo.sourceToken,\n                tokenAccountOut: ownerInfo.destinationToken,\n                owner: ownerInfo.wallet,\n              },\n              amountIn: swapInfo.amountIn.raw,\n              amountOut: swapInfo.minAmountOut.raw,\n              fixedSide: \"in\",\n            })\n          ],\n          address: {} as { [key: string]: PublicKey },\n        };\n      }\n    } else if (swapInfo.routeType === 'route') {\n      const poolKey1 = swapInfo.poolKey[0]\n      const poolKey2 = swapInfo.poolKey[1]\n\n      return {\n        signers: [] as Keypair[],\n        instructions: [\n          route1Instruction(\n            routeProgram,\n            poolKey1,\n            poolKey2,\n\n            ownerInfo.sourceToken,\n            ownerInfo.routeToken!,\n            ownerInfo.userPdaAccount!,\n            ownerInfo.wallet,\n\n            inputMint,\n\n            swapInfo.amountIn.raw,\n            swapInfo.minAmountOut.raw,\n            swapInfo.remainingAccounts[0]\n          ),\n          route2Instruction(\n            routeProgram,\n            poolKey1,\n            poolKey2,\n\n            ownerInfo.routeToken!,\n            ownerInfo.destinationToken,\n            ownerInfo.userPdaAccount!,\n            ownerInfo.wallet,\n\n            swapInfo.middleMint!,\n\n            swapInfo.remainingAccounts[1]\n          )\n        ],\n        address: {} as { [key: string]: PublicKey },\n      };\n    } else {\n      throw Error('route type error')\n    }\n  }\n\n  static async makeSwapTranscation({ connection, swapInfo, ownerInfo, checkTransaction }: {\n    connection: Connection\n    swapInfo: ComputeAmountOutLayout,\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      associatedOnly: boolean\n    }\n    checkTransaction: boolean\n  }): Promise<ReturnTypeMakeSwapTranscation> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    const amountIn = swapInfo.amountIn\n    const amountOut = swapInfo.amountOut\n    const useSolBalance = !(amountIn instanceof TokenAmount)\n    const outSolBalance = !(amountOut instanceof TokenAmount)\n    const inputMint = amountIn instanceof TokenAmount ? amountIn.token.mint : Token.WSOL.mint\n    const middleMint = swapInfo.middleMint!\n    const outputMint = amountOut instanceof TokenAmount ? amountOut.token.mint : Token.WSOL.mint\n\n    const routeProgram = new PublicKey('routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS')\n\n    const sourceToken = await this._selectOrCreateTokenAccount({\n      mint: inputMint,\n      tokenAccounts: useSolBalance ? [] : ownerInfo.tokenAccounts,\n      createInfo: useSolBalance ? {\n        connection,\n        payer: ownerInfo.wallet,\n        amount: amountIn.raw,\n\n        frontInstructions,\n        endInstructions,\n        signers,\n      } : undefined,\n      owner: ownerInfo.wallet,\n      associatedOnly: useSolBalance ? false : ownerInfo.associatedOnly\n    })\n\n    if (sourceToken === undefined) {\n      throw Error('input account check error')\n    }\n\n    const destinationToken = await this._selectOrCreateTokenAccount({\n      mint: outputMint,\n      tokenAccounts: ownerInfo.tokenAccounts,\n      createInfo: {\n        connection,\n        payer: ownerInfo.wallet,\n        amount: 0,\n\n        frontInstructions,\n        endInstructions: outSolBalance ? endInstructions : undefined,\n        signers,\n      },\n      owner: ownerInfo.wallet,\n      associatedOnly: ownerInfo.associatedOnly\n    })\n\n    let routeToken: PublicKey | undefined = undefined\n    if (swapInfo.routeType === 'route') {\n      routeToken = await this._selectOrCreateTokenAccount({\n        mint: middleMint,\n        tokenAccounts: ownerInfo.tokenAccounts,\n        createInfo: {\n          connection,\n          payer: ownerInfo.wallet,\n          amount: 0,\n  \n          frontInstructions,\n          endInstructions,\n          signers,\n        },\n        owner: ownerInfo.wallet,\n        associatedOnly: false\n      })\n    }\n\n    const ins = this.makeSwapInstruction({\n      routeProgram,\n      inputMint,\n      swapInfo,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        sourceToken,\n        routeToken,\n        destinationToken: destinationToken!,\n        userPdaAccount: swapInfo.poolKey.length === 2 ? Route.getAssociatedMiddleStatusAccount({\n          programId: routeProgram, fromPoolId: new PublicKey(String(swapInfo.poolKey[0].id)), owner: ownerInfo.wallet, middleMint: swapInfo.middleMint!\n        }) : undefined\n      }\n    })\n\n    const transactions: {transaction: Transaction, signer: Signer[]}[] = []\n    \n    const tempIns = [...frontInstructions, ...ins.instructions, ...endInstructions]\n    const tempSigner = [...signers, ...ins.signers]\n    if (checkTransaction) {\n      if (forecastTransactionSize(tempIns, [ownerInfo.wallet, ...tempSigner.map(i => i.publicKey)])) {\n        transactions.push({\n          transaction: new Transaction().add(...tempIns),\n          signer: tempSigner\n        })\n      } else {\n        if (frontInstructions.length > 0) {\n          transactions.push({\n            transaction: new Transaction().add(...frontInstructions),\n            signer: [...signers]\n          })\n        }\n        if (forecastTransactionSize(ins.instructions, [ownerInfo.wallet])) {\n          transactions.push({\n            transaction: new Transaction().add(...ins.instructions),\n            signer: [...ins.signers]\n          })\n        } else {\n          for (const i of ins.instructions) {\n            transactions.push({\n              transaction: new Transaction().add(i),\n              signer: [...ins.signers]\n            })\n          }\n        }\n        if (endInstructions.length > 0) {\n          transactions.push({\n            transaction: new Transaction().add(...endInstructions),\n            signer: []\n          })\n        }\n      }\n    } else {\n      if (swapInfo.routeType === 'amm') {\n        transactions.push({\n          transaction: new Transaction().add(...tempIns),\n          signer: tempSigner\n        })\n      } else {\n        if (frontInstructions.length > 0) {\n          transactions.push({\n            transaction: new Transaction().add(...frontInstructions),\n            signer: [...signers]\n          })\n        }\n        transactions.push({\n          transaction: new Transaction().add(...ins.instructions),\n          signer: [...ins.signers]\n        })\n        if (endInstructions.length > 0) {\n          transactions.push({\n            transaction: new Transaction().add(...endInstructions),\n            signer: []\n          })\n        }\n      }\n    }\n\n    return {\n      transactions,\n      address: { ...ins.address }\n    }\n  }\n}","import { PublicKey } from \"@solana/web3.js\";\nimport BN, { isBN } from \"bn.js\";\n\nimport {\n  bits, blob, Blob, Layout, offset as _offset, seq as _seq, Structure as _Structure, u32 as _u32, u8 as _u8, UInt,\n  union as _union, Union as _Union,\n} from \"./buffer-layout\";\n\nexport * from \"./buffer-layout\";\nexport { blob };\n\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  /** @override */\n  decode(b: Buffer, offset = 0) {\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  /** @override */\n  encode(src: BN, b: Buffer, offset = 0) {\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\n  }\n}\n\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\n  _lower: any;\n  _upper: any;\n  // TODO: unknown\n  constructor(property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(8, property);\n    this._lower = bits(_u32(), false);\n    this._upper = bits(_u32(), false);\n  }\n\n  addBoolean(property: string) {\n    if (this._lower.fields.length < 32) {\n      this._lower.addBoolean(property);\n    } else {\n      this._upper.addBoolean(property);\n    }\n  }\n\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\n    const lowerDecoded = this._lower.decode(b, offset);\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n    return { ...lowerDecoded, ...upperDecoded };\n  }\n\n  encode(src: any /* TEMP */, b: Buffer, offset = 0) {\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\n  }\n}\n\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(1, property);\n}\n\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\n  return new UInt(4, property);\n}\n\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, false, property);\n}\n\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, false, property);\n}\n\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(8, true, property);\n}\n\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\n  return new BNLayout(16, true, property);\n}\n\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: P) {\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = _u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error(\"Invalid option \" + this.property);\n  }\n}\n\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\n  return new OptionLayout<T, P>(layout, property);\n}\n\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\n}\n\nexport function decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error(\"Invalid bool: \" + value);\n}\n\nexport function encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\n  ]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\n\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }) {\n    if (!receivedTag.eq(tag)) {\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\n    }\n    return data;\n  }\n\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\n}\n\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\n  const length = _u32(\"length\");\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ data }) => data,\n    (data) => ({ data }),\n    property,\n  );\n}\n\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\n  return new WrappedLayout(\n    vecU8(),\n    (data) => data.toString(\"utf-8\"),\n    (s) => Buffer.from(s, \"utf-8\"),\n    property,\n  );\n}\n\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\n  registry: Record<string, Layout<any>>;\n}\n\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\n  const unionLayout = _union(_u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\n}\n\nexport function array<T, P extends string = \"\">(\n  elementLayout: Layout<T>,\n  length: number,\n  property?: P,\n): Layout<T[], P> {\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n\nexport class Structure<T, P, D extends { [key: string]: any } = any> extends _Structure<T, P, D> {\n  /** @override */\n  decode(b: Buffer, offset?: number) {\n    return super.decode(b, offset);\n  }\n}\n\nexport function struct<T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n): T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any {\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\n  return new Structure(fields, property, decodePrefixes);\n}\n\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\n  ? S\n  : any;\nexport type GetStructureFromLayoutSchema<S extends { [key: string]: any } = any> = Structure<any, any, S>;\n\nexport class Union<Schema extends { [key: string]: any } = any> extends _Union<Schema> {\n  encodeInstruction(instruction: any): Buffer {\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\n    const b = Buffer.alloc(instructionMaxSpan);\n    return b.slice(0, this.encode(instruction, b));\n  }\n\n  decodeInstruction(instruction: any) {\n    return this.decode(instruction);\n  }\n}\nexport function union<UnionSchema extends { [key: string]: any } = any>(\n  discr: any,\n  defaultLayout?: any,\n  property?: string,\n): Union<UnionSchema> {\n  return new Union(discr, defaultLayout, property);\n}\n\nclass Zeros extends Blob {\n  decode(b: Buffer, offset: number) {\n    const slice = super.decode(b, offset);\n    if (!slice.every((v) => v === 0)) {\n      throw new Error(\"nonzero padding bytes\");\n    }\n    return slice;\n  }\n}\n\nexport function zeros(length: number) {\n  return new Zeros(length);\n}\n\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\n  elementLayout: Layout<T, P>,\n  count: number | BN | Layout<BN | number, P>,\n  property?: AnotherP,\n): Layout<T[], AnotherP> {\n  let parsedCount: number;\n  const superCount =\n    typeof count === \"number\"\n      ? count\n      : isBN(count)\n      ? count.toNumber()\n      : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\n          get(target, property) {\n            if (!parsedCount) {\n              // get count in targetLayout. note that count may be BN\n              const countProperty = Reflect.get(target, \"count\");\n\n              // let targetLayout's  property:count be a number\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\n\n              // record the count\n              Reflect.set(target, \"count\", parsedCount);\n            }\n            return Reflect.get(target, property);\n          },\n          set(target, property, value) {\n            if (property === \"count\") {\n              parsedCount = value;\n            }\n            return Reflect.set(target, property, value);\n          },\n        });\n\n  // @ts-expect-error force type\n  return _seq(elementLayout, superCount, property);\n}\n","import {\n  bits as _bits, BitStructure as _BitStructure, blob as _blob, Blob as _Blob, cstr as _cstr, f32 as _f32,\n  f32be as _f32be, f64 as _f64, f64be as _f64be, greedy as _greedy, Layout as _Layout, ns64 as _ns64, ns64be as _ns64be,\n  nu64 as _nu64, nu64be as _nu64be, offset as _offset, s16 as _s16, s16be as _s16be, s24 as _s24, s24be as _s24be,\n  s32 as _s32, s32be as _s32be, s40 as _s40, s40be as _s40be, s48 as _s48, s48be as _s48be, s8 as _s8, seq as _seq,\n  struct as _struct, Structure as _Structure, u16 as _u16, u16be as _u16be, u24 as _u24, u24be as _u24be, u32 as _u32,\n  u32be as _u32be, u40 as _u40, u40be as _u40be, u48 as _u48, u48be as _u48be, u8 as _u8, UInt as _UInt,\n  union as _union, Union as _Union, unionLayoutDiscriminator as _unionLayoutDiscriminator, utf8 as _utf8,\n} from \"@solana/buffer-layout\";\n\n//#region ------------------- Layout -------------------\nexport interface Layout<T = any, P = \"\"> {\n  span: number;\n  property?: P;\n  decode(b: Buffer, offset?: number): T;\n  encode(src: T, b: Buffer, offset?: number): number;\n  getSpan(b: Buffer, offset?: number): number;\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\n}\nexport interface LayoutConstructor {\n  new <T, P>(): Layout<T, P>; // for class extends syntex\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\n  readonly prototype: Layout;\n}\nexport const Layout = _Layout as unknown as LayoutConstructor;\n//#endregion\n\n//#region ------------------- Structure -------------------\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\n  extends Layout<DecodeSchema, P> {\n  span: number;\n  decode(b: Buffer, offset?: number): DecodeSchema;\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\n  offsetOf<AP extends string>(property: AP): number;\n}\ninterface StructureConstructor {\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\n    fields: T,\n    property?: P,\n    decodePrefixes?: boolean,\n  ): Structure<T, P, DecodeSchema>;\n}\nexport const Structure = _Structure as unknown as StructureConstructor;\n//#endregion\n\n//#region ------------------- Union -------------------\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\n  registry: object;\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\n  addVariant(\n    variant: number,\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\n    property?: string,\n  ): any /* TEMP: code in Layout.js 1809 */;\n}\ninterface UnionConstructor {\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\n  new <UnionSchema extends { [key: string]: any } = any>(\n    discr: Layout<any, any>,\n    defaultLayout: Layout<any, any>,\n    property?: string,\n  ): Union<UnionSchema>;\n}\nexport const Union = _Union as unknown as UnionConstructor;\n//#endregion\n\n//#region ------------------- BitStructure -------------------\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\ninterface BitStructureConstructor {\n  new (...params: any[]): BitStructure;\n}\nexport const BitStructure = _BitStructure as BitStructureConstructor;\n//#endregion\n\n//#region ------------------- UInt -------------------\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\ninterface UIntConstructor {\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\n}\nexport const UInt = _UInt as UIntConstructor;\n//#endregion\n\n//#region ------------------- Blob -------------------\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\ninterface BlobConstructor {\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\n}\nexport const Blob = _Blob as unknown as BlobConstructor;\n//#endregion\n\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\nexport const struct = _struct as <T, P extends string = \"\">(\n  fields: T,\n  property?: P,\n  decodePrefixes?: boolean,\n) => T extends Layout<infer Value, infer Property>[]\n  ? Structure<\n      Value,\n      P,\n      {\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\n          ? V\n          : any;\n      }\n    >\n  : any;\n\nexport const seq = _seq as unknown as <T, P>(\n  elementLayout: Layout<T, string>,\n  count: number | Layout<number, string>,\n  property?: P,\n) => Layout<T[]>;\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\n  discr: Layout<any, any>,\n  defaultLayout?: any,\n  property?: string,\n) => Union<UnionSchema>;\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\n  layout: Layout<any, P>,\n  property?: P,\n) => any;\nexport const blob = _blob as unknown as <P extends string = \"\">(length: number | Layout<number, P>, property?: P) => Blob<P>;\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\n  word: Layout<T>,\n  msb?: boolean,\n  property?: P,\n) => BitStructure<T, P>; // TODO: not quite sure\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\n  layout: Layout<T, P>,\n  offset?: number,\n  property?: P,\n) => Layout<T, P>;\n\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { getPdaTickArrayAddress } from \"./pda\";\n\nexport const TICK_ARRAY_SIZE = 60\nexport const TICK_ARRAY_BITMAP_SIZE = 1024\n\nexport type Tick = {\n  tick: number;\n  liquidityNet: BN;\n  liquidityGross: BN;\n  feeGrowthOutsideX64A: BN;\n  feeGrowthOutsideX64B: BN;\n  rewardGrowthsOutsideX64: BN[];\n}\n\nexport type TickArray = {\n  address: PublicKey\n  poolId: PublicKey;\n  startTickIndex: number\n  ticks: Tick[]\n  initializedTickCount: number;\n}\n\nexport type TickState = {\n  tick: number\n  liquidityNet: BN\n  liquidityGross: BN\n  feeGrowthOutsideX64A: BN\n  feeGrowthOutsideX64B: BN\n  tickCumulativeOutside: BN\n  secondsPerLiquidityOutsideX64: BN\n  secondsOutside: number\n  rewardGrowthsOutside: BN[]\n}\n\nexport type TickArrayState = {\n  ammPool: PublicKey\n  startTickIndex: number\n  ticks: TickState[]\n  initializedTickCount: number\n}\n\nexport class TickUtils {\n  public static getTickArrayAddressByTick(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickIndex: number,\n    tickSpacing: number\n  ) {\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(\n      tickIndex,\n      tickSpacing\n    )\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n      programId,\n      poolId,\n      startIndex\n    )\n    return tickArrayAddress\n  }\n\n  public static getTickOffsetInArray(\n    tickIndex: number,\n    tickSpacing: number\n  ) {\n    if (tickIndex % tickSpacing != 0) {\n      throw new Error('tickIndex % tickSpacing not equal 0')\n    }\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(\n      tickIndex,\n      tickSpacing\n    )\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing)\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\n      throw new Error('tick offset in array overflow')\n    }\n    return offsetInArray\n  }\n\n  public static getTickArrayStartIndexByTick(\n    tickIndex: number,\n    tickSpacing: number\n  ) {\n    let startIndex: number = tickIndex / (TICK_ARRAY_SIZE * tickSpacing)\n    if (tickIndex < 0 && tickIndex % (TICK_ARRAY_SIZE * tickSpacing) != 0) {\n      startIndex = Math.ceil(startIndex) - 1\n    } else {\n      startIndex = Math.floor(startIndex)\n    }\n    return startIndex * (tickSpacing * TICK_ARRAY_SIZE)\n  }\n\n  public static getTickArrayOffsetInBitmapByTick(\n    tick: number,\n    tickSpacing: number\n  ) {\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE\n    const compressed = Math.floor(tick / multiplier) + 512\n    return Math.abs(compressed)\n  }\n\n  public static checkTickArrayIsInitialized(\n    bitmap: BN,\n    tick: number,\n    tickSpacing: number\n  ) {\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE\n    const compressed = Math.floor(tick / multiplier) + 512\n    const bit_pos = Math.abs(compressed)\n    return {\n      isInitialized: bitmap.testn(bit_pos),\n      startIndex: (bit_pos - 512) * multiplier\n    }\n  }\n\n  public static getNextTickArrayStartIndex(\n    lastTickArrayStartIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean\n  ) {\n    return zeroForOne ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE\n  }\n\n  public static mergeTickArrayBitmap(bns: BN[]) {\n    return bns[0]\n      .add(bns[1].shln(64))\n      .add(bns[2].shln(128))\n      .add(bns[3].shln(192))\n      .add(bns[4].shln(256))\n      .add(bns[5].shln(320))\n      .add(bns[6].shln(384))\n      .add(bns[7].shln(448))\n      .add(bns[8].shln(512))\n      .add(bns[9].shln(576))\n      .add(bns[10].shln(640))\n      .add(bns[11].shln(704))\n      .add(bns[12].shln(768))\n      .add(bns[13].shln(832))\n      .add(bns[14].shln(896))\n      .add(bns[15].shln(960))\n  }\n\n  public static getInitializedTickArrayInRange(\n    tickArrayBitmap: BN,\n    tickSpacing: number,\n    tickArrayStartIndex: number,\n    expectedCount: number\n  ) {\n    if (tickArrayStartIndex % (tickSpacing * TICK_ARRAY_SIZE) != 0) {\n      throw new Error('Invild tickArrayStartIndex')\n    }\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE)) + 512\n    return [\n      // find right of currenct offset\n      ...TickUtils.searchLowBitFromStart(\n        tickArrayBitmap,\n        tickArrayOffset - 1,\n        0,\n        expectedCount,\n        tickSpacing\n      ),\n\n      // find left of current offset\n      ...TickUtils.searchHightBitFromStart(\n        tickArrayBitmap,\n        tickArrayOffset,\n        TICK_ARRAY_BITMAP_SIZE,\n        expectedCount,\n        tickSpacing\n      )\n    ]\n  }\n\n  public static getAllInitializedTickArrayStartIndex(\n    tickArrayBitmap: BN,\n    tickSpacing: number\n  ) {\n    // find from offset 0 to 1024\n    return TickUtils.searchHightBitFromStart(\n      tickArrayBitmap,\n      0,\n      TICK_ARRAY_BITMAP_SIZE,\n      TICK_ARRAY_BITMAP_SIZE,\n      tickSpacing\n    )\n  }\n\n  public static getAllInitializedTickArrayInfo(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayBitmap: BN,\n    tickSpacing: number\n  ) {\n    const result: {\n      tickArrayStartIndex: number\n      tickArrayAddress: PublicKey\n    }[] = []\n    const allInitializedTickArrayIndex: number[] =\n      TickUtils.getAllInitializedTickArrayStartIndex(\n        tickArrayBitmap,\n        tickSpacing\n      )\n    for (const startIndex of allInitializedTickArrayIndex) {\n      const { publicKey: address } = getPdaTickArrayAddress(\n        programId,\n        poolId,\n        startIndex\n      )\n      result.push({\n        tickArrayStartIndex: startIndex,\n        tickArrayAddress: address,\n      })\n    }\n    return result\n  }\n\n  public static getAllInitializedTickInTickArray(\n    tickArray: TickArrayState,\n  ) {\n    return tickArray.ticks.filter(i => i.liquidityGross.gtn(0))\n  }\n\n  public static searchLowBitFromStart(\n    tickArrayBitmap: BN,\n    start: number,\n    end: number,\n    expectedCount: number,\n    tickSpacing: number\n  ) {\n    let fetchNum = 0\n    const result: number[] = []\n    for (let i = start; i >= end; i--) {\n      if (tickArrayBitmap.shrn(i).and(new BN(1)).eqn(1)) {\n        const nextStartIndex = (i - 512) * (tickSpacing * TICK_ARRAY_SIZE)\n        result.push(nextStartIndex)\n        fetchNum++\n      }\n      if (fetchNum >= expectedCount) {\n        break\n      }\n    }\n    return result\n  }\n\n  public static searchHightBitFromStart(\n    tickArrayBitmap: BN,\n    start: number,\n    end: number,\n    expectedCount: number,\n    tickSpacing: number\n  ) {\n    let fetchNum = 0\n    const result: number[] = []\n    for (let i = start; i < end; i++) {\n      if (tickArrayBitmap.shrn(i).and(new BN(1)).eqn(1)) {\n        const nextStartIndex = (i - 512) * (tickSpacing * TICK_ARRAY_SIZE)\n        result.push(nextStartIndex)\n        fetchNum++\n      }\n      if (fetchNum >= expectedCount) {\n        break\n      }\n    }\n    return result\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { findProgramAddress, METADATA_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"../../common\";\n\nimport { i32ToBytes, u16ToBytes } from \"./util\";\n\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\n\nexport function getPdaAmmConfigId(programId: PublicKey, index: number) {\n  return findProgramAddress(\n    [AMM_CONFIG_SEED, u16ToBytes(index)],\n    programId\n  )\n}\n\nexport function getPdaPoolId(\n  programId: PublicKey,\n  ammConfigId: PublicKey,\n  mintA: PublicKey,\n  mintB: PublicKey\n) {\n  return findProgramAddress(\n    [POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer()],\n    programId\n  );\n}\n\nexport function getPdaPoolVaultId(\n  programId: PublicKey,\n  poolId: PublicKey,\n  vaultMint: PublicKey\n) {\n  return findProgramAddress(\n    [POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()],\n    programId\n  );\n}\n\nexport function getPdaPoolRewardVaulId(\n  programId: PublicKey,\n  poolId: PublicKey,\n  rewardMint: PublicKey\n) {\n  return findProgramAddress(\n    [POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()],\n    programId\n  );\n}\n\nexport function getPdaTickArrayAddress(\n  programId: PublicKey,\n  poolId: PublicKey,\n  startIndex: number\n) {\n  return findProgramAddress(\n    [TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)],\n    programId\n  );\n}\n\nexport function getPdaProtocolPositionAddress(\n  programId: PublicKey,\n  poolId: PublicKey,\n  tickLower: number,\n  tickUpper: number\n) {\n  return findProgramAddress(\n    [\n      POSITION_SEED,\n      poolId.toBuffer(),\n      i32ToBytes(tickLower),\n      i32ToBytes(tickUpper),\n    ],\n    programId\n  );\n}\n\nexport function getPdaPersonalPositionAddress(\n  programId: PublicKey,\n  nftMint: PublicKey\n) {\n  return findProgramAddress(\n    [POSITION_SEED, nftMint.toBuffer()],\n    programId\n  );\n}\n\nexport function getATAAddress(owner: PublicKey, mint: PublicKey) {\n  return findProgramAddress(\n    [owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\")\n  );\n}\n\nexport function getPdaMetadataKey(mint: PublicKey) {\n  return findProgramAddress(\n    [\n      Buffer.from('metadata', 'utf8'),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mint.toBuffer(),\n    ],\n    METADATA_PROGRAM_ID\n  )\n}\n\nexport function getPdaOperationAccount(\n  programId: PublicKey,\n) {\n  return findProgramAddress(\n    [OPERATION_SEED],\n    programId\n  );\n}","import { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { Currency, CurrencyAmount, Fraction, Percent, Price, TokenAmount } from \"../entity\";\n\nimport { validateAndParsePublicKey } from \"./pubkey\";\n\ntype Primitive = boolean | number | string | null | undefined | PublicKey;\n\n/**\n *\n * @example\n * ```typescript\n * interface A {\n *   keyA: string;\n *   keyB: string;\n *   map: {\n *     hello: string;\n *     i: number;\n *   };\n *   list: (string | number)[];\n *   keyC: number;\n * }\n *\n * type WrappedA = ReplaceType<A, string, boolean> // {\n *   keyA: boolean;\n *   keyB: boolean;\n *   map: {\n *     hello: boolean;\n *     i: number;\n *   };\n *   list: (number | boolean)[];\n *   keyC: number;\n * }\n * ```\n */\nexport type ReplaceType<Old, From, To> = {\n  [T in keyof Old]: Old[T] extends From // to avoid case: Old[T] is an Object,\n    ? Exclude<Old[T], From> | To // when match,  directly replace\n    : Old[T] extends Primitive // judge whether need recursively replace\n    ? From extends Old[T] // it's an Object\n      ? Exclude<Old[T], From> | To // directly replace\n      : Old[T] // stay same\n    : ReplaceType<Old[T], From, To>; // recursively replace\n};\n\nconst baseInnerObjects = [TokenAmount, PublicKey, Fraction, BN, Currency, CurrencyAmount, Price, Percent];\n\nfunction notInnerObject(v: unknown): v is Record<string, any> {\n  return typeof v === \"object\" && v !== null && !baseInnerObjects.some((o) => typeof o === \"object\" && v instanceof o);\n}\n\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\n  // @ts-expect-error no need type for inner code\n  return typeof jsonInfo === \"string\"\n    ? validateAndParsePublicKey(jsonInfo)\n    : Array.isArray(jsonInfo)\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\n    : notInnerObject(jsonInfo)\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\n    : jsonInfo;\n}\n\nexport function poolKeys2JsonInfo<T>(jsonInfo: T): ReplaceType<T, PublicKey, string> {\n  // @ts-expect-error no need type for inner code\n  return jsonInfo instanceof PublicKey\n    ? jsonInfo.toBase58()\n    : Array.isArray(jsonInfo)\n    ? jsonInfo.map((k) => poolKeys2JsonInfo(k))\n    : notInnerObject(jsonInfo)\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, poolKeys2JsonInfo(v)]))\n    : jsonInfo;\n}\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\n\nimport { Logger } from \"../common\";\n\nimport { BigNumberish, parseBigNumberish } from \"./bignumber\";\nimport { Rounding, TEN } from \"./constant\";\nimport { Currency, currencyEquals, Token } from \"./currency\";\nimport { Fraction } from \"./fraction\";\nimport toFormat, { WrappedBig } from \"./to-format\";\n\nconst logger = Logger.from(\"entity/amount\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nexport function splitNumber(num: string, decimals: number) {\n  let integral = \"0\";\n  let fractional = \"0\";\n\n  if (num.includes(\".\")) {\n    const splited = num.split(\".\");\n    if (splited.length === 2) {\n      [integral, fractional] = splited;\n      fractional = fractional.padEnd(decimals, \"0\");\n    } else {\n      return logger.throwArgumentError(\"invalid number string\", \"num\", num);\n    }\n  } else {\n    integral = num;\n  }\n\n  // fix decimals is 0\n  return [integral, fractional.slice(0, decimals) || fractional];\n}\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency;\n\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true) {\n    let parsedAmount = new BN(0);\n    const multiplier = TEN.pow(new BN(currency.decimals));\n\n    if (isRaw) {\n      parsedAmount = parseBigNumberish(amount);\n    } else {\n      let integralAmount = new BN(0);\n      let fractionalAmount = new BN(0);\n\n      // parse fractional string\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\n\n        integralAmount = parseBigNumberish(integral);\n        fractionalAmount = parseBigNumberish(fractional);\n      }\n      // else {\n      //   integralAmount = parseBigNumberish(amount);\n      // }\n\n      integralAmount = integralAmount.mul(multiplier);\n      parsedAmount = integralAmount.add(fractionalAmount);\n    }\n\n    super(parsedAmount, multiplier);\n    this.currency = currency;\n  }\n\n  public get raw() {\n    return this.numerator;\n  }\n\n  public isZero() {\n    return this.raw.isZero();\n  }\n\n  /**\n   * a greater than b\n   */\n  public gt(other: CurrencyAmount) {\n    logger.assert(currencyEquals(this.currency, other.currency), \"gt currency not equals\");\n\n    return this.raw.gt(other.raw);\n  }\n\n  /**\n   * a less than b\n   */\n  public lt(other: CurrencyAmount) {\n    logger.assert(currencyEquals(this.currency, other.currency), \"lt currency not equals\");\n\n    return this.raw.lt(other.raw);\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    logger.assert(currencyEquals(this.currency, other.currency), \"add currency not equals\");\n\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\n  }\n\n  public sub(other: CurrencyAmount): CurrencyAmount {\n    logger.assert(currencyEquals(this.currency, other.currency), \"sub currency not equals\");\n\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\n  }\n\n  public toSignificant(\n    significantDigits = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  /**\n   * To fixed\n   *\n   * @example\n   * ```\n   * 1 -> 1.000000000\n   * 1.234 -> 1.234000000\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toFixed(\n    decimalPlaces = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    logger.assert(decimalPlaces <= this.currency.decimals, \"decimals overflow\");\n\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  /**\n   * To exact\n   *\n   * @example\n   * ```\n   * 1 -> 1\n   * 1.234 -> 1.234\n   * 1.123456789876543 -> 1.123456789\n   * ```\n   */\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.currency.decimals;\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  }\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token;\n\n  public constructor(token: Token, amount: BigNumberish, isRaw = true) {\n    super(token, amount, isRaw);\n    this.token = token;\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    logger.assert(currencyEquals(this.token, other.token), \"add token not equals\");\n\n    return new TokenAmount(this.token, this.raw.add(other.raw));\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    logger.assert(currencyEquals(this.token, other.token), \"sub token not equals\");\n\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\n  }\n}\n","import BN from \"bn.js\";\n\nimport { Logger } from \"../common\";\n\nimport { TEN } from \"./constant\";\n\nconst logger = Logger.from(\"entity/bignumber\");\n\nexport type BigNumberish = BN | string | number | bigint;\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\nexport function parseBigNumberish(value: BigNumberish) {\n  // BN\n  if (value instanceof BN) {\n    return value;\n  }\n\n  // string\n  if (typeof value === \"string\") {\n    if (value.match(/^-?[0-9]+$/)) {\n      return new BN(value);\n    }\n\n    return logger.throwArgumentError(\"invalid BigNumberish string\", \"value\", value);\n  }\n\n  // number\n  if (typeof value === \"number\") {\n    if (value % 1) {\n      return logger.throwArgumentError(\"BigNumberish number underflow\", \"value\", value);\n    }\n\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n      return logger.throwArgumentError(\"BigNumberish number overflow\", \"value\", value);\n    }\n\n    return new BN(String(value));\n  }\n\n  // bigint\n  if (typeof value === \"bigint\") {\n    return new BN(value.toString());\n  }\n\n  return logger.throwArgumentError(\"invalid BigNumberish value\", \"value\", value);\n}\n\nexport function tenExponentiate(shift: BigNumberish) {\n  return TEN.pow(parseBigNumberish(shift));\n}\n\n// round up\nexport function divCeil(a: BN, b: BN): BN {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const dm = a.divmod(b);\n\n  // Fast case - exact division\n  if (dm.mod.isZero()) return dm.div;\n\n  // Round up\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\n}\n","import BN from \"bn.js\";\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const ZERO = new BN(0);\nexport const ONE = new BN(1);\nexport const TWO = new BN(2);\nexport const THREE = new BN(3);\nexport const FIVE = new BN(5);\nexport const TEN = new BN(10);\nexport const _100 = new BN(100);\nexport const _1000 = new BN(1000);\nexport const _10000 = new BN(10000);\n","import { NativeTokenInfo, SplTokenInfo } from \"./type\";\n\nexport const SOL: NativeTokenInfo = {\n  symbol: \"SOL\",\n  name: \"Solana\",\n  decimals: 9,\n};\n\nexport const WSOL: SplTokenInfo = {\n  symbol: \"WSOL\",\n  name: \"Wrapped SOL\",\n  mint: \"So11111111111111111111111111111111111111112\",\n  decimals: 9,\n  extensions: {\n    coingeckoId: \"solana\",\n  },\n};\n","import { WSOL } from \"./sol\";\nimport { LpTokens, SplTokens } from \"./type\";\n\nexport const MAINNET_SPL_TOKENS: SplTokens = {\n  WSOL: {\n    ...WSOL,\n  },\n  BTC: {\n    symbol: \"BTC\",\n    name: \"Bitcoin\",\n    mint: \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"bitcoin\",\n    },\n  },\n  ETH: {\n    symbol: \"ETH\",\n    name: \"Ethereum\",\n    mint: \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"ethereum\",\n    },\n  },\n  USDT: {\n    symbol: \"USDT\",\n    name: \"Tether\",\n    mint: \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"tether\",\n    },\n  },\n  WUSDT: {\n    symbol: \"WUSDT\",\n    name: \"Wrapped USDT\",\n    mint: \"BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"tether\",\n    },\n  },\n  USDC: {\n    symbol: \"USDC\",\n    name: \"USD Coin\",\n    mint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"usd-coin\",\n    },\n  },\n  WUSDC: {\n    symbol: \"WUSDC\",\n    name: \"Wrapped USDC\",\n    mint: \"BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"usd-coin\",\n    },\n  },\n  YFI: {\n    symbol: \"YFI\",\n    name: \"YFI\",\n    mint: \"3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"yearn-finance\",\n    },\n  },\n  LINK: {\n    symbol: \"LINK\",\n    name: \"Chainlink\",\n    mint: \"CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"chainlink\",\n    },\n  },\n  XRP: {\n    symbol: \"XRP\",\n    name: \"XRP\",\n    mint: \"Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"ripple\",\n    },\n  },\n  SUSHI: {\n    symbol: \"SUSHI\",\n    name: \"SUSHI\",\n    mint: \"AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"sushi\",\n    },\n  },\n  ALEPH: {\n    symbol: \"ALEPH\",\n    name: \"ALEPH\",\n    mint: \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"aleph\",\n    },\n  },\n  SXP: {\n    symbol: \"SXP\",\n    name: \"SXP\",\n    mint: \"SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"swipe\",\n    },\n  },\n  HGET: {\n    symbol: \"HGET\",\n    name: \"HGET\",\n    mint: \"BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"hedget\",\n    },\n  },\n  CREAM: {\n    symbol: \"CREAM\",\n    name: \"CREAM\",\n    mint: \"5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"cream-2\",\n    },\n  },\n  UNI: {\n    symbol: \"UNI\",\n    name: \"UNI\",\n    mint: \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"uniswap\",\n    },\n  },\n  SRM: {\n    symbol: \"SRM\",\n    name: \"Serum\",\n    mint: \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"serum\",\n    },\n  },\n  FTT: {\n    symbol: \"FTT\",\n    name: \"FTX Token\",\n    mint: \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"ftx-token\",\n    },\n  },\n  MSRM: {\n    symbol: \"MSRM\",\n    name: \"MegaSerum\",\n    mint: \"MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L\",\n    decimals: 0,\n    extensions: {\n      coingeckoId: \"megaserum\",\n    },\n  },\n  TOMO: {\n    symbol: \"TOMO\",\n    name: \"TOMO\",\n    mint: \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"tomochain\",\n    },\n  },\n  KARMA: {\n    symbol: \"KARMA\",\n    name: \"KARMA\",\n    mint: \"EcqExpGNFBve2i1cMJUTR4bPXj4ZoqmDD2rTkeCcaTFX\",\n    decimals: 4,\n    extensions: {\n      coingeckoId: \"karma-dao\",\n    },\n  },\n  LUA: {\n    symbol: \"LUA\",\n    name: \"LUA\",\n    mint: \"EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"lua-token\",\n    },\n  },\n  MATH: {\n    symbol: \"MATH\",\n    name: \"MATH\",\n    mint: \"GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"math\",\n    },\n  },\n  KEEP: {\n    symbol: \"KEEP\",\n    name: \"KEEP\",\n    mint: \"GUohe4DJUA5FKPWo3joiPgsB7yzer7LpDmt1Vhzy3Zht\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"keep-network\",\n    },\n  },\n  SWAG: {\n    symbol: \"SWAG\",\n    name: \"SWAG\",\n    mint: \"9F9fNTT6qwjsu4X4yWYKZpsbw5qT7o6yR2i57JF2jagy\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"swag-finance\",\n    },\n  },\n  FIDA: {\n    symbol: \"FIDA\",\n    name: \"Bonfida\",\n    mint: \"EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"bonfida\",\n    },\n  },\n  KIN: {\n    symbol: \"KIN\",\n    name: \"Kin\",\n    mint: \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\",\n    decimals: 5,\n    extensions: {\n      coingeckoId: \"kin\",\n    },\n  },\n  MAPS: {\n    symbol: \"MAPS\",\n    name: \"MAPS\",\n    mint: \"MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"maps\",\n    },\n  },\n  OXY: {\n    symbol: \"OXY\",\n    name: \"Oxygen\",\n    mint: \"z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"oxygen\",\n    },\n  },\n  RAY: {\n    symbol: \"RAY\",\n    name: \"Raydium\",\n    mint: \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"raydium\",\n    },\n  },\n  xCOPE: {\n    symbol: \"xCOPE\",\n    name: \"xCOPE\",\n    mint: \"3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE\",\n    decimals: 0,\n    extensions: {\n      coingeckoId: \"cope\",\n    },\n  },\n  COPE: {\n    symbol: \"COPE\",\n    name: \"Cope\",\n    mint: \"8HGyAAB1yoM1ttS7pXjHMa3dukTFGQggnFFH3hJZgzQh\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"cope\",\n    },\n  },\n  STEP: {\n    symbol: \"STEP\",\n    name: \"Step Finance\",\n    mint: \"StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"step-finance\",\n    },\n  },\n  MEDIA: {\n    symbol: \"MEDIA\",\n    name: \"Media Network\",\n    mint: \"ETAtLmCmsoiEEKfNrHKJ2kYy3MoABhU6NQvpSfij5tDs\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"media-network\",\n    },\n  },\n  ROPE: {\n    symbol: \"ROPE\",\n    name: \"Rope Token\",\n    mint: \"8PMHT4swUMtBzgHnh5U564N5sjPSiUz2cjEQzFnnP1Fo\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"rope-token\",\n    },\n  },\n  MER: {\n    symbol: \"MER\",\n    name: \"Mercurial\",\n    mint: \"MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"mercurial\",\n    },\n  },\n  TULIP: {\n    symbol: \"TULIP\",\n    name: \"Tulip Protocol\",\n    mint: \"TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"solfarm\",\n    },\n  },\n  SNY: {\n    symbol: \"SNY\",\n    name: \"SNY\",\n    mint: \"4dmKkXNHdgYsXqBHCuMikNQWwVomZURhYvkkX5c4pQ7y\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"synthetify-token\",\n    },\n  },\n  SLRS: {\n    symbol: \"SLRS\",\n    name: \"SLRS\",\n    mint: \"SLRSSpSLUTP7okbCUBYStWCo1vUgyt775faPqz8HUMr\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"solrise-finance\",\n    },\n  },\n  WOO: {\n    symbol: \"WOO\",\n    name: \"WOO Network\",\n    mint: \"E5rk3nmgLUuKUiS94gg4bpWwWwyjCMtddsAXkTFLtHEy\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"woo-network\",\n    },\n  },\n  BOP: {\n    symbol: \"BOP\",\n    name: \"Boring Protocol\",\n    mint: \"BLwTnYKqf7u4qjgZrrsKeNs2EzWkMLqVCu6j8iHyrNA3\",\n    decimals: 8,\n    extensions: {\n      coingeckoId: \"boring-protocol\",\n    },\n  },\n  SAMO: {\n    symbol: \"SAMO\",\n    name: \"Samoyedcoin\",\n    mint: \"7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"samoyedcoin\",\n    },\n  },\n  renBTC: {\n    symbol: \"renBTC\",\n    name: \"renBTC\",\n    mint: \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\",\n    decimals: 8,\n    extensions: {\n      coingeckoId: \"renbtc\",\n    },\n  },\n  renDOGE: {\n    symbol: \"renDOGE\",\n    name: \"renDOGE\",\n    mint: \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\",\n    decimals: 8,\n    extensions: {\n      coingeckoId: \"rendoge\",\n    },\n  },\n  LIKE: {\n    symbol: \"LIKE\",\n    name: \"Only1\",\n    mint: \"3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"only1\",\n    },\n  },\n  DXL: {\n    symbol: \"DXL\",\n    name: \"Dexlab\",\n    mint: \"GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"dexlab\",\n    },\n  },\n  mSOL: {\n    symbol: \"mSOL\",\n    name: \"Marinade staked SOL\",\n    mint: \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"msol\",\n    },\n  },\n  PAI: {\n    symbol: \"PAI\",\n    name: \"Parrot USD\",\n    mint: \"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"parrot-usd\",\n    },\n  },\n  PORT: {\n    symbol: \"PORT\",\n    name: \"Port Finance\",\n    mint: \"PoRTjZMPXb9T7dyU7tpLEZRQj7e6ssfAE62j2oQuc6y\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"port-finance\",\n    },\n  },\n  MNGO: {\n    symbol: \"MNGO\",\n    name: \"Mango\",\n    mint: \"MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"mango-markets\",\n    },\n  },\n  CRP: {\n    symbol: \"CRP\",\n    name: \"CropperFinance\",\n    mint: \"DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"cropperfinance\",\n    },\n  },\n  ATLAS: {\n    symbol: \"ATLAS\",\n    name: \"Star Atlas\",\n    mint: \"ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx\",\n    decimals: 8,\n    extensions: {\n      coingeckoId: \"star-atlas\",\n    },\n  },\n  POLIS: {\n    symbol: \"POLIS\",\n    name: \"Star Atlas DAO\",\n    mint: \"poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk\",\n    decimals: 8,\n    extensions: {\n      coingeckoId: \"star-atlas-dao\",\n    },\n  },\n  GRAPE: {\n    symbol: \"GRAPE\",\n    name: \"Grape Protocol\",\n    mint: \"8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"grape-2\",\n    },\n  },\n  GENE: {\n    symbol: \"GENE\",\n    name: \"Genopets\",\n    mint: \"GENEtH5amGSi8kHAtQoezp1XEXwZJ8vcuePYnXdKrMYz\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"genopets\",\n    },\n  },\n  DFL: {\n    symbol: \"DFL\",\n    name: \"DeFi Land\",\n    mint: \"DFL1zNkaGPWm1BqAVqRjCZvHmwTFrEaJtbzJWgseoNJh\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"defi-land\",\n    },\n  },\n  CHEEMS: {\n    symbol: \"CHEEMS\",\n    name: \"Cheems\",\n    mint: \"3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc\",\n    decimals: 4,\n    extensions: {\n      coingeckoId: \"cheems\",\n    },\n  },\n  stSOL: {\n    symbol: \"stSOL\",\n    name: \"Lido Staked SOL\",\n    mint: \"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"lido-staked-sol\",\n    },\n  },\n  LARIX: {\n    symbol: \"LARIX\",\n    name: \"Larix\",\n    mint: \"Lrxqnh6ZHKbGy3dcrCED43nsoLkM1LTzU2jRfWe8qUC\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"larix\",\n    },\n  },\n  RIN: {\n    symbol: \"RIN\",\n    name: \"Aldrin\",\n    mint: \"E5ndSkaB17Dm7CsD22dvcjfrYSDLCxFcMd6z8ddCk5wp\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"aldrin\",\n    },\n  },\n  APEX: {\n    symbol: \"APEX\",\n    name: \"ApeXit Finance\",\n    mint: \"51tMb3zBKDiQhNwGqpgwbavaGH54mk8fXFzxTc1xnasg\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"apexit-finance\",\n    },\n  },\n  MNDE: {\n    symbol: \"MNDE\",\n    name: \"Marinade\",\n    mint: \"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"marinade\",\n    },\n  },\n  LIQ: {\n    symbol: \"LIQ\",\n    name: \"LIQ Protocol\",\n    mint: \"4wjPQJ6PrkC4dHhYghwJzGBVP78DkBzA2U3kHoFNBuhj\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"liq-protocol\",\n    },\n  },\n  WAG: {\n    symbol: \"WAG\",\n    name: \"Waggle Network\",\n    mint: \"5tN42n9vMi6ubp67Uy4NnmM5DMZYN8aS8GeB3bEDHr6E\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"waggle-network\",\n    },\n  },\n  wLDO: {\n    symbol: \"wLDO\",\n    name: \"wLDO\",\n    mint: \"HZRCwxP2Vq9PCpPXooayhJ2bxTpo5xfpQrwB1svh332p\",\n    decimals: 8,\n    extensions: {},\n  },\n  SLIM: {\n    symbol: \"SLIM\",\n    name: \"Solanium\",\n    mint: \"xxxxa1sKNGwFtw2kFn8XauW9xq8hBZ5kVtcSesTT9fW\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"solanium\",\n    },\n  },\n  PRT: {\n    symbol: \"PRT\",\n    name: \"Parrot Protocol\",\n    mint: \"PRT88RkA4Kg5z7pKnezeNH4mafTvtQdfFgpQTGRjz44\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"parrot-protocol\",\n    },\n  },\n  SBR: {\n    symbol: \"SBR\",\n    name: \"SBR\",\n    mint: \"Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1\",\n    decimals: 6,\n    extensions: {},\n  },\n  FAB: {\n    symbol: \"FAB\",\n    name: \"Fabric\",\n    mint: \"EdAhkbj5nF9sRM7XN7ewuW8C9XEUMs8P7cnoQ57SYE96\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"fabric\",\n    },\n  },\n  ABR: {\n    symbol: \"ABR\",\n    name: \"Allbridge\",\n    mint: \"a11bdAAuV8iB2fu7X6AxAvDTo1QZ8FXB3kk5eecdasp\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"allbridge\",\n    },\n  },\n  IVN: {\n    symbol: \"IVN\",\n    name: \"Investin\",\n    mint: \"iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"investin\",\n    },\n  },\n  CYS: {\n    symbol: \"CYS\",\n    name: \"Cyclos\",\n    mint: \"BRLsMczKuaR5w9vSubF4j8HwEGGprVAyyVgS4EX7DKEg\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"cyclos\",\n    },\n  },\n  FRKT: {\n    symbol: \"FRKT\",\n    name: \"FRAKT Token\",\n    mint: \"ErGB9xa24Szxbk1M28u2Tx8rKPqzL6BroNkkzk5rG4zj\",\n    decimals: 8,\n    extensions: {\n      coingeckoId: \"frakt-token\",\n    },\n  },\n  AURY: {\n    symbol: \"AURY\",\n    name: \"Aurory\",\n    mint: \"AURYydfxJib1ZkTir1Jn1J9ECYUtjb6rKQVmtYaixWPP\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"aurory\",\n    },\n  },\n  SYP: {\n    symbol: \"SYP\",\n    name: \"Sypool\",\n    mint: \"FnKE9n6aGjQoNWRBZXy4RW6LZVao7qwBonUbiD7edUmZ\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"sypool\",\n    },\n  },\n  WOOF: {\n    symbol: \"WOOF\",\n    name: \"WOOF\",\n    mint: \"9nEqaUcb16sQ3Tn1psbkWqyhPdLmfHWjKGymREjsAgTE\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"woof-token\",\n    },\n  },\n  ORCA: {\n    symbol: \"ORCA\",\n    name: \"Orca\",\n    mint: \"orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"orca\",\n    },\n  },\n  SLND: {\n    symbol: \"SLND\",\n    name: \"Solend\",\n    mint: \"SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"solend\",\n    },\n  },\n  weWETH: {\n    symbol: \"weWETH\",\n    name: \"weWETH\",\n    mint: \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n    decimals: 8,\n    extensions: {},\n  },\n  weUNI: {\n    symbol: \"weUNI\",\n    name: \"weUNI\",\n    mint: \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n    decimals: 8,\n    extensions: {},\n  },\n  weSUSHI: {\n    symbol: \"weSUSHI\",\n    name: \"weSUSHI\",\n    mint: \"ChVzxWRmrTeSgwd3Ui3UumcN8KX7VK3WaD4KGeSKpypj\",\n    decimals: 8,\n    extensions: {},\n  },\n  GOFX: {\n    symbol: \"GOFX\",\n    name: \"GooseFX\",\n    mint: \"GFX1ZjR2P15tmrSwow6FjyDYcEkoFb4p4gJCpLBjaxHD\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"goosefx\",\n    },\n  },\n  IN: {\n    symbol: \"IN\",\n    name: \"Invictus\",\n    mint: \"inL8PMVd6iiW3RCBJnr5AsrRN6nqr4BTrcNuQWQSkvY\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"invictus\",\n    },\n  },\n  weDYDX: {\n    symbol: \"weDYDX\",\n    name: \"weDYDX\",\n    mint: \"4Hx6Bj56eGyw8EJrrheM6LBQAvVYRikYCWsALeTrwyRU\",\n    decimals: 8,\n    extensions: {},\n  },\n  STARS: {\n    symbol: \"STARS\",\n    name: \"StarLaunch\",\n    mint: \"HCgybxq5Upy8Mccihrp7EsmwwFqYZtrHrsmsKwtGXLgW\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"starlaunch\",\n    },\n  },\n  weAXS: {\n    symbol: \"weAXS\",\n    name: \"weAXS\",\n    mint: \"HysWcbHiYY9888pHbaqhwLYZQeZrcQMXKQWRqS7zcPK5\",\n    decimals: 8,\n    extensions: {},\n  },\n  weSHIB: {\n    symbol: \"weSHIB\",\n    name: \"weSHIB\",\n    mint: \"CiKu4eHsVrc1eueVQeHn7qhXTcVu95gSQmBpX4utjL9z\",\n    decimals: 8,\n    extensions: {},\n  },\n  OXS: {\n    symbol: \"OXS\",\n    name: \"Oxbull Solana\",\n    mint: \"4TGxgCSJQx2GQk9oHZ8dC5m3JNXTYZHjXumKAW3vLnNx\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"oxbull-solana\",\n    },\n  },\n  CWAR: {\n    symbol: \"CWAR\",\n    name: \"Cryowar\",\n    mint: \"HfYFjMKNZygfMC8LsQ8LtpPsPxEJoXJx4M6tqi75Hajo\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"cryowar-token\",\n    },\n  },\n  UPS: {\n    symbol: \"UPS\",\n    name: \"UPFI Network\",\n    mint: \"EwJN2GqUGXXzYmoAciwuABtorHczTA5LqbukKXV1viH7\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"upfi-network\",\n    },\n  },\n  weSAND: {\n    symbol: \"weSAND\",\n    name: \"weSAND\",\n    mint: \"49c7WuCZkQgc3M4qH8WuEUNXfgwupZf1xqWkDQ7gjRGt\",\n    decimals: 8,\n    extensions: {},\n  },\n  weMANA: {\n    symbol: \"weMANA\",\n    name: \"weMANA\",\n    mint: \"7dgHoN8wBZCc5wbnQ2C47TDnBMAxG4Q5L3KjP67z8kNi\",\n    decimals: 8,\n    extensions: {},\n  },\n  CAVE: {\n    symbol: \"CAVE\",\n    name: \"Crypto Cavemen\",\n    mint: \"4SZjjNABoqhbd4hnapbvoEPEqT8mnNkfbEoAwALf1V8t\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"cave\",\n    },\n  },\n  JSOL: {\n    symbol: \"JSOL\",\n    name: \"JPool\",\n    mint: \"7Q2afV64in6N6SeZsAAB81TJzwDoD6zpqmHkzi9Dcavn\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"jpool\",\n    },\n  },\n  APT: {\n    symbol: \"APT\",\n    name: \"Apricot\",\n    mint: \"APTtJyaRX5yGTsJU522N4VYWg3vCvSb65eam5GrPT5Rt\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"apricot\",\n    },\n  },\n  SONAR: {\n    symbol: \"SONAR\",\n    name: \"SonarWatch\",\n    mint: \"sonarX4VtVkQemriJeLm6CKeW3GDMyiBnnAEMw1MRAE\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"sonarwatch\",\n    },\n  },\n  SHILL: {\n    symbol: \"SHILL\",\n    name: \"SHILL Token\",\n    mint: \"6cVgJUqo4nmvQpbgrDZwyfd6RwWw5bfnCamS3M9N1fd\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"shill-token\",\n    },\n  },\n  TTT: {\n    symbol: \"TTT\",\n    name: \"TabTrader\",\n    mint: \"FNFKRV3V8DtA3gVJN6UshMiLGYA8izxFwkNWmJbFjmRj\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"tabtrader\",\n    },\n  },\n  BOKU: {\n    symbol: \"BOKU\",\n    name: \"Boryoku Dragonz\",\n    mint: \"CN7qFa5iYkHz99PTctvT4xXUHnxwjQ5MHxCuTJtPN5uS\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"boku\",\n    },\n  },\n  MIMO: {\n    symbol: \"MIMO\",\n    name: \"Million Monke\",\n    mint: \"9TE7ebz1dsFo1uQ2T4oYAKSm39Y6fWuHrd6Uk6XaiD16\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"million-monke\",\n    },\n  },\n  wbWBNB: {\n    symbol: \"wbWBNB\",\n    name: \"wbWBNB\",\n    mint: \"9gP2kCy3wA1ctvYWQk75guqXuHfrEomqydHLtcTCqiLa\",\n    decimals: 8,\n    extensions: {},\n  },\n  wePEOPLE: {\n    symbol: \"wePEOPLE\",\n    name: \"wePEOPLE\",\n    mint: \"CobcsUrt3p91FwvULYKorQejgsm5HoQdv5T8RUZ6PnLA\",\n    decimals: 8,\n    extensions: {},\n  },\n  XTAG: {\n    symbol: \"XTAG\",\n    name: \"xHashtag\",\n    mint: \"5gs8nf4wojB5EXgDUWNLwXpknzgV2YWDhveAeBZpVLbp\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"xhashtag\",\n    },\n  },\n  KKO: {\n    symbol: \"KKO\",\n    name: \"Kineko\",\n    mint: \"kiNeKo77w1WBEzFFCXrTDRWGRWGP8yHvKC9rX6dqjQh\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"kineko\",\n    },\n  },\n  VI: {\n    symbol: \"VI\",\n    name: \"Vybit\",\n    mint: \"7zBWymxbZt7PVHQzfi3i85frc1YRiQc23K7bh3gos8ZC\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"vybit\",\n    },\n  },\n  SOLC: {\n    symbol: \"SOLC\",\n    name: \"Solcubator\",\n    mint: \"Bx1fDtvTN6NvE4kjdPHQXtmGSg582bZx9fGy4DQNMmAT\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"solcubator\",\n    },\n  },\n  STR: {\n    symbol: \"STR\",\n    name: \"Solster\",\n    mint: \"9zoqdwEBKWEi9G5Ze8BSkdmppxGgVv1Kw4LuigDiNr9m\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"solster\",\n    },\n  },\n  SPWN: {\n    symbol: \"SPWN\",\n    name: \"Bitspawn\",\n    mint: \"5U9QqCPhqXAJcEv9uyzFJd5zhN93vuPk1aNNkXnUfPnt\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"bitspawn\",\n    },\n  },\n  ISOLA: {\n    symbol: \"ISOLA\",\n    name: \"Intersola\",\n    mint: \"333iHoRM2Awhf9uVZtSyTfU8AekdGrgQePZsKMFPgKmS\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"intersola\",\n    },\n  },\n  RUN: {\n    symbol: \"RUN\",\n    name: \"Run\",\n    mint: \"6F9XriABHfWhit6zmMUYAQBSy6XK5VF1cHXuW5LDpRtC\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"run\",\n    },\n  },\n  REAL: {\n    symbol: \"REAL\",\n    name: \"Realy Metaverse\",\n    mint: \"AD27ov5fVU2XzwsbvnFvb1JpCBaCB5dRXrczV9CqSVGb\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"realy-metaverse\",\n    },\n  },\n  CRWNY: {\n    symbol: \"CRWNY\",\n    name: \"CRWNY\",\n    mint: \"CRWNYkqdgvhGGae9CKfNka58j6QQkaD5bLhKXvUYqnc1\",\n    decimals: 6,\n    extensions: {},\n  },\n  BLOCK: {\n    symbol: \"BLOCK\",\n    name: \"Blockasset\",\n    mint: \"NFTUkR4u7wKxy9QLaX2TGvd9oZSWoMo4jqSJqdMb7Nk\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"blockasset\",\n    },\n  },\n  SOLAR: {\n    symbol: \"SOLAR\",\n    name: \"Solar\",\n    mint: \"2wmKXX1xsxLfrvjEPrt2UHiqj8Gbzwxvffr9qmNjsw8g\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"solar\",\n    },\n  },\n  BASIS: {\n    symbol: \"BASIS\",\n    name: \"basis.markets\",\n    mint: \"Basis9oJw9j8cw53oMV7iqsgo6ihi9ALw4QR31rcjUJa\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"basis-markets\",\n    },\n  },\n  SOLX: {\n    symbol: \"SOLX\",\n    name: \"Soldex\",\n    mint: \"CH74tuRLTYcxG7qNJCsV9rghfLXJCQJbsu7i52a8F1Gn\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"soldex\",\n    },\n  },\n  CHICKS: {\n    symbol: \"CHICKS\",\n    name: \"SolChicks Token\",\n    mint: \"cxxShYRVcepDudXhe7U62QHvw8uBJoKFifmzggGKVC2\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"solchicks-token\",\n    },\n  },\n  GST: {\n    symbol: \"GST\",\n    name: \"GST\",\n    mint: \"AFbX8oGjGpmVFywbVouvhQSRmiW2aR1mohfahi4Y2AdB\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"gst\",\n    },\n  },\n  MBS: {\n    symbol: \"MBS\",\n    name: \"MonkeyBall\",\n    mint: \"Fm9rHUTF5v3hwMLbStjZXqNBBoZyGriQaFM6sTFz3K8A\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"monkeyball\",\n    },\n  },\n  PRISM: {\n    symbol: \"PRISM\",\n    name: \"Prism\",\n    mint: \"PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"prism\",\n    },\n  },\n  MEAN: {\n    symbol: \"MEAN\",\n    name: \"Meanfi\",\n    mint: \"MEANeD3XDdUmNMsRGjASkSWdC8prLYsoRJ61pPeHctD\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"meanfi\",\n    },\n  },\n  TINY: {\n    symbol: \"TINY\",\n    name: \"Tiny Colony\",\n    mint: \"HKfs24UEDQpHS5hUyKYkHd9q7GY5UQ679q2bokeL2whu\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"tiny-colony\",\n    },\n  },\n  SHDW: {\n    symbol: \"SHDW\",\n    name: \"GenesysGo Shadow\",\n    mint: \"SHDWyBxihqiCj6YekG2GUr7wqKLeLAMK1gHZck9pL6y\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"genesysgo-shadow\",\n    },\n  },\n  SCY: {\n    symbol: \"SCY\",\n    name: \"Synchrony\",\n    mint: \"SCYfrGCw8aDiqdgcpdGjV6jp4UVVQLuphxTDLNWu36f\",\n    decimals: 9,\n    extensions: {\n      coingeckoId: \"synchrony\",\n    },\n  },\n  SLC: {\n    symbol: \"SLC\",\n    name: \"Solice\",\n    mint: \"METAmTMXwdb8gYzyCPfXXFmZZw4rUsXX58PNsDg7zjL\",\n    decimals: 6,\n    extensions: {\n      coingeckoId: \"solice\",\n    },\n  },\n};\n\nexport const MAINNET_LP_TOKENS: LpTokens = {\n  FIDA_RAY_V4: {\n    symbol: \"FIDA-RAY\",\n    name: \"FIDA-RAY V4 LP\",\n    mint: \"DsBuznXRTmzvEdb36Dx3aVLVo1XmH7r1PRZUFugLPTFv\",\n\n    base: MAINNET_SPL_TOKENS.FIDA,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.FIDA.decimals,\n\n    version: 4,\n  },\n  OXY_RAY_V4: {\n    symbol: \"OXY-RAY\",\n    name: \"OXY-RAY V4 LP\",\n    mint: \"FwaX9W7iThTZH5MFeasxdLpxTVxRcM7ZHieTCnYog8Yb\",\n\n    base: MAINNET_SPL_TOKENS.OXY,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.OXY.decimals,\n\n    version: 4,\n  },\n  MAPS_RAY_V4: {\n    symbol: \"MAPS-RAY\",\n    name: \"MAPS-RAY V4 LP\",\n    mint: \"CcKK8srfVdTSsFGV3VLBb2YDbzF4T4NM2C3UEjC39RLP\",\n\n    base: MAINNET_SPL_TOKENS.MAPS,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.MAPS.decimals,\n\n    version: 4,\n  },\n  KIN_RAY_V4: {\n    symbol: \"KIN-RAY\",\n    name: \"KIN-RAY V4 LP\",\n    mint: \"CHT8sft3h3gpLYbCcZ9o27mT5s3Z6VifBVbUiDvprHPW\",\n\n    base: MAINNET_SPL_TOKENS.KIN,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    // mistake, a special one\n    decimals: 6,\n\n    version: 4,\n  },\n  RAY_USDT_V4: {\n    symbol: \"RAY-USDT\",\n    name: \"RAY-USDT V4 LP\",\n    mint: \"C3sT1R3nsw4AVdepvLTLKr5Gvszr7jufyBWUCvy4TUvT\",\n\n    base: MAINNET_SPL_TOKENS.RAY,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.RAY.decimals,\n\n    version: 4,\n  },\n  SOL_USDC_V4: {\n    symbol: \"SOL-USDC\",\n    name: \"SOL-USDC V4 LP\",\n    mint: \"8HoQnePLqPj4M7PUDzfw8e3Ymdwgc7NLGnaTUapubyvu\",\n\n    base: MAINNET_SPL_TOKENS.WSOL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.WSOL.decimals,\n\n    version: 4,\n  },\n  YFI_USDC_V4: {\n    symbol: \"YFI-USDC\",\n    name: \"YFI-USDC V4 LP\",\n    mint: \"865j7iMmRRycSYUXzJ33ZcvLiX9JHvaLidasCyUyKaRE\",\n\n    base: MAINNET_SPL_TOKENS.YFI,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.YFI.decimals,\n\n    version: 4,\n  },\n  SRM_USDC_V4: {\n    symbol: \"SRM-USDC\",\n    name: \"SRM-USDC V4 LP\",\n    mint: \"9XnZd82j34KxNLgQfz29jGbYdxsYznTWRpvZE3SRE7JG\",\n\n    base: MAINNET_SPL_TOKENS.SRM,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SRM.decimals,\n\n    version: 4,\n  },\n  FTT_USDC_V4: {\n    symbol: \"FTT-USDC\",\n    name: \"FTT-USDC V4 LP\",\n    mint: \"75dCoKfUHLUuZ4qEh46ovsxfgWhB4icc3SintzWRedT9\",\n\n    base: MAINNET_SPL_TOKENS.FTT,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.FTT.decimals,\n\n    version: 4,\n  },\n  BTC_USDC_V4: {\n    symbol: \"BTC-USDC\",\n    name: \"BTC-USDC V4 LP\",\n    mint: \"2hMdRdVWZqetQsaHG8kQjdZinEMBz75vsoWTCob1ijXu\",\n\n    base: MAINNET_SPL_TOKENS.BTC,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.BTC.decimals,\n\n    version: 4,\n  },\n  SUSHI_USDC_V4: {\n    symbol: \"SUSHI-USDC\",\n    name: \"SUSHI-USDC V4 LP\",\n    mint: \"2QVjeR9d2PbSf8em8NE8zWd8RYHjFtucDUdDgdbDD2h2\",\n\n    base: MAINNET_SPL_TOKENS.SUSHI,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SUSHI.decimals,\n\n    version: 4,\n  },\n  TOMO_USDC_V4: {\n    symbol: \"TOMO-USDC\",\n    name: \"TOMO-USDC V4 LP\",\n    mint: \"CHyUpQFeW456zcr5XEh4RZiibH8Dzocs6Wbgz9aWpXnQ\",\n\n    base: MAINNET_SPL_TOKENS.TOMO,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.TOMO.decimals,\n\n    version: 4,\n  },\n  LINK_USDC_V4: {\n    symbol: \"LINK-USDC\",\n    name: \"LINK-USDC V4 LP\",\n    mint: \"BqjoYjqKrXtfBKXeaWeAT5sYCy7wsAYf3XjgDWsHSBRs\",\n\n    base: MAINNET_SPL_TOKENS.LINK,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.LINK.decimals,\n\n    version: 4,\n  },\n  ETH_USDC_V4: {\n    symbol: \"ETH-USDC\",\n    name: \"ETH-USDC V4 LP\",\n    mint: \"13PoKid6cZop4sj2GfoBeujnGfthUbTERdE5tpLCDLEY\",\n\n    base: MAINNET_SPL_TOKENS.ETH,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.ETH.decimals,\n\n    version: 4,\n  },\n  xCOPE_USDC_V4: {\n    symbol: \"xCOPE-USDC\",\n    name: \"xCOPE-USDC V4 LP\",\n    mint: \"2Vyyeuyd15Gp8aH6uKE72c4hxc8TVSLibxDP9vzspQWG\",\n\n    base: MAINNET_SPL_TOKENS.xCOPE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.xCOPE.decimals,\n\n    version: 4,\n  },\n  SOL_USDT_V4: {\n    symbol: \"SOL-USDT\",\n    name: \"SOL-USDT V4 LP\",\n    mint: \"Epm4KfTj4DMrvqn6Bwg2Tr2N8vhQuNbuK8bESFp4k33K\",\n\n    base: MAINNET_SPL_TOKENS.WSOL,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.WSOL.decimals,\n\n    version: 4,\n  },\n  YFI_USDT_V4: {\n    symbol: \"YFI-USDT\",\n    name: \"YFI-USDT V4 LP\",\n    mint: \"FA1i7fej1pAbQbnY8NbyYUsTrWcasTyipKreDgy1Mgku\",\n\n    base: MAINNET_SPL_TOKENS.YFI,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.YFI.decimals,\n\n    version: 4,\n  },\n  SRM_USDT_V4: {\n    symbol: \"SRM-USDT\",\n    name: \"SRM-USDT V4 LP\",\n    mint: \"HYSAu42BFejBS77jZAZdNAWa3iVcbSRJSzp3wtqCbWwv\",\n\n    base: MAINNET_SPL_TOKENS.SRM,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.SRM.decimals,\n\n    version: 4,\n  },\n  FTT_USDT_V4: {\n    symbol: \"FTT-USDT\",\n    name: \"FTT-USDT V4 LP\",\n    mint: \"2cTCiUnect5Lap2sk19xLby7aajNDYseFhC9Pigou11z\",\n\n    base: MAINNET_SPL_TOKENS.FTT,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.FTT.decimals,\n\n    version: 4,\n  },\n  BTC_USDT_V4: {\n    symbol: \"BTC-USDT\",\n    name: \"BTC-USDT V4 LP\",\n    mint: \"DgGuvR9GSHimopo3Gc7gfkbKamLKrdyzWkq5yqA6LqYS\",\n\n    base: MAINNET_SPL_TOKENS.BTC,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.BTC.decimals,\n\n    version: 4,\n  },\n  SUSHI_USDT_V4: {\n    symbol: \"SUSHI-USDT\",\n    name: \"SUSHI-USDT V4 LP\",\n    mint: \"Ba26poEYDy6P2o95AJUsewXgZ8DM9BCsmnU9hmC9i4Ki\",\n\n    base: MAINNET_SPL_TOKENS.SUSHI,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.SUSHI.decimals,\n\n    version: 4,\n  },\n  TOMO_USDT_V4: {\n    symbol: \"TOMO-USDT\",\n    name: \"TOMO-USDT V4 LP\",\n    mint: \"D3iGro1vn6PWJXo9QAPj3dfta6dKkHHnmiiym2EfsAmi\",\n\n    base: MAINNET_SPL_TOKENS.TOMO,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.TOMO.decimals,\n\n    version: 4,\n  },\n  LINK_USDT_V4: {\n    symbol: \"LINK-USDT\",\n    name: \"LINK-USDT V4 LP\",\n    mint: \"Dr12Sgt9gkY8WU5tRkgZf1TkVWJbvjYuPAhR3aDCwiiX\",\n\n    base: MAINNET_SPL_TOKENS.LINK,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.LINK.decimals,\n\n    version: 4,\n  },\n  ETH_USDT_V4: {\n    symbol: \"ETH-USDT\",\n    name: \"ETH-USDT V4 LP\",\n    mint: \"nPrB78ETY8661fUgohpuVusNCZnedYCgghzRJzxWnVb\",\n\n    base: MAINNET_SPL_TOKENS.ETH,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.ETH.decimals,\n\n    version: 4,\n  },\n  YFI_SRM_V4: {\n    symbol: \"YFI-SRM\",\n    name: \"YFI-SRM V4 LP\",\n    mint: \"EGJht91R7dKpCj8wzALkjmNdUUUcQgodqWCYweyKcRcV\",\n\n    base: MAINNET_SPL_TOKENS.YFI,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.YFI.decimals,\n\n    version: 4,\n  },\n  FTT_SRM_V4: {\n    symbol: \"FTT-SRM\",\n    name: \"FTT-SRM V4 LP\",\n    mint: \"AsDuPg9MgPtt3jfoyctUCUgsvwqAN6RZPftqoeiPDefM\",\n\n    base: MAINNET_SPL_TOKENS.FTT,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.FTT.decimals,\n\n    version: 4,\n  },\n  BTC_SRM_V4: {\n    symbol: \"BTC-SRM\",\n    name: \"BTC-SRM V4 LP\",\n    mint: \"AGHQxXb3GSzeiLTcLtXMS2D5GGDZxsB2fZYZxSB5weqB\",\n\n    base: MAINNET_SPL_TOKENS.BTC,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.BTC.decimals,\n\n    version: 4,\n  },\n  SUSHI_SRM_V4: {\n    symbol: \"SUSHI-SRM\",\n    name: \"SUSHI-SRM V4 LP\",\n    mint: \"3HYhUnUdV67j1vn8fu7ExuVGy5dJozHEyWvqEstDbWwE\",\n\n    base: MAINNET_SPL_TOKENS.SUSHI,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.SUSHI.decimals,\n\n    version: 4,\n  },\n  TOMO_SRM_V4: {\n    symbol: \"TOMO-SRM\",\n    name: \"TOMO-SRM V4 LP\",\n    mint: \"GgH9RnKrQpaMQeqmdbMvs5oo1A24hERQ9wuY2pSkeG7x\",\n\n    base: MAINNET_SPL_TOKENS.TOMO,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.TOMO.decimals,\n\n    version: 4,\n  },\n  LINK_SRM_V4: {\n    symbol: \"LINK-SRM\",\n    name: \"LINK-SRM V4 LP\",\n    mint: \"GXN6yJv12o18skTmJXaeFXZVY1iqR18CHsmCT8VVCmDD\",\n\n    base: MAINNET_SPL_TOKENS.LINK,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.LINK.decimals,\n\n    version: 4,\n  },\n  ETH_SRM_V4: {\n    symbol: \"ETH-SRM\",\n    name: \"ETH-SRM V4 LP\",\n    mint: \"9VoY3VERETuc2FoadMSYYizF26mJinY514ZpEzkHMtwG\",\n\n    base: MAINNET_SPL_TOKENS.ETH,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.ETH.decimals,\n\n    version: 4,\n  },\n  SRM_SOL_V4: {\n    symbol: \"SRM-SOL\",\n    name: \"SRM-SOL V4 LP\",\n    mint: \"AKJHspCwDhABucCxNLXUSfEzb7Ny62RqFtC9uNjJi4fq\",\n\n    base: MAINNET_SPL_TOKENS.SRM,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.SRM.decimals,\n\n    version: 4,\n  },\n  STEP_USDC_V4: {\n    symbol: \"STEP-USDC\",\n    name: \"STEP-USDC V4 LP\",\n    mint: \"3k8BDobgihmk72jVmXYLE168bxxQUhqqyESW4dQVktqC\",\n\n    base: MAINNET_SPL_TOKENS.STEP,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.STEP.decimals,\n\n    version: 4,\n  },\n  MEDIA_USDC_V4: {\n    symbol: \"MEDIA-USDC\",\n    name: \"MEDIA-USDC V4 LP\",\n    mint: \"A5zanvgtioZGiJMdEyaKN4XQmJsp1p7uVxaq2696REvQ\",\n\n    base: MAINNET_SPL_TOKENS.MEDIA,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.MEDIA.decimals,\n\n    version: 4,\n  },\n  ROPE_USDC_V4: {\n    symbol: \"ROPE-USDC\",\n    name: \"ROPE-USDC V4 LP\",\n    mint: \"Cq4HyW5xia37tKejPF2XfZeXQoPYW6KfbPvxvw5eRoUE\",\n\n    base: MAINNET_SPL_TOKENS.ROPE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.ROPE.decimals,\n\n    version: 4,\n  },\n  MER_USDC_V4: {\n    symbol: \"MER-USDC\",\n    name: \"MER-USDC V4 LP\",\n    mint: \"3H9NxvaZoxMZZDZcbBDdWMKbrfNj7PCF5sbRwDr7SdDW\",\n\n    base: MAINNET_SPL_TOKENS.MER,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.MER.decimals,\n\n    version: 4,\n  },\n  COPE_USDC_V4: {\n    symbol: \"COPE-USDC\",\n    name: \"COPE-USDC V4 LP\",\n    mint: \"Cz1kUvHw98imKkrqqu95GQB9h1frY8RikxPojMwWKGXf\",\n\n    base: MAINNET_SPL_TOKENS.COPE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.COPE.decimals,\n\n    version: 4,\n  },\n  ALEPH_USDC_V4: {\n    symbol: \"ALEPH-USDC\",\n    name: \"ALEPH-USDC V4 LP\",\n    mint: \"iUDasAP2nXm5wvTukAHEKSdSXn8vQkRtaiShs9ceGB7\",\n\n    base: MAINNET_SPL_TOKENS.ALEPH,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.ALEPH.decimals,\n\n    version: 4,\n  },\n  TULIP_USDC_V4: {\n    symbol: \"TULIP-USDC\",\n    name: \"TULIP-USDC V4 LP\",\n    mint: \"2doeZGLJyACtaG9DCUyqMLtswesfje1hjNA11hMdj6YU\",\n\n    base: MAINNET_SPL_TOKENS.TULIP,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.TULIP.decimals,\n\n    version: 4,\n  },\n  WOO_USDC_V4: {\n    symbol: \"WOO-USDC\",\n    name: \"WOO-USDC V4 LP\",\n    mint: \"7cu42ao8Jgrd5A3y3bNQsCxq5poyGZNmTydkGfJYQfzh\",\n\n    base: MAINNET_SPL_TOKENS.WOO,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.WOO.decimals,\n\n    version: 4,\n  },\n  SNY_USDC_V4: {\n    symbol: \"SNY-USDC\",\n    name: \"SNY-USDC V4 LP\",\n    mint: \"G8qcfeFqxwbCqpxv5LpLWxUCd1PyMB5nWb5e5YyxLMKg\",\n\n    base: MAINNET_SPL_TOKENS.SNY,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SNY.decimals,\n\n    version: 4,\n  },\n  BOP_RAY_V4: {\n    symbol: \"BOP-RAY\",\n    name: \"BOP-RAY V4 LP\",\n    mint: \"9nQPYJvysyfnXhQ6nkK5V7sZG26hmDgusfdNQijRk5LD\",\n\n    base: MAINNET_SPL_TOKENS.BOP,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.BOP.decimals,\n\n    version: 4,\n  },\n  SLRS_USDC_V4: {\n    symbol: \"SLRS-USDC\",\n    name: \"SLRS-USDC V4 LP\",\n    mint: \"2Xxbm1hdv5wPeen5ponDSMT3VqhGMTQ7mH9stNXm9shU\",\n\n    base: MAINNET_SPL_TOKENS.SLRS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SLRS.decimals,\n\n    version: 4,\n  },\n  SAMO_RAY_V4: {\n    symbol: \"SAMO-RAY\",\n    name: \"SAMO-RAY V4 LP\",\n    mint: \"HwzkXyX8B45LsaHXwY8su92NoRBS5GQC32HzjQRDqPnr\",\n\n    base: MAINNET_SPL_TOKENS.SAMO,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.SAMO.decimals,\n\n    version: 4,\n  },\n  renBTC_USDC_V4: {\n    symbol: \"renBTC-USDC\",\n    name: \"renBTC-USDC V4 LP\",\n    mint: \"CTEpsih91ZLo5gunvryLpJ3pzMjmt5jbS6AnSQrzYw7V\",\n\n    base: MAINNET_SPL_TOKENS.renBTC,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.renBTC.decimals,\n\n    version: 4,\n  },\n  renDOGE_USDC_V4: {\n    symbol: \"renDOGE-USDC\",\n    name: \"renDOGE-USDC V4 LP\",\n    mint: \"Hb8KnZNKvRxu7pgMRWJgoMSMcepfvNiBFFDDrdf9o3wA\",\n\n    base: MAINNET_SPL_TOKENS.renDOGE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.renDOGE.decimals,\n\n    version: 4,\n  },\n  RAY_USDC_V4: {\n    symbol: \"RAY-USDC\",\n    name: \"RAY-USDC V4 LP\",\n    mint: \"FbC6K13MzHvN42bXrtGaWsvZY9fxrackRSZcBGfjPc7m\",\n\n    base: MAINNET_SPL_TOKENS.RAY,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.RAY.decimals,\n\n    version: 4,\n  },\n  RAY_SRM_V4: {\n    symbol: \"RAY-SRM\",\n    name: \"RAY-SRM V4 LP\",\n    mint: \"7P5Thr9Egi2rvMmEuQkLn8x8e8Qro7u2U7yLD2tU2Hbe\",\n\n    base: MAINNET_SPL_TOKENS.RAY,\n    quote: MAINNET_SPL_TOKENS.SRM,\n    decimals: MAINNET_SPL_TOKENS.RAY.decimals,\n\n    version: 4,\n  },\n  RAY_ETH_V4: {\n    symbol: \"RAY-ETH\",\n    name: \"RAY-ETH V4 LP\",\n    mint: \"mjQH33MqZv5aKAbKHi8dG3g3qXeRQqq1GFcXceZkNSr\",\n\n    base: MAINNET_SPL_TOKENS.RAY,\n    quote: MAINNET_SPL_TOKENS.ETH,\n    decimals: MAINNET_SPL_TOKENS.RAY.decimals,\n\n    version: 4,\n  },\n  RAY_SOL_V4: {\n    symbol: \"RAY-SOL\",\n    name: \"RAY-SOL V4 LP\",\n    mint: \"89ZKE4aoyfLBe2RuV6jM3JGNhaV18Nxh8eNtjRcndBip\",\n\n    base: MAINNET_SPL_TOKENS.RAY,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.RAY.decimals,\n\n    version: 4,\n  },\n  DXL_USDC_V4: {\n    symbol: \"DXL-USDC\",\n    name: \"DXL-USDC V4 LP\",\n    mint: \"4HFaSvfgskipvrzT1exoVKsUZ174JyExEsA8bDfsAdY5\",\n\n    base: MAINNET_SPL_TOKENS.DXL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.DXL.decimals,\n\n    version: 4,\n  },\n  LIKE_USDC_V4: {\n    symbol: \"LIKE-USDC\",\n    name: \"LIKE-USDC V4 LP\",\n    mint: \"cjZmbt8sJgaoyWYUttomAu5LJYU44ZrcKTbzTSEPDVw\",\n\n    base: MAINNET_SPL_TOKENS.LIKE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.LIKE.decimals,\n\n    version: 4,\n  },\n  mSOL_USDC_V4: {\n    symbol: \"mSOL-USDC\",\n    name: \"mSOL-USDC V4 LP\",\n    mint: \"4xTpJ4p76bAeggXoYywpCCNKfJspbuRzZ79R7pRhbqSf\",\n\n    base: MAINNET_SPL_TOKENS.mSOL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.mSOL.decimals,\n\n    version: 4,\n  },\n  mSOL_SOL_V4: {\n    symbol: \"mSOL-SOL\",\n    name: \"mSOL-SOL V4 LP\",\n    mint: \"5ijRoAHVgd5T5CNtK5KDRUBZ7Bffb69nktMj5n6ks6m4\",\n\n    base: MAINNET_SPL_TOKENS.mSOL,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.mSOL.decimals,\n\n    version: 4,\n  },\n  MER_PAI_V4: {\n    symbol: \"MER-PAI\",\n    name: \"MER-PAI V4 LP\",\n    mint: \"DU5RT2D9EviaSmX6Ta8MZwMm85HwSEqGMRdqUiuCGfmD\",\n\n    base: MAINNET_SPL_TOKENS.MER,\n    quote: MAINNET_SPL_TOKENS.PAI,\n    decimals: MAINNET_SPL_TOKENS.MER.decimals,\n\n    version: 4,\n  },\n  PORT_USDC_V4: {\n    symbol: \"PORT-USDC\",\n    name: \"PORT-USDC V4 LP\",\n    mint: \"9tmNtbUCrLS15qC4tEfr5NNeqcqpZ4uiGgi2vS5CLQBS\",\n\n    base: MAINNET_SPL_TOKENS.PORT,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.PORT.decimals,\n\n    version: 4,\n  },\n  MNGO_USDC_V4: {\n    symbol: \"MNGO-USDC\",\n    name: \"MNGO-USDC V4 LP\",\n    mint: \"DkiqCQ792n743xjWQVCbBUaVtkdiuvQeYndM53ReWnCC\",\n\n    base: MAINNET_SPL_TOKENS.MNGO,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.MNGO.decimals,\n\n    version: 4,\n  },\n  ATLAS_USDC_V4: {\n    symbol: \"ATLAS-USDC\",\n    name: \"ATLAS-USDC V4 LP\",\n    mint: \"9shGU9f1EsxAbiR567MYZ78WUiS6ZNCYbHe53WUULQ7n\",\n\n    base: MAINNET_SPL_TOKENS.ATLAS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.ATLAS.decimals,\n\n    version: 4,\n  },\n  POLIS_USDC_V4: {\n    symbol: \"POLIS-USDC\",\n    name: \"POLIS-USDC V4 LP\",\n    mint: \"8MbKSBpyXs8fVneKgt71jfHrn5SWtX8n4wMLpiVfF9So\",\n\n    base: MAINNET_SPL_TOKENS.POLIS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.POLIS.decimals,\n\n    version: 4,\n  },\n  ATLAS_RAY_V4: {\n    symbol: \"ATLAS-RAY\",\n    name: \"ATLAS-RAY V4 LP\",\n    mint: \"418MFhkaYQtbn529wmjLLqL6uKxDz7j4eZBaV1cobkyd\",\n\n    base: MAINNET_SPL_TOKENS.ATLAS,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.ATLAS.decimals,\n\n    version: 4,\n  },\n  POLIS_RAY_V4: {\n    symbol: \"POLIS-RAY\",\n    name: \"POLIS-RAY V4 LP\",\n    mint: \"9ysGKUH6WqzjQEUT4dxqYCUaFNVK9QFEa24pGzjFq8xg\",\n\n    base: MAINNET_SPL_TOKENS.POLIS,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.POLIS.decimals,\n\n    version: 4,\n  },\n  ALEPH_RAY_V4: {\n    symbol: \"ALEPH-RAY\",\n    name: \"ALEPH-RAY V4 LP\",\n    mint: \"n76skjqv4LirhdLok2zJELXNLdRpYDgVJQuQFbamscy\",\n\n    base: MAINNET_SPL_TOKENS.ALEPH,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.ALEPH.decimals,\n\n    version: 4,\n  },\n  TULIP_RAY_V4: {\n    symbol: \"TULIP-RAY\",\n    name: \"TULIP-RAY V4 LP\",\n    mint: \"3AZTviji5qduMG2s4FfWGR3SSQmNUCyx8ao6UKCPg3oJ\",\n\n    base: MAINNET_SPL_TOKENS.TULIP,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.TULIP.decimals,\n\n    version: 4,\n  },\n  SLRS_RAY_V4: {\n    symbol: \"SLRS-RAY\",\n    name: \"SLRS-RAY V4 LP\",\n    mint: \"2pk78vsKT3jfJAcN2zbpMUnrR57SZrxHqaZYyFgp92mM\",\n\n    base: MAINNET_SPL_TOKENS.SLRS,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.SLRS.decimals,\n\n    version: 4,\n  },\n  MER_RAY_V4: {\n    symbol: \"MER-RAY\",\n    name: \"MER-RAY V4 LP\",\n    mint: \"214hxy3AbKoaEKgqcg2aC1cP5R67cGGAyDEg5GDwC7Ub\",\n\n    base: MAINNET_SPL_TOKENS.MER,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.MER.decimals,\n\n    version: 4,\n  },\n  MEDIA_RAY_V4: {\n    symbol: \"MEDIA-RAY\",\n    name: \"MEDIA-RAY V4 LP\",\n    mint: \"9Aseg5A1JD1yCiFFdDaNNxCiJ7XzrpZFmcEmLjXFdPaH\",\n\n    base: MAINNET_SPL_TOKENS.MEDIA,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.MEDIA.decimals,\n\n    version: 4,\n  },\n  SNY_RAY_V4: {\n    symbol: \"SNY-RAY\",\n    name: \"SNY-RAY V4 LP\",\n    mint: \"2k4quTuuLUxrSEhFH99qcoZzvgvVEc3b5sz3xz3qstfS\",\n\n    base: MAINNET_SPL_TOKENS.SNY,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.SNY.decimals,\n\n    version: 4,\n  },\n  LIKE_RAY_V4: {\n    symbol: \"LIKE-RAY\",\n    name: \"LIKE-RAY V4 LP\",\n    mint: \"7xqDycbFSCpUpzkYapFeyPJWPwEpV7zdWbYf2MVHTNjv\",\n\n    base: MAINNET_SPL_TOKENS.LIKE,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.LIKE.decimals,\n\n    version: 4,\n  },\n  COPE_RAY_V4: {\n    symbol: \"COPE-RAY\",\n    name: \"COPE-RAY V4 LP\",\n    mint: \"A7GCVHA8NSsbdFscHdoNU41tL1TRKNmCH4K94CgcLK9F\",\n\n    base: MAINNET_SPL_TOKENS.COPE,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.COPE.decimals,\n\n    version: 4,\n  },\n  ETH_SOL_V4: {\n    symbol: \"ETH-SOL\",\n    name: \"ETH-SOL V4 LP\",\n    mint: \"GKfgC86iJoMjwAtcyiLu6nWnjggqUXsDQihXkP14fDez\",\n\n    base: MAINNET_SPL_TOKENS.ETH,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.ETH.decimals,\n\n    version: 4,\n  },\n  stSOL_USDC_V4: {\n    symbol: \"stSOL-USDC\",\n    name: \"stSOL-USDC V4 LP\",\n    mint: \"HDUJMwYZkjUZre63xUeDhdCi8c6LgUDiBqxmP3QC3VPX\",\n\n    base: MAINNET_SPL_TOKENS.stSOL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.stSOL.decimals,\n\n    version: 4,\n  },\n  GRAPE_USDC_V4: {\n    symbol: \"GRAPE-USDC\",\n    name: \"GRAPE-USDC V4 LP\",\n    mint: \"A8ZYmnZ1vwxUa4wpJVUaJgegsuTEz5TKy5CiJXffvmpt\",\n\n    base: MAINNET_SPL_TOKENS.GRAPE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.GRAPE.decimals,\n\n    version: 4,\n  },\n  LARIX_USDC_V4: {\n    symbol: \"LARIX-USDC\",\n    name: \"LARIX-USDC V4 LP\",\n    mint: \"7yieit4YsNsZ9CAK8H5ZEMvvk35kPEHHeXwp6naoWU9V\",\n\n    base: MAINNET_SPL_TOKENS.LARIX,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.LARIX.decimals,\n\n    version: 4,\n  },\n  RIN_USDC_V4: {\n    symbol: \"RIN-USDC\",\n    name: \"RIN-USDC V4 LP\",\n    mint: \"GfCWfrZez7BDmCSEeMERVDVUaaM2TEreyYUgb2cpuS3w\",\n\n    base: MAINNET_SPL_TOKENS.RIN,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.RIN.decimals,\n\n    version: 4,\n  },\n  APEX_USDC_V4: {\n    symbol: \"APEX-USDC\",\n    name: \"APEX-USDC V4 LP\",\n    mint: \"444cVqYyDxJNo6FqiMb9qQWFUd7tYzFRdDuJRFrSAGnU\",\n\n    base: MAINNET_SPL_TOKENS.APEX,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.APEX.decimals,\n\n    version: 4,\n  },\n  mSOL_RAY_V4: {\n    symbol: \"mSOL-RAY\",\n    name: \"mSOL-RAY V4 LP\",\n    mint: \"De2EHBAdkgfc72DpShqDGG42cV3iDWh8wvvZdPsiEcqP\",\n\n    base: MAINNET_SPL_TOKENS.mSOL,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.mSOL.decimals,\n\n    version: 4,\n  },\n  MNDE_mSOL_V4: {\n    symbol: \"MNDE-mSOL\",\n    name: \"MNDE-mSOL V4 LP\",\n    mint: \"4bh8XCzTHSbqbWN8o1Jn4ueBdz1LvJFoEasN6K6CQ8Ny\",\n\n    base: MAINNET_SPL_TOKENS.MNDE,\n    quote: MAINNET_SPL_TOKENS.mSOL,\n    decimals: MAINNET_SPL_TOKENS.MNDE.decimals,\n\n    version: 4,\n  },\n  LARIX_RAY_V4: {\n    symbol: \"LARIX-RAY\",\n    name: \"LARIX-RAY V4 LP\",\n    mint: \"ZRDfSLgWGeaYSmhdPvFNKQQhDcYdZQaue2N8YDmHX4q\",\n\n    base: MAINNET_SPL_TOKENS.LARIX,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.LARIX.decimals,\n\n    version: 4,\n  },\n  LIQ_USDC_V4: {\n    symbol: \"LIQ-USDC\",\n    name: \"LIQ-USDC V4 LP\",\n    mint: \"GWpD3eTfhJB5KDCcnE85dBQrjAk2CsrgDF9b52R9CrjV\",\n\n    base: MAINNET_SPL_TOKENS.LIQ,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.LIQ.decimals,\n\n    version: 4,\n  },\n  WAG_USDC_V4: {\n    symbol: \"WAG-USDC\",\n    name: \"WAG-USDC V4 LP\",\n    mint: \"4yykyPugitUVRewNPXXCviRvxGfsfsRMoP32z3b6FmUC\",\n\n    base: MAINNET_SPL_TOKENS.WAG,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.WAG.decimals,\n\n    version: 4,\n  },\n  ETH_mSOL_V4: {\n    symbol: \"ETH-mSOL\",\n    name: \"ETH-mSOL V4 LP\",\n    mint: \"HYv3grQfi8QbV7nG7EFgNK1aJSrsJ7HynXJKJVPLL2Uh\",\n\n    base: MAINNET_SPL_TOKENS.ETH,\n    quote: MAINNET_SPL_TOKENS.mSOL,\n    decimals: MAINNET_SPL_TOKENS.ETH.decimals,\n\n    version: 4,\n  },\n  mSOL_USDT_V4: {\n    symbol: \"mSOL-USDT\",\n    name: \"mSOL-USDT V4 LP\",\n    mint: \"69NCmEW9mGpiWLjAcAWHq51k4ionJZmzgRfRT3wQaCCf\",\n\n    base: MAINNET_SPL_TOKENS.mSOL,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.mSOL.decimals,\n\n    version: 4,\n  },\n  BTC_mSOL_V4: {\n    symbol: \"BTC-mSOL\",\n    name: \"BTC-mSOL V4 LP\",\n    mint: \"92bcERNtUmuaJ6mwLSxYHZYSph37jdKxRdoYNxpcYNPp\",\n\n    base: MAINNET_SPL_TOKENS.BTC,\n    quote: MAINNET_SPL_TOKENS.mSOL,\n    decimals: MAINNET_SPL_TOKENS.BTC.decimals,\n\n    version: 4,\n  },\n  SLIM_SOL_V4: {\n    symbol: \"SLIM-SOL\",\n    name: \"SLIM-SOL V4 LP\",\n    mint: \"9X4EK8E59VAVi6ChnNvvd39m6Yg9RtkBbAPq1mDVJT57\",\n\n    base: MAINNET_SPL_TOKENS.SLIM,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.SLIM.decimals,\n\n    version: 4,\n  },\n  AURY_USDC_V4: {\n    symbol: \"AURY-USDC\",\n    name: \"AURY-USDC V4 LP\",\n    mint: \"Gub5dvTy4nzP82qpmpNkBxmRqjtqRddBTBqHSdNcf2oS\",\n\n    base: MAINNET_SPL_TOKENS.AURY,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.AURY.decimals,\n\n    version: 4,\n  },\n  PRT_SOL_V4: {\n    symbol: \"PRT-SOL\",\n    name: \"PRT-SOL V4 LP\",\n    mint: \"EcJ8Wgwt1AzSPiDpVr6aaSur8TKAsNTPmmzRACeqT68Z\",\n\n    base: MAINNET_SPL_TOKENS.PRT,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.PRT.decimals,\n\n    version: 4,\n  },\n  LIQ_RAY_V4: {\n    symbol: \"LIQ-RAY\",\n    name: \"LIQ-RAY V4 LP\",\n    mint: \"49YUsDrThJosHSagCn1F59Uc9NRxbr9thVrZikUnQDXy\",\n\n    base: MAINNET_SPL_TOKENS.LIQ,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.LIQ.decimals,\n\n    version: 4,\n  },\n  SYP_SOL_V4: {\n    symbol: \"SYP-SOL\",\n    name: \"SYP-SOL V4 LP\",\n    mint: \"KHV6dfj2bDntzJ9z1S26cDfqWfUZdJRFmteLR6LxHwW\",\n\n    base: MAINNET_SPL_TOKENS.SYP,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.SYP.decimals,\n\n    version: 4,\n  },\n  SYP_RAY_V4: {\n    symbol: \"SYP-RAY\",\n    name: \"SYP-RAY V4 LP\",\n    mint: \"FT2KZqxxM8F2h9pZtTF4PyjK88bM4YbuBzd7ZPwQ5wMB\",\n\n    base: MAINNET_SPL_TOKENS.SYP,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.SYP.decimals,\n\n    version: 4,\n  },\n  SYP_USDC_V4: {\n    symbol: \"SYP-USDC\",\n    name: \"SYP-USDC V4 LP\",\n    mint: \"2xJGuLAivAR1WkARRA6zP1v4jaA9jV2Qis8JfMNvrVyZ\",\n\n    base: MAINNET_SPL_TOKENS.SYP,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SYP.decimals,\n\n    version: 4,\n  },\n  FAB_USDC_V4: {\n    symbol: \"FAB-USDC\",\n    name: \"FAB-USDC V4 LP\",\n    mint: \"5rTCvZq6BcApsC3VV1EEUuTJfaVd8uYhcGjwTy1By6P8\",\n\n    base: MAINNET_SPL_TOKENS.FAB,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.FAB.decimals,\n\n    version: 4,\n  },\n  WOOF_RAY_V4: {\n    symbol: \"WOOF-RAY\",\n    name: \"WOOF-RAY V4 LP\",\n    mint: \"H2FAnazDaGFutcmnrwDxhmdncR1Bd7GG4mhPCSUiamDX\",\n\n    base: MAINNET_SPL_TOKENS.WOOF,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.WOOF.decimals,\n\n    version: 4,\n  },\n  WOOF_USDC_V4: {\n    symbol: \"WOOF-USDC\",\n    name: \"WOOF-USDC V4 LP\",\n    mint: \"EFSu5TMc1ijRevaYCxUkS7uGvbhsymDHEaTK3UVdNE3q\",\n\n    base: MAINNET_SPL_TOKENS.WOOF,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.WOOF.decimals,\n\n    version: 4,\n  },\n  SLND_USDC_V4: {\n    symbol: \"SLND-USDC\",\n    name: \"SLND-USDC V4 LP\",\n    mint: \"EunE9uDh2cGsyJcsGuGKc6wte7kBn8iye2gzC4w2ePHn\",\n\n    base: MAINNET_SPL_TOKENS.SLND,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SLND.decimals,\n\n    version: 4,\n  },\n  FRKT_SOL_V4: {\n    symbol: \"FRKT-SOL\",\n    name: \"FRKT-SOL V4 LP\",\n    mint: \"HYUKXgpjaxMXHttyrFYtv3z2rdhZ1U9QDH8zEc8BooQC\",\n\n    base: MAINNET_SPL_TOKENS.FRKT,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.FRKT.decimals,\n\n    version: 4,\n  },\n  weWETH_SOL_V4: {\n    symbol: \"weWETH-SOL\",\n    name: \"weWETH-SOL V4 LP\",\n    mint: \"3hbozt2Por7bcrGod8N7kEeJNMocFFjCJrQR16TQGBrE\",\n\n    base: MAINNET_SPL_TOKENS.weWETH,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.weWETH.decimals,\n\n    version: 4,\n  },\n  weWETH_USDC_V4: {\n    symbol: \"weWETH-USDC\",\n    name: \"weWETH-USDC V4 LP\",\n    mint: \"3529SBnMCDW3S3xQ52aABbRHo7PcHvpQA4no8J12L5eK\",\n\n    base: MAINNET_SPL_TOKENS.weWETH,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weWETH.decimals,\n\n    version: 4,\n  },\n  weUNI_USDC_V4: {\n    symbol: \"weUNI-USDC\",\n    name: \"weUNI-USDC V4 LP\",\n    mint: \"EEC4QnT41py39QaYnzQnoYQEtDUDNa6Se8SBDgfPSN2a\",\n\n    base: MAINNET_SPL_TOKENS.weUNI,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weUNI.decimals,\n\n    version: 4,\n  },\n  weSUSHI_USDC_V4: {\n    symbol: \"weSUSHI-USDC\",\n    name: \"weSUSHI-USDC V4 LP\",\n    mint: \"3wVrtQZsiDNp5yTPyfEzQHPU6iuJoMmpnWg6CTt4V8sR\",\n\n    base: MAINNET_SPL_TOKENS.weSUSHI,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weSUSHI.decimals,\n\n    version: 4,\n  },\n  CYS_USDC_V4: {\n    symbol: \"CYS-USDC\",\n    name: \"CYS-USDC V4 LP\",\n    mint: \"GfV3QDzzdVUwCNSdfn6PjhmyJvjw18tn51RingWZYwk3\",\n\n    base: MAINNET_SPL_TOKENS.CYS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.CYS.decimals,\n\n    version: 4,\n  },\n  SAMO_USDC_V4: {\n    symbol: \"SAMO-USDC\",\n    name: \"SAMO-USDC V4 LP\",\n    mint: \"B2PjGEP3vPf1999fUD14pYdxvSDRVBk43hxB2rgthwEY\",\n\n    base: MAINNET_SPL_TOKENS.SAMO,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SAMO.decimals,\n\n    version: 4,\n  },\n  ABR_USDC_V4: {\n    symbol: \"ABR-USDC\",\n    name: \"ABR-USDC V4 LP\",\n    mint: \"ECHfxkf5zjjZFTX95QfFahNyzG7feyEKcfTdjsdrMSGU\",\n\n    base: MAINNET_SPL_TOKENS.ABR,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.ABR.decimals,\n\n    version: 4,\n  },\n  IN_USDC_V4: {\n    symbol: \"IN-USDC\",\n    name: \"IN-USDC V4 LP\",\n    mint: \"GbmJtVgg9fRmmmjKUYGMZeSt8wZ47cDDXasg5Y3iF4kz\",\n\n    base: MAINNET_SPL_TOKENS.IN,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.IN.decimals,\n\n    version: 4,\n  },\n  weDYDX_USDC_V4: {\n    symbol: \"weDYDX-USDC\",\n    name: \"weDYDX-USDC V4 LP\",\n    mint: \"BjkkMZnnzmgLqzGErzDbkk15ozv48iVKQuunpeM2Hqnk\",\n\n    base: MAINNET_SPL_TOKENS.weDYDX,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weDYDX.decimals,\n\n    version: 4,\n  },\n  STARS_USDC_V4: {\n    symbol: \"STARS-USDC\",\n    name: \"STARS-USDC V4 LP\",\n    mint: \"FJ68q7NChhETcGVdinMbM2FF1Cy79dpmUi6HC83K55Hv\",\n\n    base: MAINNET_SPL_TOKENS.STARS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.STARS.decimals,\n\n    version: 4,\n  },\n  weAXS_USDC_V4: {\n    symbol: \"weAXS-USDC\",\n    name: \"weAXS-USDC V4 LP\",\n    mint: \"6PSoJQ7myQ1BJtbQC6oiWR8HSecQGyoWsPYTZRJo2ci3\",\n\n    base: MAINNET_SPL_TOKENS.weAXS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weAXS.decimals,\n\n    version: 4,\n  },\n  weSHIB_USDC_V4: {\n    symbol: \"weSHIB-USDC\",\n    name: \"weSHIB-USDC V4 LP\",\n    mint: \"AcjX5pmTMGSgxkdxc3r82r6WMKBvS6eQXXFz5ck5KKUa\",\n\n    base: MAINNET_SPL_TOKENS.weSHIB,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weSHIB.decimals,\n\n    version: 4,\n  },\n  SBR_USDC_V4: {\n    symbol: \"SBR-USDC\",\n    name: \"SBR-USDC V4 LP\",\n    mint: \"9FC8xTFRbgTpuZZYAYnZLxgnQ8r7FwfSBM1SWvGwgF7s\",\n\n    base: MAINNET_SPL_TOKENS.SBR,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SBR.decimals,\n\n    version: 4,\n  },\n  OXS_USDC_V4: {\n    symbol: \"OXS-USDC\",\n    name: \"OXS-USDC V4 LP\",\n    mint: \"et9pdjWm97rbmsJoN183GkFV5qzTGru79GE1Zhe7NTU\",\n\n    base: MAINNET_SPL_TOKENS.OXS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.OXS.decimals,\n\n    version: 4,\n  },\n  CWAR_USDC_V4: {\n    symbol: \"CWAR-USDC\",\n    name: \"CWAR-USDC V4 LP\",\n    mint: \"HjR23bxn2gtRDB2P1Tm3DLepAPPZgazsWJpLG9wqjnYR\",\n\n    base: MAINNET_SPL_TOKENS.CWAR,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.CWAR.decimals,\n\n    version: 4,\n  },\n  UPS_USDC_V4: {\n    symbol: \"UPS-USDC\",\n    name: \"UPS-USDC V4 LP\",\n    mint: \"9hSUZdREEsbaYaKY4FouvXr7xyAqtpdHRDoYCb6Mb28a\",\n\n    base: MAINNET_SPL_TOKENS.UPS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.UPS.decimals,\n\n    version: 4,\n  },\n  weSAND_USDC_V4: {\n    symbol: \"weSAND-USDC\",\n    name: \"weSAND-USDC V4 LP\",\n    mint: \"3dADrQa7utyiCsaFeVk9r7oebW1WheowhKo5soBYKBVT\",\n\n    base: MAINNET_SPL_TOKENS.weSAND,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weSAND.decimals,\n\n    version: 4,\n  },\n  weMANA_USDC_V4: {\n    symbol: \"weMANA-USDC\",\n    name: \"weMANA-USDC V4 LP\",\n    mint: \"HpUkVAPRJ5zNRuJ1ZwMXEhbMHL3gSuPb2QuSER9YUd3a\",\n\n    base: MAINNET_SPL_TOKENS.weMANA,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.weMANA.decimals,\n\n    version: 4,\n  },\n  CAVE_USDC_V4: {\n    symbol: \"CAVE-USDC\",\n    name: \"CAVE-USDC V4 LP\",\n    mint: \"5Gba1k3fU7Vh7UtAiBmie9vhQNNq1JfEwgn1DPGZ7NKQ\",\n\n    base: MAINNET_SPL_TOKENS.CAVE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.CAVE.decimals,\n\n    version: 4,\n  },\n  GENE_USDC_V4: {\n    symbol: \"GENE-USDC\",\n    name: \"GENE-USDC V4 LP\",\n    mint: \"7GKvfHEXenNiWYbJBKae89mdaMPr5gGMYwZmyC8gBNVG\",\n\n    base: MAINNET_SPL_TOKENS.GENE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.GENE.decimals,\n\n    version: 4,\n  },\n  GENE_RAY_V4: {\n    symbol: \"GENE-RAY\",\n    name: \"GENE-RAY V4 LP\",\n    mint: \"3HzXnc1qZ8mGqun18Ck3KA616XnZNqF1RWbgYE2nGRMA\",\n\n    base: MAINNET_SPL_TOKENS.GENE,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.GENE.decimals,\n\n    version: 4,\n  },\n  APT_USDC_V4: {\n    symbol: \"APT-USDC\",\n    name: \"APT-USDC V4 LP\",\n    mint: \"Hk8mDAJFq4E9kF3DtNgPFwzbo5kbeiusNFJgWmo3LoQ5\",\n\n    base: MAINNET_SPL_TOKENS.APT,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.APT.decimals,\n\n    version: 4,\n  },\n  GOFX_USDC_V4: {\n    symbol: \"GOFX-USDC\",\n    name: \"GOFX-USDC V4 LP\",\n    mint: \"4svqAwrLPGRDCQuuieYTmtLXF75wiahjeK2rEN9tY1YL\",\n\n    base: MAINNET_SPL_TOKENS.GOFX,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.GOFX.decimals,\n\n    version: 4,\n  },\n  SONAR_USDC_V4: {\n    symbol: \"SONAR-USDC\",\n    name: \"SONAR-USDC V4 LP\",\n    mint: \"2tAcfqJ1YYjpGLqwh76kyNt9VaNFDd4fJySfH6SmWfKt\",\n\n    base: MAINNET_SPL_TOKENS.SONAR,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SONAR.decimals,\n\n    version: 4,\n  },\n  JSOL_SOL_V4: {\n    symbol: \"JSOL-SOL\",\n    name: \"JSOL-SOL V4 LP\",\n    mint: \"61z37rpHsU6d3Fq5sUjJ85K6tXGzkoYKDAG3kPJQNDRo\",\n\n    base: MAINNET_SPL_TOKENS.JSOL,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.JSOL.decimals,\n\n    version: 4,\n  },\n  JSOL_USDC_V4: {\n    symbol: \"JSOL-USDC\",\n    name: \"JSOL-USDC V4 LP\",\n    mint: \"3JZqf2VPNxj1kDZQsfzC7myM6spsGQbGuFv1gVfdYosN\",\n\n    base: MAINNET_SPL_TOKENS.JSOL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.JSOL.decimals,\n\n    version: 4,\n  },\n  SHILL_USDC_V4: {\n    symbol: \"SHILL-USDC\",\n    name: \"SHILL-USDC V4 LP\",\n    mint: \"CnUhYBtQEbSBZ76bgxAouVCTCb8rofZzwerVF5z5LREJ\",\n\n    base: MAINNET_SPL_TOKENS.SHILL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SHILL.decimals,\n\n    version: 4,\n  },\n  DFL_USDC_V4: {\n    symbol: \"DFL-USDC\",\n    name: \"DFL-USDC V4 LP\",\n    mint: \"Fffijd6UVJdQeLVXhenS8YcsnMUdWJqpbBeH42LFkXgS\",\n\n    base: MAINNET_SPL_TOKENS.DFL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.DFL.decimals,\n\n    version: 4,\n  },\n  BOKU_USDC_V4: {\n    symbol: \"BOKU-USDC\",\n    name: \"BOKU-USDC V4 LP\",\n    mint: \"8jjQn5Yagb6Nm2WGAxPW1bcGqrTWpg5adf6QukXEarcP\",\n\n    base: MAINNET_SPL_TOKENS.BOKU,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.BOKU.decimals,\n\n    version: 4,\n  },\n  MIMO_SOL_V4: {\n    symbol: \"MIMO-SOL\",\n    name: \"MIMO-SOL V4 LP\",\n    mint: \"HUJ1opSk8AiPfDT47r7n4hTiK2EXgrR3Msy7T8q1BywS\",\n\n    base: MAINNET_SPL_TOKENS.MIMO,\n    quote: MAINNET_SPL_TOKENS.WSOL,\n    decimals: MAINNET_SPL_TOKENS.MIMO.decimals,\n\n    version: 4,\n  },\n  wbWBNB_USDC_V4: {\n    symbol: \"wbWBNB-USDC\",\n    name: \"wbWBNB-USDC V4 LP\",\n    mint: \"FEsEfEJJSfiMQcshUgZ5UigfytfGRQ3z5puyF6DXDp9C\",\n\n    base: MAINNET_SPL_TOKENS.wbWBNB,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.wbWBNB.decimals,\n\n    version: 4,\n  },\n  wePEOPLE_USDC_V4: {\n    symbol: \"wePEOPLE-USDC\",\n    name: \"wePEOPLE-USDC V4 LP\",\n    mint: \"3e5ZCKi4etorpV4pv1fSckP5iJD67xcUkx3RtFCZhbzD\",\n\n    base: MAINNET_SPL_TOKENS.wePEOPLE,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.wePEOPLE.decimals,\n\n    version: 4,\n  },\n  ISOLA_USDT_V4: {\n    symbol: \"ISOLA-USDT\",\n    name: \"ISOLA-USDT V4 LP\",\n    mint: \"H8s1wQsZpRK61pyLF3XwyQc6E8vNUnwRDhy3TBDCDENQ\",\n\n    base: MAINNET_SPL_TOKENS.ISOLA,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.ISOLA.decimals,\n\n    version: 4,\n  },\n  SPWN_USDC_V4: {\n    symbol: \"SPWN-USDC\",\n    name: \"SPWN-USDC V4 LP\",\n    mint: \"B5uyCAQcX6nAjZypLgiivbEKabSptgUb8JK9tkaSnqdW\",\n\n    base: MAINNET_SPL_TOKENS.SPWN,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SPWN.decimals,\n\n    version: 4,\n  },\n  STR_USDC_V4: {\n    symbol: \"STR-USDC\",\n    name: \"STR-USDC V4 LP\",\n    mint: \"8uDVKmVwNmbXHDB7rNKqtpcT9VAsFHTJ5pPYxjyoBbNg\",\n\n    base: MAINNET_SPL_TOKENS.STR,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.STR.decimals,\n\n    version: 4,\n  },\n  SOLC_USDT_V4: {\n    symbol: \"SOLC-USDT\",\n    name: \"SOLC-USDT V4 LP\",\n    mint: \"2g9JzTWycLzK4KEBBHsponAtZRee2ii63bRrJ8tefEyt\",\n\n    base: MAINNET_SPL_TOKENS.SOLC,\n    quote: MAINNET_SPL_TOKENS.USDT,\n    decimals: MAINNET_SPL_TOKENS.SOLC.decimals,\n\n    version: 4,\n  },\n  VI_USDC_V4: {\n    symbol: \"VI-USDC\",\n    name: \"VI-USDC V4 LP\",\n    mint: \"3MwHyHCRfVqtH3ABFtdKXdY9dwemr9GGxQFaBkeq6NjY\",\n\n    base: MAINNET_SPL_TOKENS.VI,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.VI.decimals,\n\n    version: 4,\n  },\n  KKO_USDC_V4: {\n    symbol: \"KKO-USDC\",\n    name: \"KKO-USDC V4 LP\",\n    mint: \"7xr1Doc1NiMWbUg99YVFqQSLfYXNzo6YvacXUsSgBMNW\",\n\n    base: MAINNET_SPL_TOKENS.KKO,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.KKO.decimals,\n\n    version: 4,\n  },\n  XTAG_USDC_V4: {\n    symbol: \"XTAG-USDC\",\n    name: \"XTAG-USDC V4 LP\",\n    mint: \"GCEQbLg4ik5YJ4CMcbtuVqEc4sjLdSGy34rFk1CtGjdg\",\n\n    base: MAINNET_SPL_TOKENS.XTAG,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.XTAG.decimals,\n\n    version: 4,\n  },\n  TTT_USDC_V4: {\n    symbol: \"TTT-USDC\",\n    name: \"TTT-USDC V4 LP\",\n    mint: \"84fmrerHGohoRf4iLPDQ1KG4CjSjCRksYWGzjWfCRM8a\",\n\n    base: MAINNET_SPL_TOKENS.TTT,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.TTT.decimals,\n\n    version: 4,\n  },\n  RUN_USDC_V4: {\n    symbol: \"RUN-USDC\",\n    name: \"RUN-USDC V4 LP\",\n    mint: \"CjTLvvKSQdEujcSzeZRYgk4w1DpuXBbMppLHaxZyz11Y\",\n\n    base: MAINNET_SPL_TOKENS.RUN,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.RUN.decimals,\n\n    version: 4,\n  },\n  CRWNY_USDC_V4: {\n    symbol: \"CRWNY-USDC\",\n    name: \"CRWNY-USDC V4 LP\",\n    mint: \"H3D9Gyi4frRLW6bS9vBthDVDJyzyRJ6XhhpP6PJGWaDC\",\n\n    base: MAINNET_SPL_TOKENS.CRWNY,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.CRWNY.decimals,\n\n    version: 4,\n  },\n  CRWNY_RAY_V4: {\n    symbol: \"CRWNY-RAY\",\n    name: \"CRWNY-RAY V4 LP\",\n    mint: \"5Cz9wGStNjiUg81q8t6sJJeckuT2C14CYSfyQbtYirSX\",\n\n    base: MAINNET_SPL_TOKENS.CRWNY,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.CRWNY.decimals,\n\n    version: 4,\n  },\n  BLOCK_USDC_V4: {\n    symbol: \"BLOCK-USDC\",\n    name: \"BLOCK-USDC V4 LP\",\n    mint: \"8i44Y23GkkwDYZ5iSkVEqmrXUfwNmwo9grguTDWKM8wg\",\n\n    base: MAINNET_SPL_TOKENS.BLOCK,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.BLOCK.decimals,\n\n    version: 4,\n  },\n  REAL_USDC_V4: {\n    symbol: \"REAL-USDC\",\n    name: \"REAL-USDC V4 LP\",\n    mint: \"EN43tp8xdkcM8RYSJ4msFHMPTJRXKhUteVYBDJLwTvr3\",\n\n    base: MAINNET_SPL_TOKENS.REAL,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.REAL.decimals,\n\n    version: 4,\n  },\n  FRKT_USDC_V4: {\n    symbol: \"FRKT-USDC\",\n    name: \"FRKT-USDC V4 LP\",\n    mint: \"7MgzqVTGeA4wENme81QPTrPy45NJMKVL9XGwxmNT87cG\",\n\n    base: MAINNET_SPL_TOKENS.FRKT,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.FRKT.decimals,\n\n    version: 4,\n  },\n  MBS_USDC_V4: {\n    symbol: \"MBS-USDC\",\n    name: \"MBS-USDC V4 LP\",\n    mint: \"BAgSWaPZpsQKyZJdvB5KyvmCNj6hzczzentt5FhDCVHb\",\n\n    base: MAINNET_SPL_TOKENS.MBS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.MBS.decimals,\n\n    version: 4,\n  },\n  PRISM_USDC_V4: {\n    symbol: \"PRISM-USDC\",\n    name: \"PRISM-USDC V4 LP\",\n    mint: \"3baYkTcudvSFMe25UpZcBfdp4FA5kL2E4pfaeJ8AiYJB\",\n\n    base: MAINNET_SPL_TOKENS.PRISM,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.PRISM.decimals,\n\n    version: 4,\n  },\n  CHICKS_USDC_V4: {\n    symbol: \"CHICKS-USDC\",\n    name: \"CHICKS-USDC V4 LP\",\n    mint: \"CPzmcw81a6PDasSXhVLfDRKuTJXZPUqocS9VFf5zCFhs\",\n\n    base: MAINNET_SPL_TOKENS.CHICKS,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.CHICKS.decimals,\n\n    version: 4,\n  },\n  MEAN_RAY_V4: {\n    symbol: \"MEAN-RAY\",\n    name: \"MEAN-RAY V4 LP\",\n    mint: \"H9wUyrxpAErmdNVPitpHSXgwoomoh91ggJKPWtQQoCn1\",\n\n    base: MAINNET_SPL_TOKENS.MEAN,\n    quote: MAINNET_SPL_TOKENS.RAY,\n    decimals: MAINNET_SPL_TOKENS.MEAN.decimals,\n\n    version: 4,\n  },\n  TINY_USDC_V4: {\n    symbol: \"TINY-USDC\",\n    name: \"TINY-USDC V4 LP\",\n    mint: \"Hho6ZzRDj49L4z6zog8nQZFaxMSz6FX6wNzVpMeAMen\",\n\n    base: MAINNET_SPL_TOKENS.TINY,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.TINY.decimals,\n\n    version: 4,\n  },\n  SCY_USDC_V4: {\n    symbol: \"SCY-USDC\",\n    name: \"SCY-USDC V4 LP\",\n    mint: \"EcYk7t6Vw59HDnY2u6H1KDPkk8juMeA1NpGpHiGk1LDf\",\n\n    base: MAINNET_SPL_TOKENS.SCY,\n    quote: MAINNET_SPL_TOKENS.USDC,\n    decimals: MAINNET_SPL_TOKENS.SCY.decimals,\n\n    version: 4,\n  },\n};\n","import { WSOL } from \"./sol\";\nimport { LpTokens, SplTokens } from \"./type\";\n\nexport const DEVNET_SPL_TOKENS: SplTokens = {\n  WSOL: { ...WSOL },\n};\n\nexport const DEVNET_LP_TOKENS: LpTokens = {\n};\n","import { WSOL } from \"./sol\";\nimport { LpTokens, SplTokens } from \"./type\";\n\nexport const TESTNET_SPL_TOKENS: SplTokens = {\n  WSOL: { ...WSOL },\n};\n\nexport const TESTNET_LP_TOKENS: LpTokens = {\n};\n","import { Logger } from \"../common\";\n\nimport { LpTokenInfo, SplTokenInfo } from \"./type\";\n\nconst logger = Logger.from(\"token/util\");\n\n/**\n * Token list\n */\nexport class TokenList {\n  constructor(private tokenList: (SplTokenInfo | LpTokenInfo)[]) {}\n\n  /**\n   * Filter token by mint of token list.\n   *\n   * @param mint - Token's mint address\n   */\n  filterByMint = (mint: string) => {\n    return this.tokenList.filter((token) => token.mint === mint);\n  };\n\n  /**\n   * Filter unique token by mint of token list, must and can only have one result.\n   */\n  filterUniqueByMint = <T extends \"all\" | \"spl\" | \"lp\">(mint: string, tokenType: T | \"all\" | \"spl\" | \"lp\" = \"all\") => {\n    const result = this.tokenList.filter((token) => token.mint === mint);\n\n    if (result.length === 0) {\n      return logger.throwArgumentError(`No token found`, \"mint\", mint);\n    } else if (result.length > 1) {\n      return logger.throwArgumentError(`Multiple tokens found: ${result.length}`, \"mint\", mint);\n    }\n\n    const token = result[0];\n\n    if (tokenType === \"spl\" && \"version\" in token) {\n      return logger.throwArgumentError(\"invalid SPL token mint\", \"mint\", mint);\n    } else if (tokenType === \"lp\" && !(\"version\" in token)) {\n      return logger.throwArgumentError(\"invalid LP token mint\", \"mint\", mint);\n    }\n\n    return token as T extends \"all\" ? SplTokenInfo | LpTokenInfo : T extends \"spl\" ? SplTokenInfo : LpTokenInfo;\n  };\n\n  /**\n   * Get list of token list\n   */\n  getList = () => {\n    return this.tokenList;\n  };\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { PublicKeyish, validateAndParsePublicKey } from \"../common\";\nimport { SOL, WSOL } from \"../token\";\n\n/**\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\n *\n * The only instance of the base class `Currency` is SOL.\n */\nexport class Currency {\n  public readonly symbol?: string;\n  public readonly name?: string;\n\n  public readonly decimals: number;\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly SOL: Currency = new Currency(SOL.decimals, SOL.symbol, SOL.name);\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\n   * @param decimals - decimals of the currency\n   * @param symbol - symbol of the currency\n   * @param name - name of the currency\n   */\n  public constructor(decimals: number, symbol = \"UNKNOWN\", name = \"UNKNOWN\") {\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n}\n\nexport function inspectCurrency() {\n  // @ts-ignore\n  Currency.prototype.inspect = function () {\n    return `<Currency: decimals=${this.decimals}, name=${this.name}, symbol=${this.symbol}>`;\n  };\n}\n\n/**\n * Represents an SPL token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly mint: PublicKey;\n\n  /**\n   * The only instance of the base class `Token`.\n   */\n  public static readonly WSOL: Token = new Token(WSOL.mint, WSOL.decimals, SOL.symbol, SOL.name);\n\n  public constructor(mint: PublicKeyish, decimals: number, symbol = \"UNKNOWN\", name = \"UNKNOWN\") {\n    super(decimals, symbol, name);\n\n    this.mint = validateAndParsePublicKey(mint);\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same mint address.\n   * @param other - other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n    return this.mint.equals(other.mint);\n  }\n}\n\nexport function inspectToken() {\n  // @ts-ignore\n  Token.prototype.inspect = function () {\n    return `<Token: mint=${this.mint.toBase58()}, decimals=${this.decimals}, name=${this.name}, symbol=${\n      this.symbol\n    }>`;\n  };\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n","import _Big from \"big.js\";\nimport BN from \"bn.js\";\nimport _Decimal from \"decimal.js-light\";\n\nimport { Logger } from \"../common\";\n\nimport { BigNumberish, parseBigNumberish } from \"./bignumber\";\nimport { ONE, Rounding } from \"./constant\";\nimport toFormat, { WrappedBig } from \"./to-format\";\n\nconst logger = Logger.from(\"entity/fraction\");\n\nconst Big = toFormat(_Big);\ntype Big = WrappedBig;\n\nconst Decimal = toFormat(_Decimal);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: Big.roundDown,\n  [Rounding.ROUND_HALF_UP]: Big.roundHalfUp,\n  [Rounding.ROUND_UP]: Big.roundUp,\n};\n\nexport class Fraction {\n  public readonly numerator: BN;\n  public readonly denominator: BN;\n\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = ONE) {\n    this.numerator = parseBigNumberish(numerator);\n    this.denominator = parseBigNumberish(denominator);\n  }\n\n  // performs floor division\n  public get quotient() {\n    return this.numerator.div(this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  // +\n  public add(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  // -\n  public sub(other: Fraction | BigNumberish): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\n      this.denominator.mul(otherParsed.denominator),\n    );\n  }\n\n  // ×\n  public mul(other: Fraction | BigNumberish) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\n  }\n\n  // ÷\n  public div(other: Fraction | BigNumberish) {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\n\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    logger.assert(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    logger.assert(significantDigits > 0, `${significantDigits} is not positive.`);\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    logger.assert(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    logger.assert(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n}\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\nimport _toFarmat from \"toformat\";\n\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\ninterface FormatOptions {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  groupSize?: number;\n  fractionGroupSeparator?: string;\n  fractionGroupSize?: number;\n}\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\n  new (value: BigSource): WrappedBig;\n  (value: BigSource): WrappedBig;\n  (): WrappedBigConstructor;\n\n  format: FormatOptions;\n}\nexport interface WrappedBig extends Big {\n  add(n: BigSource): WrappedBig;\n  abs(): WrappedBig;\n  div(n: BigSource): WrappedBig;\n  minus(n: BigSource): WrappedBig;\n  mod(n: BigSource): WrappedBig;\n  mul(n: BigSource): WrappedBig;\n  plus(n: BigSource): WrappedBig;\n  pow(exp: number): WrappedBig;\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\n  sqrt(): WrappedBig;\n  sub(n: BigSource): WrappedBig;\n  times(n: BigSource): WrappedBig;\n  toFormat(): string;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\ntype DecimalConstructor = typeof Decimal;\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\n  new (value: Numeric): WrappedDecimal;\n  clone(config?: Config): WrappedDecimalConstructor;\n  config(config: Config): WrappedDecimal;\n  set(config: Config): WrappedDecimal;\n  format: FormatOptions;\n}\nexport interface WrappedDecimal extends Decimal {\n  absoluteValue(): WrappedDecimal;\n  abs(): WrappedDecimal;\n  dividedBy(y: Numeric): WrappedDecimal;\n  div(y: Numeric): WrappedDecimal;\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\n  idiv(y: Numeric): WrappedDecimal;\n  logarithm(base?: Numeric): WrappedDecimal;\n  log(base?: Numeric): WrappedDecimal;\n  minus(y: Numeric): WrappedDecimal;\n  sub(y: Numeric): WrappedDecimal;\n  modulo(y: Numeric): WrappedDecimal;\n  mod(y: Numeric): WrappedDecimal;\n  naturalExponetial(): WrappedDecimal;\n  exp(): WrappedDecimal;\n  naturalLogarithm(): WrappedDecimal;\n  ln(): WrappedDecimal;\n  negated(): WrappedDecimal;\n  neg(): WrappedDecimal;\n  plus(y: Numeric): WrappedDecimal;\n  add(y: Numeric): WrappedDecimal;\n  squareRoot(): WrappedDecimal;\n  sqrt(): WrappedDecimal;\n  times(y: Numeric): WrappedDecimal;\n  mul(y: Numeric): WrappedDecimal;\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\n  todp(dp?: number, rm?: number): WrappedDecimal;\n  toInteger(): WrappedDecimal;\n  toint(): WrappedDecimal;\n  toPower(y: Numeric): WrappedDecimal;\n  pow(y: Numeric): WrappedDecimal;\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\n  tosd(sd?: number, rm?: number): WrappedDecimal;\n  toFormat(options: FormatOptions): string;\n  toFormat(fractionLength: number): string;\n  toFormat(fractionLength: number, options: FormatOptions): string;\n  toFormat(fractionLength: number, missionUnknown: number): string;\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\n}\n\nconst toFormat: {\n  (fn: BigConstructor): WrappedBigConstructor;\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\n} = _toFarmat;\nexport default toFormat;\n","import { _100, Rounding } from \"./constant\";\nimport { Fraction } from \"./fraction\";\n\nexport const _100_PERCENT = new Fraction(_100);\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding) {\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding) {\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { Logger } from \"../common\";\n\nimport { BigNumberish, tenExponentiate } from \"./bignumber\";\nimport { Rounding } from \"./constant\";\nimport { Currency, currencyEquals } from \"./currency\";\nimport { Fraction } from \"./fraction\";\n\nconst logger = Logger.from(\"entity/price\");\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency; // input i.e. denominator\n  public readonly quoteCurrency: Currency; // output i.e. numerator\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n  public readonly scalar: Fraction;\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(\n    baseCurrency: Currency,\n    denominator: BigNumberish,\n    quoteCurrency: Currency,\n    numerator: BigNumberish,\n  ) {\n    super(numerator, denominator);\n\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(tenExponentiate(baseCurrency.decimals), tenExponentiate(quoteCurrency.decimals));\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  public get adjusted(): Fraction {\n    return super.mul(this.scalar);\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.numerator, this.baseCurrency, this.denominator);\n  }\n\n  public mul(other: Price): Price {\n    logger.assert(currencyEquals(this.quoteCurrency, other.baseCurrency), \"mul currency not equals\");\n\n    const fraction = super.mul(other);\n    return new Price(this.baseCurrency, fraction.denominator, other.quoteCurrency, fraction.numerator);\n  }\n\n  public toSignificant(significantDigits = this.quoteCurrency.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces = this.quoteCurrency.decimals, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import { PublicKey, SystemProgram } from \"@solana/web3.js\";\n\nimport { Logger } from \"./logger\";\n\nconst logger = Logger.from(\"common/pubkey\");\n\n/* ================= global public keys ================= */\nexport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nexport { SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\n\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\nexport const MEMO_PROGRAM_ID = new PublicKey(\"Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo\");\nexport const RENT_PROGRAM_ID = new PublicKey('SysvarRent111111111111111111111111111111111')\nexport const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')\n\n/* ================= validate public key ================= */\nexport type PublicKeyish = PublicKey | string;\n\nexport function validateAndParsePublicKey(publicKey: PublicKeyish) {\n  if (publicKey instanceof PublicKey) {\n    return publicKey;\n  }\n\n  if (typeof publicKey === \"string\") {\n    try {\n      const key = new PublicKey(publicKey);\n      return key;\n    } catch {\n      return logger.throwArgumentError(\"invalid public key\", \"publicKey\", publicKey);\n    }\n  }\n\n  return logger.throwArgumentError(\"invalid public key\", \"publicKey\", publicKey);\n}\n\nexport function findProgramAddress(seeds: Array<Buffer | Uint8Array>, programId: PublicKey) {\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\n  return { publicKey, nonce };\n}\n\nexport function AccountMeta(publicKey: PublicKey, isSigner: boolean) {\n  return {\n    pubkey: publicKey,\n    isWritable: true,\n    isSigner,\n  };\n}\n\nexport function AccountMetaReadonly(publicKey: PublicKey, isSigner: boolean) {\n  return {\n    pubkey: publicKey,\n    isWritable: false,\n    isSigner,\n  };\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { version } from \"../version\";\n\n// https://github.com/DABH/colors.js\nimport \"@colors/colors\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [name: string]: number } = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };\nconst _moduleLogLevel: { [name: string]: number } = {};\n\nlet _globalLogger: Logger;\n\nfunction _checkNormalize(): string {\n  try {\n    const missing: Array<string> = [];\n\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      return error.message;\n    }\n  }\n\n  return \"\";\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n  DEBUG = \"DEBUG\",\n  INFO = \"INFO\",\n  WARNING = \"WARNING\",\n  ERROR = \"ERROR\",\n  OFF = \"OFF\",\n}\n\nexport enum ErrorCode {\n  ///////////////////\n  // Generic Errors\n\n  // Unknown Error\n  UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n  // Not Implemented\n  NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n  // Unsupported Operation\n  //   - operation\n  UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  NETWORK_ERROR = \"NETWORK_ERROR\",\n\n  // Some sort of bad response from the server\n  RPC_ERROR = \"RPC_ERROR\",\n\n  // Timeout\n  TIMEOUT = \"TIMEOUT\",\n\n  ///////////////////\n  // Operational  Errors\n\n  // Buffer Overrun\n  BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n  ///////////////////\n  // Argument Errors\n\n  // Missing new operator to an object\n  //  - name: The name of the class\n  MISSING_NEW = \"MISSING_NEW\",\n\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n  ///////////////////\n  // Blockchain Errors\n\n  // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n}\n\nconst HEX = \"0123456789abcdef\";\n\nfunction perfectDisplay(value: any, deeping = false) {\n  let _value = value;\n\n  try {\n    if (value instanceof Uint8Array) {\n      let hex = \"\";\n      for (let i = 0; i < value.length; i++) {\n        hex += HEX[value[i] >> 4];\n        hex += HEX[value[i] & 0x0f];\n      }\n      _value = `Uint8Array(0x${hex})`;\n    } else if (value instanceof PublicKey) {\n      _value = `PublicKey(${value.toBase58()})`;\n    } else if (value instanceof Object && !deeping) {\n      const obj = {};\n      Object.entries(value).forEach(([k, v]) => {\n        obj[k] = perfectDisplay(v, true);\n      });\n      _value = JSON.stringify(obj);\n    } else if (!deeping) {\n      _value = JSON.stringify(value);\n    }\n  } catch (error) {\n    _value = JSON.stringify(value.toString());\n  }\n\n  return _value;\n}\n\nexport class Logger {\n  readonly version: string = version;\n  readonly moduleName: string;\n\n  static errors = ErrorCode;\n\n  static levels = LogLevel;\n\n  constructor(moduleName: string) {\n    this.moduleName = moduleName;\n  }\n\n  _log(logLevel: LogLevel, args: Array<any>): void {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    const _logLevel = _moduleLogLevel[this.moduleName] || LogLevels[\"default\"];\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log(...args);\n  }\n\n  debug(...args: Array<any>): void {\n    this._log(Logger.levels.DEBUG, [\"[DEBUG]\".blue, ...args]);\n  }\n\n  info(...args: Array<any>): void {\n    this._log(Logger.levels.INFO, [\"[INFO]\".green, ...args]);\n  }\n\n  warn(...args: Array<any>): void {\n    this._log(Logger.levels.WARNING, [\"[WARN]\".yellow, ...args]);\n  }\n\n  makeError(message: string, code?: ErrorCode, params?: any): Error {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails: Array<string> = [];\n    Object.entries(params).forEach(([key, value]) => {\n      messageDetails.push(`${key}=${perfectDisplay(value)})`);\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`module=${this.moduleName}`);\n    messageDetails.push(`version=${this.version}`);\n\n    const reason = message;\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n\n    // @TODO: Any??\n    const error: any = new Error(message);\n    error.reason = reason;\n    error.code = code;\n\n    Object.entries(params).forEach(([key, value]) => {\n      error[key] = value;\n    });\n\n    return error;\n  }\n\n  throwError(message: string, code?: ErrorCode, params?: any): never {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message: string, name: string, value: any): never {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value,\n    });\n  }\n\n  assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n    if (condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition: any, message: string, name: string, value: any): void {\n    if (condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message?: string): void {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError,\n      });\n    }\n  }\n\n  checkSafeUint53(value: number, message?: string): void {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value,\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value,\n      });\n    }\n  }\n\n  checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count,\n        expectedCount,\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count,\n        expectedCount,\n      });\n    }\n  }\n\n  checkNew(target: any, kind: any): void {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n    }\n  }\n\n  checkAbstract(target: any, kind: any): void {\n    if (target === kind) {\n      this.throwError(\n        \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n        Logger.errors.UNSUPPORTED_OPERATION,\n        { name: target.name, operation: \"new\" },\n      );\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n    }\n  }\n\n  static globalLogger(): Logger {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship: boolean, permanent?: boolean): void {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\",\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\",\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(moduleName: string, logLevel: \"DEBUG\" | \"INFO\" | \"WARNING\" | \"ERROR\" | \"OFF\"): void {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _moduleLogLevel[moduleName] = level;\n  }\n\n  static from(version: string): Logger {\n    return new Logger(version);\n  }\n}\n","export const version = \"1.1.0-beta.6\";\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nexport function inspectPublicKey() {\n  // @ts-ignore\n  PublicKey.prototype.inspect = function () {\n    return `<PublicKey: ${this.toString()}>`;\n  };\n}\n\nexport function inspectBN() {\n  // @ts-ignore\n  BN.prototype.inspect = function () {\n    // @ts-ignore\n    return `<${this.red ? \"BN-R\" : \"BN\"}: ${this.toString()}>`;\n  };\n}\n\nexport function inspectAll() {\n  inspectPublicKey();\n  inspectBN();\n}\n","/**\n * https://youmightnotneed.com/lodash/\n */\n\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\n  const tmp = [...arr];\n  if (chunkSize <= 0) return cache;\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\n  return cache;\n}\n\nexport function intersection<T>(arr: T[], ...args: T[][]) {\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\n}\n\nexport function xor<T>(arr: T[], ...args: T[][]) {\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\n}\n\nexport function uniq<T>(arr: T[]) {\n  return [...new Set(arr)];\n}\n","// import BN from 'bn.js';\n\n// import { Spl, SPL_ACCOUNT_LAYOUT } from '../spl';\n// import { TOKEN_PROGRAM_ID } from './id';\n\nimport {\n  AccountInfo, Commitment, Connection, Keypair, PublicKey, Signer, SimulatedTransactionResponse, Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport { chunkArray } from \"./lodash\";\nimport { Logger } from \"./logger\";\n\nconst logger = Logger.from(\"common/web3\");\n\ninterface MultipleAccountsJsonRpcResponse {\n  jsonrpc: string;\n  id: string;\n  error?: {\n    code: number;\n    message: string;\n  };\n  result: {\n    context: { slot: number };\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\n  };\n}\n\nexport interface GetMultipleAccountsInfoConfig {\n  batchRequest?: boolean;\n  commitment?: Commitment;\n}\n\n// export async function batchGetMultipleAccountsInfo() {}\n\nexport async function getMultipleAccountsInfo(\n  connection: Connection,\n  publicKeys: PublicKey[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  const { batchRequest, commitment } = {\n    // default\n    ...{\n      batchRequest: false,\n    },\n    // custom\n    ...config,\n  };\n\n  const chunkedKeys = chunkArray(publicKeys, 100);\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\n\n  if (batchRequest) {\n    const batch = chunkedKeys.map((keys) => {\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\n      return {\n        methodName: \"getMultipleAccounts\",\n        args,\n      };\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await connection._rpcBatchRequest(batch);\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\n      if (unsafeRes.error) {\n        return logger.throwError(\"failed to get info for multiple accounts\", Logger.errors.RPC_ERROR, {\n          message: unsafeRes.error.message,\n        });\n      }\n\n      return unsafeRes.result.value.map((accountInfo) => {\n        if (accountInfo) {\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\n\n          if (data.length !== 2 && data[1] !== \"base64\") {\n            return logger.throwError(\"info must be base64 encoded\", Logger.errors.RPC_ERROR);\n          }\n\n          return {\n            data: Buffer.from(data[0], \"base64\"),\n            executable,\n            lamports,\n            owner: new PublicKey(owner),\n            rentEpoch,\n          };\n        } else {\n          return null;\n        }\n      });\n    });\n  } else {\n    try {\n      results = (await Promise.all(\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\n      )) as (AccountInfo<Buffer> | null)[][];\n    } catch (error) {\n      if (error instanceof Error) {\n        return logger.throwError(\"failed to get info for multiple accounts\", Logger.errors.RPC_ERROR, {\n          message: error.message,\n        });\n      }\n    }\n  }\n\n  return results.flat();\n}\n\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\n  connection: Connection,\n  publicKeysWithCustomFlag: T[],\n  config?: GetMultipleAccountsInfoConfig,\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\n    connection,\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\n    config,\n  );\n\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\n}\n\nexport interface GetTokenAccountsByOwnerConfig {\n  commitment?: Commitment;\n}\n\n// export async function getTokenAccountsByOwner(\n//   connection: Connection,\n//   owner: PublicKey,\n//   config?: GetTokenAccountsByOwnerConfig\n// ) {\n//   const defaultConfig = {};\n//   const customConfig = { ...defaultConfig, ...config };\n\n//   const solReq = connection.getAccountInfo(owner, customConfig.commitment);\n//   const tokenReq = connection.getTokenAccountsByOwner(\n//     owner,\n//     {\n//       programId: TOKEN_PROGRAM_ID\n//     },\n//     customConfig.commitment\n//   );\n\n//   const [solResp, tokenResp] = await Promise.all([solReq, tokenReq]);\n\n//   const accounts: {\n//     publicKey?: PublicKey;\n//     mint?: PublicKey;\n//     isAssociated?: boolean;\n//     amount: BN;\n//     isNative: boolean;\n//   }[] = [];\n\n//   for (const { pubkey, account } of tokenResp.value) {\n//     // double check layout length\n//     if (account.data.length !== SPL_ACCOUNT_LAYOUT.span) {\n//       return logger.throwArgumentError('invalid token account layout length', 'publicKey', pubkey);\n//     }\n\n//     const { mint, amount } = SPL_ACCOUNT_LAYOUT.decode(account.data);\n//     const associatedTokenAddress = await Spl.getAssociatedTokenAddress({ mint, owner });\n\n//     accounts.push({\n//       publicKey: pubkey,\n//       mint,\n//       isAssociated: associatedTokenAddress.equals(pubkey),\n//       amount,\n//       isNative: false\n//     });\n//   }\n\n//   if (solResp) {\n//     accounts.push({\n//       amount: new BN(solResp.lamports),\n//       isNative: true\n//     });\n//   }\n\n//   return accounts;\n// }\n\n/**\n * Forecast transaction size\n */\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]) {\n  if (instructions.length < 1) {\n    return logger.throwArgumentError(\"no instructions provided\", \"instructions\", instructions);\n  }\n  if (signers.length < 1) {\n    return logger.throwArgumentError(\"no signers provided\", \"signers\", signers);\n  }\n\n  const transaction = new Transaction({\n    recentBlockhash: \"11111111111111111111111111111111\",\n    feePayer: signers[0],\n  });\n\n  transaction.add(...instructions);\n\n  try {\n    transaction.serialize({ verifySignatures: false });\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Simulates multiple instruction\n */\nexport async function simulateMultipleInstruction(\n  connection: Connection,\n  instructions: TransactionInstruction[],\n  keyword: string,\n  batchRequest = true\n) {\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\n\n  const transactions: Transaction[] = [];\n\n  let transaction = new Transaction();\n  transaction.feePayer = feePayer\n\n  for (const instruction of instructions) {\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\n      transactions.push(transaction);\n      transaction = new Transaction();\n      transaction.feePayer = feePayer\n    }\n    transaction.add(instruction);\n  }\n  if (transaction.instructions.length > 0) {\n    transactions.push(transaction);\n  }\n\n  let results: SimulatedTransactionResponse[] = [];\n\n  try {\n    results = await simulateTransaction(connection, transactions, batchRequest)\n    if (results.find(i => i.err !== null)) throw Error('rpc simulateTransaction error')\n  } catch (error) {\n    if (error instanceof Error) {\n      return logger.throwError(\"failed to simulate for instructions\", Logger.errors.RPC_ERROR, {\n        message: error.message,\n      });\n    }\n  }\n\n  const logs: string[] = [];\n  for (const result of results) {\n    logger.debug(\"simulate result:\", result);\n\n    if (result.logs) {\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\n      logger.debug(\"filteredLog:\", logs);\n\n      logger.assertArgument(filteredLog.length !== 0, \"simulate log not match keyword\", \"keyword\", keyword);\n\n      logs.push(...filteredLog);\n    }\n  }\n\n  return logs;\n}\n\nexport function parseSimulateLogToJson(log: string, keyword: string) {\n  const results = log.match(/{[\"\\w:,]+}/g);\n  if (!results || results.length !== 1) {\n    return logger.throwArgumentError(\"simulate log fail to match json\", \"keyword\", keyword);\n  }\n\n  return results[0];\n}\n\nexport function parseSimulateValue(log: string, key: string) {\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\n\n  const results = reg.exec(log);\n  if (!results || results.length !== 2) {\n    return logger.throwArgumentError(\"simulate log fail to match key\", \"key\", key);\n  }\n\n  return results[1];\n}\n\nexport async function simulateTransaction(connection: Connection, transactions: Transaction[], batchRequest?: boolean) {\n  let results: any[] = []\n  if (batchRequest) {\n    const getLatestBlockhash = await connection.getLatestBlockhash()\n\n    const encodedTransactions: string[] = []\n    for (const transaction of transactions) {\n      transaction.recentBlockhash = getLatestBlockhash.blockhash\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const message = transaction._compile();\n      const signData = message.serialize();\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      const wireTransaction = transaction._serialize(signData);\n      const encodedTransaction = wireTransaction.toString('base64');\n\n      encodedTransactions.push(encodedTransaction)\n    }\n\n    const batch = encodedTransactions.map((keys) => {\n      const args = connection._buildArgs([keys], undefined, \"base64\");\n      return {\n        methodName: \"simulateTransaction\",\n        args,\n      };\n    });\n\n    const reqData: { methodName: string; args: any[]; }[][] = []\n    const itemReqIndex = 20\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex))\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    results = await (await Promise.all(reqData.map(async (i) => (await connection._rpcBatchRequest(i)).map(ii => ii.result.value)))).flat()\n  } else {\n    try {\n      results = (await Promise.all(\n        transactions.map(async (transaction) =>\n          await (await connection.simulateTransaction(transaction)).value\n        )));\n    } catch (error) {\n      if (error instanceof Error) {\n        return logger.throwError(\"failed to get info for multiple accounts\", Logger.errors.RPC_ERROR, {\n          message: error.message,\n        });\n      }\n    }\n  }\n\n  return results\n}\n\nexport function splitTxAndSigners({ instructions, signers, payer }: {\n  instructions: TransactionInstruction[],\n  signers: (Signer | Keypair)[],\n  payer: PublicKey\n}) {\n  const signerKey: { [key: string]: Signer } = {}\n  for (const item of signers) signerKey[item.publicKey.toString()] = item\n\n  const transactions: { transaction: Transaction, signer: (Keypair | Signer)[] }[] = []\n\n  let itemIns: TransactionInstruction[] = []\n\n  for (const item of instructions) {\n    const _itemIns = [...itemIns, item]\n    const _signerStrs = new Set<string>(_itemIns.map(i => i.keys.filter(ii => ii.isSigner).map(ii => ii.pubkey.toString())).flat())\n    const _signer = [..._signerStrs.values()].map(i => new PublicKey(i))\n\n    if (forecastTransactionSize(_itemIns, [payer, ..._signer])) {\n      itemIns.push(item)\n    } else {\n      transactions.push({\n        transaction: new Transaction().add(...itemIns),\n        signer: [..._signerStrs.values()].map(i => signerKey[i]).filter(i => i !== undefined)\n      })\n\n      itemIns = [item]\n    }\n  }\n\n  if (itemIns.length > 0) {\n    const _signerStrs = new Set<string>(itemIns.map(i => i.keys.filter(ii => ii.isSigner).map(ii => ii.pubkey.toString())).flat())\n    transactions.push({\n      transaction: new Transaction().add(...itemIns),\n      signer: [..._signerStrs.values()].map(i => signerKey[i]).filter(i => i !== undefined)\n    })\n  }\n\n  return transactions\n}","export function u16ToBytes(num: number) {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setUint16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function i16ToBytes(num: number) {\n  const arr = new ArrayBuffer(2);\n  const view = new DataView(arr);\n  view.setInt16(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function u32ToBytes(num: number) {\n  const arr = new ArrayBuffer(4);\n  const view = new DataView(arr);\n  view.setUint32(0, num, false);\n  return new Uint8Array(arr);\n}\n\nexport function i32ToBytes(num: number) {\n  const arr = new ArrayBuffer(4);\n  const view = new DataView(arr);\n  view.setInt32(0, num, false);\n  return new Uint8Array(arr);\n}\n","import { blob, bool, i128, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"../marshmallow\";\n\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\n\nexport const AmmConfigLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  u16(\"index\"),\n  publicKey(\"\"),\n  u32(\"protocolFeeRate\"),\n  u32(\"tradeFeeRate\"),\n  u16(\"tickSpacing\"),\n  u32(\"fundFeeRate\"),\n  seq(u32(), 1, \"padding\"),\n  publicKey(\"fundOwner\"),\n  seq(u64(), 3, \"padding\"),\n]);\n\nexport const ObservationLayout = struct([\n  u32(\"blockTimestamp\"),\n  u128(\"sqrtPriceX64\"),\n  u128(\"cumulativeTimePriceX64\"),\n  seq(u128(), 1, \"\"),\n]);\nexport const ObservationInfoLayout = struct([\n  blob(8),\n  bool(\"initialized\"),\n  publicKey(\"poolId\"),\n  seq(ObservationLayout, 1000, \"observations\"),\n  seq(u128(), 5, \"\"),\n]);\n\nexport const RewardInfo = struct([\n  u8(\"rewardState\"),\n  u64(\"openTime\"),\n  u64(\"endTime\"),\n  u64(\"lastUpdateTime\"),\n  u128(\"emissionsPerSecondX64\"),\n  u64(\"rewardTotalEmissioned\"),\n  u64(\"rewardClaimed\"),\n  publicKey(\"tokenMint\"),\n  publicKey(\"tokenVault\"),\n  publicKey(\"creator\"),\n  u128(\"rewardGrowthGlobalX64\"),\n]);\nexport const PoolInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"ammConfig\"),\n  publicKey(\"creator\"),\n  publicKey(\"mintA\"),\n  publicKey(\"mintB\"),\n  publicKey(\"vaultA\"),\n  publicKey(\"vaultB\"),\n  publicKey(\"observationId\"),\n  u8(\"mintDecimalsA\"),\n  u8(\"mintDecimalsB\"),\n  u16(\"tickSpacing\"),\n  u128(\"liquidity\"),\n  u128(\"sqrtPriceX64\"),\n  s32(\"tickCurrent\"),\n  u16(\"observationIndex\"),\n  u16(\"observationUpdateDuration\"),\n  u128(\"feeGrowthGlobalX64A\"),\n  u128(\"feeGrowthGlobalX64B\"),\n  u64(\"protocolFeesTokenA\"),\n  u64(\"protocolFeesTokenB\"),\n\n  u128(\"swapInAmountTokenA\"),\n  u128(\"swapOutAmountTokenB\"),\n  u128(\"swapInAmountTokenB\"),\n  u128(\"swapOutAmountTokenA\"),\n\n  u8(\"status\"),\n\n  seq(u8(), 7, \"\"),\n\n  seq(RewardInfo, 3, \"rewardInfos\"),\n  seq(u64(), 16, 'tickArrayBitmap'),\n\n  u64(\"totalFeesTokenA\"),\n  u64(\"totalFeesClaimedTokenA\"),\n  u64(\"totalFeesTokenB\"),\n  u64(\"totalFeesClaimedTokenB\"),\n\n  u64(\"fundFeesTokenA\"),\n  u64(\"fundFeesTokenB\"),\n\n  seq(u64(), 15 * 4 - 2, \"padding\"),\n]);\n\nexport const PositionRewardInfoLayout = struct([\n  u128(\"growthInsideLastX64\"),\n  u64(\"rewardAmountOwed\"),\n]);\nexport const PositionInfoLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey(\"nftMint\"),\n  publicKey(\"poolId\"),\n\n  s32(\"tickLower\"),\n  s32(\"tickUpper\"),\n  u128(\"liquidity\"),\n  u128(\"feeGrowthInsideLastX64A\"),\n  u128(\"feeGrowthInsideLastX64B\"),\n  u64(\"tokenFeesOwedA\"),\n  u64(\"tokenFeesOwedB\"),\n\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\n\n  seq(u64(), 8, \"\"),\n]);\n\nexport const ProtocolPositionLayout = struct([\n  blob(8),\n  u8(\"bump\"),\n  publicKey('poolId'),\n  s32(\"tickLowerIndex\"),\n  s32(\"tickUpperIndex\"),\n  u128(\"liquidity\"),\n  u128(\"feeGrowthInsideLastX64A\"),\n  u128(\"feeGrowthInsideLastX64B\"),\n  u64(\"tokenFeesOwedA\"),\n  u64(\"tokenFeesOwedB\"),\n  seq(u128(), 3, \"rewardGrowthInside\"),\n\n  seq(u64(), 8, \"\"),\n]);\n\nexport const TickLayout = struct([\n  s32(\"tick\"),\n  i128(\"liquidityNet\"),\n  u128(\"liquidityGross\"),\n  u128(\"feeGrowthOutsideX64A\"),\n  u128(\"feeGrowthOutsideX64B\"),\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\n\n  seq(u32(), 13, \"\"),\n]);\n\nexport const TickArrayLayout = struct([\n  blob(8),\n  publicKey(\"poolId\"),\n  s32(\"startTickIndex\"),\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\n  u8(\"initializedTickCount\"),\n\n  seq(u8(), 115, \"\"),\n]);\n\nexport const OperationLayout = struct([\n  blob(329),\n  seq(publicKey(), 100, \"whitelistMints\"),\n]);\n","import { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID, METADATA_PROGRAM_ID, RENT_PROGRAM_ID, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID,\n} from \"../common\";\nimport { parseBigNumberish } from \"../entity\";\nimport { bool, s32, struct, u128, u64, u8 } from \"../marshmallow\";\n\nconst anchorDataBuf = {\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\n  openPosition: [135, 128, 47, 77, 15, 152, 240, 49],\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\n  increaseLiquidity: [46, 156, 243, 118, 13, 205, 251, 178],\n  decreaseLiquidity: [160, 38, 208, 111, 104, 91, 44, 1],\n  swap: [248, 198, 158, 145, 225, 117, 135, 200],\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\n};\n\nexport function createPoolInstruction(\n  programId: PublicKey,\n  poolId: PublicKey,\n  poolCreator: PublicKey,\n  ammConfigId: PublicKey,\n  observationId: PublicKey,\n  mintA: PublicKey,\n  mintVaultA: PublicKey,\n  mintB: PublicKey,\n  mintVaultB: PublicKey,\n  sqrtPriceX64: BN\n) {\n  const dataLayout = struct([u128(\"sqrtPriceX64\")]);\n\n  const keys = [\n    { pubkey: poolCreator, isSigner: true, isWritable: true },\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: mintA, isSigner: false, isWritable: false },\n    { pubkey: mintB, isSigner: false, isWritable: false },\n    { pubkey: mintVaultA, isSigner: false, isWritable: true },\n    { pubkey: mintVaultB, isSigner: false, isWritable: true },\n    { pubkey: observationId, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      sqrtPriceX64,\n    },\n    data\n  );\n  const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function openPositionInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  poolId: PublicKey,\n  positionNftOwner: PublicKey,\n  positionNftMint: PublicKey,\n  positionNftAccount: PublicKey,\n  metadataAccount: PublicKey,\n  protocolPosition: PublicKey,\n  tickArrayLower: PublicKey,\n  tickArrayUpper: PublicKey,\n  personalPosition: PublicKey,\n  ownerTokenAccountA: PublicKey,\n  ownerTokenAccountB: PublicKey,\n  tokenVaultA: PublicKey,\n  tokenVaultB: PublicKey,\n\n  tickLowerIndex: number,\n  tickUpperIndex: number,\n  tickArrayLowerStartIndex: number,\n  tickArrayUpperStartIndex: number,\n  liquidity: BN,\n  amountMinA: BN,\n  amountMinB: BN\n) {\n  const dataLayout = struct([\n    s32(\"tickLowerIndex\"),\n    s32(\"tickUpperIndex\"),\n    s32(\"tickArrayLowerStartIndex\"),\n    s32(\"tickArrayUpperStartIndex\"),\n    u128(\"liquidity\"),\n    u64(\"amountMinA\"),\n    u64(\"amountMinB\"),\n  ]);\n\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: positionNftOwner, isSigner: false, isWritable: false },\n    { pubkey: positionNftMint, isSigner: true, isWritable: true },\n    { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n    { pubkey: metadataAccount, isSigner: false, isWritable: true },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: protocolPosition, isSigner: false, isWritable: true },\n    { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n    { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n    { pubkey: personalPosition, isSigner: false, isWritable: true },\n    { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n    { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n    { pubkey: tokenVaultA, isSigner: false, isWritable: true },\n    { pubkey: tokenVaultB, isSigner: false, isWritable: true },\n\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      tickLowerIndex,\n      tickUpperIndex,\n      tickArrayLowerStartIndex,\n      tickArrayUpperStartIndex,\n      liquidity,\n      amountMinA,\n      amountMinB,\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function closePositionInstruction(\n  programId: PublicKey,\n  positionNftOwner: PublicKey,\n  positionNftMint: PublicKey,\n  positionNftAccount: PublicKey,\n  personalPosition: PublicKey\n) {\n  const dataLayout = struct([]);\n\n  const keys = [\n    { pubkey: positionNftOwner, isSigner: true, isWritable: true },\n    { pubkey: positionNftMint, isSigner: false, isWritable: true },\n    { pubkey: positionNftAccount, isSigner: false, isWritable: true },\n    { pubkey: personalPosition, isSigner: false, isWritable: true },\n\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({}, data);\n\n  const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function increaseLiquidityInstruction(\n  programId: PublicKey,\n  positionNftOwner: PublicKey,\n  positionNftAccount: PublicKey,\n  personalPosition: PublicKey,\n\n  poolId: PublicKey,\n  protocolPosition: PublicKey,\n  tickArrayLower: PublicKey,\n  tickArrayUpper: PublicKey,\n  ownerTokenAccountA: PublicKey,\n  ownerTokenAccountB: PublicKey,\n  mintVaultA: PublicKey,\n  mintVaultB: PublicKey,\n\n  liquidity: BN,\n  amountMaxA: BN,\n  amountMaxB: BN\n) {\n  const dataLayout = struct([\n    u128(\"liquidity\"),\n    u64(\"amountMaxA\"),\n    u64(\"amountMaxB\"),\n  ]);\n\n  const keys = [\n    { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n    { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: protocolPosition, isSigner: false, isWritable: true },\n    { pubkey: personalPosition, isSigner: false, isWritable: true },\n    { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n    { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n    { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n    { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n    { pubkey: mintVaultA, isSigner: false, isWritable: true },\n    { pubkey: mintVaultB, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      liquidity,\n      amountMaxA,\n      amountMaxB,\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function decreaseLiquidityInstruction(\n  programId: PublicKey,\n  positionNftOwner: PublicKey,\n  positionNftAccount: PublicKey,\n  personalPosition: PublicKey,\n\n  poolId: PublicKey,\n  protocolPosition: PublicKey,\n  tickArrayLower: PublicKey,\n  tickArrayUpper: PublicKey,\n  ownerTokenAccountA: PublicKey,\n  ownerTokenAccountB: PublicKey,\n  mintVaultA: PublicKey,\n  mintVaultB: PublicKey,\n  rewardAccounts: {\n    poolRewardVault: PublicKey,\n    ownerRewardVault: PublicKey\n  }[],\n\n  liquidity: BN,\n  amountMinA: BN,\n  amountMinB: BN\n) {\n  const dataLayout = struct([\n    u128(\"liquidity\"),\n    u64(\"amountMinA\"),\n    u64(\"amountMinB\"),\n  ]);\n\n  const keys = [\n    { pubkey: positionNftOwner, isSigner: true, isWritable: false },\n    { pubkey: positionNftAccount, isSigner: false, isWritable: false },\n    { pubkey: personalPosition, isSigner: false, isWritable: true },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: protocolPosition, isSigner: false, isWritable: true },\n    { pubkey: mintVaultA, isSigner: false, isWritable: true },\n    { pubkey: mintVaultB, isSigner: false, isWritable: true },\n    { pubkey: tickArrayLower, isSigner: false, isWritable: true },\n    { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\n\n    { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\n    { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n    ...rewardAccounts.map(i => ([\n      { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\n      { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true }\n    ])).flat()\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      liquidity,\n      amountMinA,\n      amountMinB,\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function swapInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  poolId: PublicKey,\n  ammConfigId: PublicKey,\n  inputTokenAccount: PublicKey,\n  outputTokenAccount: PublicKey,\n  inputVault: PublicKey,\n  outputVault: PublicKey,\n  tickArray: PublicKey[],\n  observationId: PublicKey,\n\n  amount: BN,\n  otherAmountThreshold: BN,\n  sqrtPriceLimitX64: BN,\n  isBaseInput: boolean\n) {\n  const dataLayout = struct([\n    u64(\"amount\"),\n    u64(\"otherAmountThreshold\"),\n    u128(\"sqrtPriceLimitX64\"),\n    bool(\"isBaseInput\"),\n  ]);\n\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: false },\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\n\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: inputVault, isSigner: false, isWritable: true },\n    { pubkey: outputVault, isSigner: false, isWritable: true },\n\n    { pubkey: observationId, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n    ...tickArray\n      .map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      amount,\n      otherAmountThreshold,\n      sqrtPriceLimitX64,\n      isBaseInput,\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function initRewardInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  poolId: PublicKey,\n  operationId: PublicKey,\n  ammConfigId: PublicKey,\n\n  ownerTokenAccount: PublicKey,\n  rewardMint: PublicKey,\n  rewardVault: PublicKey,\n\n  openTime: number,\n  endTime: number,\n  emissionsPerSecondX64: BN\n) {\n  const dataLayout = struct([\n    u64(\"openTime\"),\n    u64(\"endTime\"),\n    u128(\"emissionsPerSecondX64\"),\n  ]);\n\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\n\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: operationId, isSigner: false, isWritable: true },\n    { pubkey: rewardMint, isSigner: false, isWritable: false },\n    { pubkey: rewardVault, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      openTime: parseBigNumberish(openTime),\n      endTime: parseBigNumberish(endTime),\n      emissionsPerSecondX64,\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function setRewardInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  poolId: PublicKey,\n  operationId: PublicKey,\n  ammConfigId: PublicKey,\n\n  ownerTokenAccount: PublicKey,\n  rewardVault: PublicKey,\n\n  rewardIndex: number,\n  openTime: number,\n  endTime: number,\n  emissionsPerSecondX64: BN\n) {\n  const dataLayout = struct([\n    u8(\"rewardIndex\"),\n    u128(\"emissionsPerSecondX64\"),\n    u64(\"openTime\"),\n    u64(\"endTime\"),\n  ]);\n\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: operationId, isSigner: false, isWritable: true },\n\n    { pubkey: rewardVault, isSigner: false, isWritable: true },\n    { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      rewardIndex,\n      emissionsPerSecondX64,\n      openTime: parseBigNumberish(openTime),\n      endTime: parseBigNumberish(endTime),\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function collectRewardInstruction(\n  programId: PublicKey,\n  payer: PublicKey,\n  poolId: PublicKey,\n\n  ownerTokenAccount: PublicKey,\n  rewardVault: PublicKey,\n\n  rewardIndex: number,\n) {\n  const dataLayout = struct([\n    u8(\"rewardIndex\"),\n  ]);\n\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: poolId, isSigner: false, isWritable: true },\n    { pubkey: rewardVault, isSigner: false, isWritable: true },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n  ];\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      rewardIndex,\n    },\n    data\n  );\n\n  const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data: aData,\n  });\n}\n\nexport function addComputations() {\n  return new TransactionInstruction({\n    programId: new PublicKey('ComputeBudget111111111111111111111111111111'),\n    data: Buffer.from([0, 128, 26, 6, 0, 0, 0, 0, 0]),\n    keys: [],\n  })\n}\n","import {\n  Connection, Keypair, PublicKey, Signer, SystemProgram, Transaction, TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nimport { Base, TokenAccount } from \"../base\";\nimport { getMultipleAccountsInfo, getMultipleAccountsInfoWithCustomFlags, Logger, splitTxAndSigners } from \"../common\";\nimport { Currency, CurrencyAmount, ONE, Percent, Price, Token, TokenAmount, ZERO } from \"../entity\";\nimport { SPL_ACCOUNT_LAYOUT } from \"../spl\";\nimport { WSOL } from \"../token\";\n\nimport {\n  addComputations, closePositionInstruction, collectRewardInstruction, createPoolInstruction,\n  decreaseLiquidityInstruction, increaseLiquidityInstruction, initRewardInstruction, openPositionInstruction,\n  setRewardInstruction, swapInstruction,\n} from \"./instrument\";\nimport { ObservationInfoLayout, OperationLayout, PoolInfoLayout, PositionInfoLayout, TickArrayLayout } from \"./layout\";\nimport { MAX_SQRT_PRICE_X64, MIN_SQRT_PRICE_X64 } from \"./utils/constants\";\nimport { LiquidityMath, MathUtil, SqrtPriceMath, TickMath } from \"./utils/math\";\nimport {\n  getATAAddress, getPdaMetadataKey, getPdaOperationAccount, getPdaPersonalPositionAddress, getPdaPoolId,\n  getPdaPoolRewardVaulId, getPdaPoolVaultId, getPdaProtocolPositionAddress, getPdaTickArrayAddress,\n} from \"./utils/pda\";\nimport { PoolUtils } from \"./utils/pool\";\nimport { PositionUtils } from \"./utils/position\";\nimport { Tick, TickArray, TickUtils } from \"./utils/tick\";\nimport { FETCH_TICKARRAY_COUNT } from \"./utils/tickQuery\";\n\nconst logger = Logger.from(\"AmmV3\");\n\nexport interface ApiAmmV3Point {\n  price: string,\n  liquidity: string\n}\n\nexport interface ApiAmmV3ConfigInfo {\n  id: string;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  tickSpacing: number;\n  fundFeeRate: number;\n  fundOwner: string;\n  description: string;\n}\nexport interface ApiAmmV3ConfigInfos { [configId: string]: ApiAmmV3ConfigInfo }\n\nexport interface AmmV3ConfigInfo {\n  id: PublicKey;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  tickSpacing: number;\n  fundFeeRate: number;\n  fundOwner: string;\n  description: string;\n}\nexport interface ApiAmmV3PoolInfo {\n  id: string\n  mintA: string\n  mintB: string\n  mintDecimalsA: number,\n  mintDecimalsB: number,\n\n  ammConfig: ApiAmmV3ConfigInfo,\n\n  day: {\n    volume: number,\n    volumeFee: number\n    feeA: number,\n    feeB: number\n    feeApr: number\n    rewardApr: {\n      A: number,\n      B: number,\n      C: number\n    }\n    apr: number\n\n    priceMin: number\n    priceMax: number\n  },\n  week: {\n    volume: number,\n    volumeFee: number\n    feeA: number,\n    feeB: number\n    feeApr: number\n    rewardApr: {\n      A: number,\n      B: number,\n      C: number\n    }\n    apr: number\n\n    priceMin: number\n    priceMax: number\n  },\n  month: {\n    volume: number,\n    volumeFee: number\n    feeA: number,\n    feeB: number\n    feeApr: number\n    rewardApr: {\n      A: number,\n      B: number,\n      C: number\n    }\n    apr: number\n\n    priceMin: number\n    priceMax: number\n  },\n\n  tvl: number\n}\n\nexport interface AmmV3PoolRewardLayoutInfo {\n  rewardState: number;\n  openTime: BN;\n  endTime: BN;\n  lastUpdateTime: BN;\n  emissionsPerSecondX64: BN;\n  rewardTotalEmissioned: BN;\n  rewardClaimed: BN;\n  tokenMint: PublicKey;\n  tokenVault: PublicKey;\n  creator: PublicKey;\n  rewardGrowthGlobalX64: BN;\n}\n\nexport interface AmmV3PoolRewardInfo {\n  rewardState: number;\n  openTime: BN;\n  endTime: BN;\n  lastUpdateTime: BN;\n  emissionsPerSecondX64: BN;\n  rewardTotalEmissioned: BN;\n  rewardClaimed: BN;\n  tokenMint: PublicKey;\n  tokenVault: PublicKey;\n  creator: PublicKey;\n  rewardGrowthGlobalX64: BN;\n  perSecond: Decimal;\n  remainingRewards: undefined | BN\n}\nexport interface AmmV3PoolInfo {\n  id: PublicKey,\n  mintA: {\n    mint: PublicKey,\n    vault: PublicKey,\n    decimals: number\n  },\n  mintB: {\n    mint: PublicKey,\n    vault: PublicKey,\n    decimals: number\n  },\n\n  ammConfig: AmmV3ConfigInfo,\n  observationId: PublicKey,\n\n  creator: PublicKey,\n  programId: PublicKey,\n  version: 6,\n\n  tickSpacing: number,\n  liquidity: BN,\n  sqrtPriceX64: BN,\n  currentPrice: Decimal,\n  tickCurrent: number,\n  observationIndex: number,\n  observationUpdateDuration: number,\n  feeGrowthGlobalX64A: BN,\n  feeGrowthGlobalX64B: BN,\n  protocolFeesTokenA: BN,\n  protocolFeesTokenB: BN,\n  swapInAmountTokenA: BN,\n  swapOutAmountTokenB: BN,\n  swapInAmountTokenB: BN,\n  swapOutAmountTokenA: BN,\n  tickArrayBitmap: BN[]\n\n  rewardInfos: AmmV3PoolRewardInfo[]\n\n  day: {\n    volume: number,\n    volumeFee: number\n    feeA: number,\n    feeB: number\n    feeApr: number\n    rewardApr: {\n      A: number,\n      B: number,\n      C: number\n    }\n    apr: number\n\n    priceMin: number\n    priceMax: number\n  },\n  week: {\n    volume: number,\n    volumeFee: number\n    feeA: number,\n    feeB: number\n    feeApr: number\n    rewardApr: {\n      A: number,\n      B: number,\n      C: number\n    }\n    apr: number\n\n    priceMin: number\n    priceMax: number\n  },\n  month: {\n    volume: number,\n    volumeFee: number\n    feeA: number,\n    feeB: number\n    feeApr: number\n    rewardApr: {\n      A: number,\n      B: number,\n      C: number\n    }\n    apr: number\n\n    priceMin: number\n    priceMax: number\n  },\n  tvl: number\n}\nexport interface AmmV3PoolPersonalPosition {\n  poolId: PublicKey,\n  nftMint: PublicKey,\n\n  priceLower: Decimal,\n  priceUpper: Decimal,\n  amountA: BN,\n  amountB: BN\n  tickLower: number\n  tickUpper: number\n  liquidity: BN\n  feeGrowthInsideLastX64A: BN\n  feeGrowthInsideLastX64B: BN\n  tokenFeesOwedA: BN\n  tokenFeesOwedB: BN\n  rewardInfos: {\n    growthInsideLastX64: BN;\n    rewardAmountOwed: BN;\n    pendingReward: BN\n  }[]\n\n  leverage: number\n  tokenFeeAmountA: BN,\n  tokenFeeAmountB: BN,\n}\n\nexport interface MintInfo {\n  mint: PublicKey,\n  decimals: number\n}\n\nexport interface ReturnTypeMakeTransaction {\n  signers: (Signer | Keypair)[],\n  transaction: Transaction,\n  address: { [name: string]: PublicKey }\n}\n\nexport interface ReturnTypeMakeCreatePoolTransaction {\n  signers: (Signer | Keypair)[],\n  transaction: Transaction,\n  mockPoolInfo: AmmV3PoolInfo\n}\nexport interface ReturnTypeMakeInstructions {\n  signers: (Signer | Keypair)[],\n  instructions: TransactionInstruction[],\n  address: { [name: string]: PublicKey }\n}\n\nexport interface ReturnTypeMakeHarvestTranscation {\n  transactions: {\n    transaction: Transaction,\n    signer: Signer[]\n  }[],\n  address: { [key: string]: PublicKey },\n}\n\nexport interface ReturnTypeGetLiquidityAmountOutFromAmountIn {\n  liquidity: BN,\n  amountSlippageA: BN,\n  amountSlippageB: BN,\n  amountA: BN,\n  amountB: BN\n}\nexport interface ReturnTypeGetAmountsFromLiquidity {\n  amountSlippageA: BN;\n  amountSlippageB: BN;\n}\nexport interface ReturnTypeGetPriceAndTick {\n  tick: number,\n  price: Decimal\n}\nexport interface ReturnTypeGetTickPrice {\n  tick: number,\n  price: Decimal,\n  tickSqrtPriceX64: BN\n}\nexport interface ReturnTypeComputeAmountOutFormat {\n  amountOut: CurrencyAmount,\n  minAmountOut: CurrencyAmount,\n  currentPrice: Price,\n  executionPrice: Price,\n  priceImpact: Percent,\n  fee: CurrencyAmount,\n  remainingAccounts: PublicKey[]\n}\nexport interface ReturnTypeComputeAmountOut {\n  amountOut: BN,\n  minAmountOut: BN,\n  currentPrice: Decimal,\n  executionPrice: Decimal,\n  priceImpact: Percent,\n  fee: BN,\n  remainingAccounts: PublicKey[]\n}\nexport interface ReturnTypeFetchMultiplePoolInfos {\n  [id: string]: {\n    state: AmmV3PoolInfo;\n    positionAccount?: AmmV3PoolPersonalPosition[] | undefined;\n  };\n}\nexport interface ReturnTypeFetchMultiplePoolTickArrays { [poolId: string]: { [key: string]: TickArray } }\n\nexport class AmmV3 extends Base {\n  // transaction\n  static async makeCreatePoolTransaction({\n    connection,\n    programId,\n    owner,\n    mint1,\n    mint2,\n    ammConfig,\n    initialPrice\n  }: {\n    connection: Connection,\n    programId: PublicKey,\n    owner: PublicKey,\n    mint1: MintInfo,\n    mint2: MintInfo,\n    ammConfig: AmmV3ConfigInfo,\n    initialPrice: Decimal\n  }): Promise<ReturnTypeMakeCreatePoolTransaction> {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const [mintA, mintB, initPrice] = mint1.mint._bn.gt(mint2.mint._bn) ? [mint2, mint1, (new Decimal(1)).div(initialPrice)] : [mint1, mint2, initialPrice];\n\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = await this.makeCreatePoolInstructions({\n      connection,\n      programId,\n      owner,\n      mintA,\n      mintB,\n      ammConfigId: ammConfig.id,\n      initialPriceX64\n    })\n\n    transaction.add(...insInfo.instructions)\n\n    return {\n      signers: insInfo.signers,\n      transaction,\n      mockPoolInfo: {\n        id: insInfo.address.poolId,\n        mintA: {\n          mint: mintA.mint,\n          vault: insInfo.address.mintAVault,\n          decimals: mintA.decimals\n        },\n        mintB: {\n          mint: mintB.mint,\n          vault: insInfo.address.mintBVault,\n          decimals: mintB.decimals\n        },\n\n        ammConfig,\n        observationId: insInfo.address.observationId,\n\n        creator: owner,\n        programId,\n        version: 6,\n\n        tickSpacing: ammConfig.tickSpacing,\n        liquidity: ZERO,\n        sqrtPriceX64: initialPriceX64,\n        currentPrice: initPrice,\n        tickCurrent: 0,\n        observationIndex: 0,\n        observationUpdateDuration: 0,\n        feeGrowthGlobalX64A: ZERO,\n        feeGrowthGlobalX64B: ZERO,\n        protocolFeesTokenA: ZERO,\n        protocolFeesTokenB: ZERO,\n        swapInAmountTokenA: ZERO,\n        swapOutAmountTokenB: ZERO,\n        swapInAmountTokenB: ZERO,\n        swapOutAmountTokenA: ZERO,\n        tickArrayBitmap: [],\n\n        rewardInfos: [],\n\n        day: { volume: 0, volumeFee: 0, feeA: 0, feeB: 0, feeApr: 0, rewardApr: { A: 0, B: 0, C: 0 }, apr: 0, priceMax: 0, priceMin: 0 },\n        week: { volume: 0, volumeFee: 0, feeA: 0, feeB: 0, feeApr: 0, rewardApr: { A: 0, B: 0, C: 0 }, apr: 0, priceMax: 0, priceMin: 0 },\n        month: { volume: 0, volumeFee: 0, feeA: 0, feeB: 0, feeApr: 0, rewardApr: { A: 0, B: 0, C: 0 }, apr: 0, priceMax: 0, priceMin: 0 },\n        tvl: 0\n      }\n    }\n  }\n\n  static async makeOpenPositionTransaction(\n    { connection, poolInfo, ownerInfo, tickLower, tickUpper, liquidity, slippage, associatedOnly = true }: {\n      connection: Connection,\n      poolInfo: AmmV3PoolInfo,\n\n      ownerInfo: {\n        feePayer: PublicKey,\n        wallet: PublicKey,\n        tokenAccounts: TokenAccount[],\n        useSOLBalance?: boolean  // if has WSOL mint (default: true)\n      },\n\n      // priceLower: Decimal,\n      // priceUpper: Decimal,\n\n      tickLower: number,\n      tickUpper: number,\n\n      liquidity: BN,\n      slippage: number\n      associatedOnly?: boolean\n    }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    // const tickLower = TickMath.getTickWithPriceAndTickspacing(\n    //   priceLower,\n    //   poolInfo.ammConfig.tickSpacing,\n    //   poolInfo.mintA.decimals,\n    //   poolInfo.mintB.decimals\n    // );\n    // const tickUpper = TickMath.getTickWithPriceAndTickspacing(\n    //   priceUpper,\n    //   poolInfo.ammConfig.tickSpacing,\n    //   poolInfo.mintA.decimals,\n    //   poolInfo.mintB.decimals\n    // );\n\n    const { amountSlippageA, amountSlippageB } =\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\n        poolInfo.sqrtPriceX64,\n        SqrtPriceMath.getSqrtPriceX64FromTick(tickLower),\n        SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper),\n        liquidity,\n        true,\n        true,\n        slippage\n      );\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.mint.equals(Token.WSOL.mint)\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.mint.equals(Token.WSOL.mint)\n    const ownerTokenAccountA = await this._selectOrCreateTokenAccount({\n      mint: poolInfo.mintA.mint,\n      tokenAccounts: mintAUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: mintAUseSOLBalance ? {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: amountSlippageA,\n\n        frontInstructions,\n        endInstructions,\n        signers\n      } : undefined,\n\n      associatedOnly: mintAUseSOLBalance ? false : associatedOnly\n    })\n\n    const ownerTokenAccountB = await this._selectOrCreateTokenAccount({\n      mint: poolInfo.mintB.mint,\n      tokenAccounts: mintBUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: mintBUseSOLBalance ? {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: amountSlippageB,\n\n        frontInstructions,\n        endInstructions,\n        signers\n      } : undefined,\n\n      associatedOnly: mintBUseSOLBalance ? false : associatedOnly\n    })\n\n    logger.assertArgument(\n      ownerTokenAccountA !== undefined && ownerTokenAccountB !== undefined,\n      \"cannot found target token accounts\",\n      \"tokenAccounts\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeOpenPositionInstructions({\n      poolInfo,\n      ownerInfo: {\n        ...ownerInfo,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!\n      },\n      tickLower,\n      tickUpper,\n      liquidity,\n      amountSlippageA,\n      amountSlippageB,\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static async makeIncreaseLiquidityTransaction({\n    connection, poolInfo, ownerPosition, ownerInfo, liquidity, slippage\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    liquidity: BN,\n    slippage: number\n  }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    const { amountSlippageA, amountSlippageB } =\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\n        poolInfo.sqrtPriceX64,\n        SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower),\n        SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper),\n        liquidity,\n        true,\n        true,\n        slippage\n      );\n    let ownerTokenAccountA: PublicKey | null\n    let ownerTokenAccountB: PublicKey | null\n    if (poolInfo.mintA.mint.equals(new PublicKey(WSOL.mint)) && ownerInfo.useSOLBalance) {\n      // mintA\n      ownerTokenAccountA = await this._handleTokenAccount({\n        connection,\n        side: \"in\",\n        amount: amountSlippageA,\n        mint: poolInfo.mintA.mint,\n        tokenAccount: null,\n        owner: ownerInfo.wallet,\n        payer: ownerInfo.feePayer,\n        frontInstructions,\n        endInstructions,\n        signers,\n        bypassAssociatedCheck: true\n      })\n    } else {\n      ownerTokenAccountA = this._selectTokenAccount({\n        tokenAccounts: ownerInfo.tokenAccounts,\n        mint: poolInfo.mintA.mint,\n        owner: ownerInfo.wallet,\n        config: { associatedOnly: false },\n      })\n    }\n    if (poolInfo.mintB.mint.equals(new PublicKey(WSOL.mint)) && ownerInfo.useSOLBalance) {\n      // mintB\n      ownerTokenAccountB = await this._handleTokenAccount({\n        connection,\n        side: \"in\",\n        amount: amountSlippageB,\n        mint: poolInfo.mintB.mint,\n        tokenAccount: null,\n        owner: ownerInfo.wallet,\n        payer: ownerInfo.feePayer,\n        frontInstructions,\n        endInstructions,\n        signers,\n        bypassAssociatedCheck: true\n      })\n    } else {\n      ownerTokenAccountB = this._selectTokenAccount({\n        tokenAccounts: ownerInfo.tokenAccounts,\n        mint: poolInfo.mintB.mint,\n        owner: ownerInfo.wallet,\n        config: { associatedOnly: false },\n      })\n    }\n\n    logger.assertArgument(\n      !!ownerTokenAccountA || !!ownerTokenAccountB,\n      \"cannot found target token accounts\",\n      \"tokenAccounts\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeIncreaseLiquidityInstructions({\n      poolInfo,\n      ownerPosition,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!\n      },\n      liquidity,\n      amountSlippageA,\n      amountSlippageB\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static async makeDecreaseLiquidityTransaction({\n    connection, poolInfo, ownerPosition, ownerInfo, liquidity, amountMinA, amountMinB, slippage, associatedOnly = true\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n      closePosition?: boolean\n    },\n\n    liquidity: BN,\n    amountMinA?: BN,\n    amountMinB?: BN,\n    slippage?: number\n    associatedOnly?: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    let _amountMinA: BN\n    let _amountMinB: BN\n    if (amountMinA !== undefined && amountMinB !== undefined) {\n      _amountMinA = amountMinA\n      _amountMinB = amountMinB\n    } else {\n      const { amountSlippageA, amountSlippageB } =\n        LiquidityMath.getAmountsFromLiquidityWithSlippage(\n          poolInfo.sqrtPriceX64,\n          SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower),\n          SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper),\n          liquidity,\n          false,\n          true,\n          slippage ?? 0\n        );\n      _amountMinA = amountSlippageA\n      _amountMinB = amountSlippageB\n    }\n\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.mint.equals(Token.WSOL.mint)\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.mint.equals(Token.WSOL.mint)\n\n    const ownerTokenAccountA = await this._selectOrCreateTokenAccount({\n      mint: poolInfo.mintA.mint,\n      tokenAccounts: mintAUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: 0,\n\n        frontInstructions,\n        signers\n      },\n\n      associatedOnly: mintAUseSOLBalance ? false : associatedOnly\n    })\n\n    const ownerTokenAccountB = await this._selectOrCreateTokenAccount({\n      mint: poolInfo.mintB.mint,\n      tokenAccounts: mintBUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: 0,\n\n        frontInstructions,\n        signers\n      },\n\n      associatedOnly: mintBUseSOLBalance ? false : associatedOnly\n    })\n\n    const rewardAccounts: PublicKey[] = []\n    for (const itemReward of poolInfo.rewardInfos) {\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.tokenMint.equals(Token.WSOL.mint)\n\n      const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n        mint: itemReward.tokenMint,\n        tokenAccounts: rewardUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n        owner: ownerInfo.wallet,\n\n        createInfo: {\n          connection,\n          payer: ownerInfo.feePayer,\n          amount: 0,\n\n          frontInstructions,\n          endInstructions: rewardUseSOLBalance ? endInstructions : [],\n          signers\n        },\n\n        associatedOnly: rewardUseSOLBalance ? false : associatedOnly\n      })\n      rewardAccounts.push(ownerRewardAccount!)\n    }\n\n    logger.assertArgument(\n      !!ownerTokenAccountA || !!ownerTokenAccountB,\n      \"cannot found target token accounts\",\n      \"tokenAccounts\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeDecreaseLiquidityInstructions({\n      poolInfo,\n      ownerPosition,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!,\n        rewardAccounts\n      },\n      liquidity,\n      amountMinA: _amountMinA,\n      amountMinB: _amountMinB\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    if (ownerInfo.closePosition) {\n      transaction.add(...(this.makeClosePositionInstructions({\n        poolInfo, ownerInfo, ownerPosition\n      })).instructions)\n    }\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static async makeSwapBaseInTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n\n    inputMint,\n    amountIn,\n    amountOutMin,\n    priceLimit,\n\n    remainingAccounts\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    inputMint: PublicKey,\n    amountIn: BN,\n    amountOutMin: BN,\n    priceLimit?: Decimal\n\n    remainingAccounts: PublicKey[]\n  }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    let sqrtPriceLimitX64: BN;\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 = inputMint.equals(poolInfo.mintA.mint)\n        ? MIN_SQRT_PRICE_X64.add(ONE)\n        : MAX_SQRT_PRICE_X64.sub(ONE);\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals\n      );\n    }\n\n    const isInputMintA = poolInfo.mintA.mint.equals(inputMint)\n\n    let ownerTokenAccountA: PublicKey | null\n    let ownerTokenAccountB: PublicKey | null\n    if (poolInfo.mintA.mint.equals(new PublicKey(WSOL.mint)) && ownerInfo.useSOLBalance) {\n      // mintA\n      ownerTokenAccountA = await this._handleTokenAccount({\n        connection,\n        side: \"in\",\n        amount: isInputMintA ? amountIn : 0,\n        mint: poolInfo.mintA.mint,\n        tokenAccount: null,\n        owner: ownerInfo.wallet,\n        payer: ownerInfo.feePayer,\n        frontInstructions,\n        endInstructions,\n        signers,\n        bypassAssociatedCheck: true\n      })\n    } else {\n      ownerTokenAccountA = this._selectTokenAccount({\n        tokenAccounts: ownerInfo.tokenAccounts,\n        mint: poolInfo.mintA.mint,\n        owner: ownerInfo.wallet,\n        config: { associatedOnly: false },\n      })\n    }\n    if (poolInfo.mintB.mint.equals(new PublicKey(WSOL.mint)) && ownerInfo.useSOLBalance) {\n      // mintB\n      ownerTokenAccountB = await this._handleTokenAccount({\n        connection,\n        side: \"in\",\n        amount: !isInputMintA ? amountIn : 0,\n        mint: poolInfo.mintB.mint,\n        tokenAccount: null,\n        owner: ownerInfo.wallet,\n        payer: ownerInfo.feePayer,\n        frontInstructions,\n        endInstructions,\n        signers,\n        bypassAssociatedCheck: true\n      })\n    } else {\n      ownerTokenAccountB = this._selectTokenAccount({\n        tokenAccounts: ownerInfo.tokenAccounts,\n        mint: poolInfo.mintB.mint,\n        owner: ownerInfo.wallet,\n        config: { associatedOnly: false },\n      })\n    }\n\n    logger.assertArgument(\n      !!ownerTokenAccountA || !!ownerTokenAccountB,\n      \"cannot found target token accounts\",\n      \"tokenAccounts\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeSwapBaseInInstructions({\n      poolInfo,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        tokenAccountA: ownerTokenAccountA!,\n        tokenAccountB: ownerTokenAccountB!\n      },\n\n      inputMint,\n\n      amountIn,\n      amountOutMin,\n      sqrtPriceLimitX64,\n\n      remainingAccounts,\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static makeCLosePositionTransaction({\n    poolInfo, ownerPosition, ownerInfo\n  }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n\n    ownerInfo: {\n      wallet: PublicKey,\n    },\n  }): ReturnTypeMakeTransaction {\n    const ins = this.makeClosePositionInstructions({ poolInfo, ownerInfo, ownerPosition })\n    const transaction = new Transaction()\n    transaction.add(...ins.instructions)\n\n    return {\n      signers: ins.signers,\n      transaction,\n      address: { ...ins.address }\n    }\n  }\n\n  static async makeInitRewardTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n    rewardInfo,\n    associatedOnly = true\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    rewardInfo: {\n      mint: PublicKey,\n      openTime: number,\n      endTime: number,\n      perSecond: Decimal,\n    }\n    associatedOnly?: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    logger.assertArgument(\n      rewardInfo.endTime > rewardInfo.openTime,\n      \"reward time error\",\n      \"rewardInfo\",\n      rewardInfo,\n    );\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(Token.WSOL.mint)\n    const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n      mint: rewardInfo.mint,\n      tokenAccounts: rewardMintUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: rewardMintUseSOLBalance ? {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: new BN(new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime)) ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0) : rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).add(1).toFixed(0)),\n\n        frontInstructions,\n        endInstructions,\n        signers\n      } : undefined,\n\n      associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly\n    })\n\n    logger.assertArgument(\n      ownerRewardAccount,\n      \"no money\",\n      \"ownerRewardAccount\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeInitRewardInstructions({\n      poolInfo,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        tokenAccount: ownerRewardAccount!\n      },\n      rewardInfo: {\n        mint: rewardInfo.mint,\n        openTime: rewardInfo.openTime,\n        endTime: rewardInfo.endTime,\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond)\n      }\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static async makeInitRewardsTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n    rewardInfos,\n    associatedOnly = true\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    rewardInfos: {\n      mint: PublicKey,\n      openTime: number,\n      endTime: number,\n      perSecond: Decimal,\n    }[],\n    associatedOnly?: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    for (const rewardInfo of rewardInfos) logger.assertArgument(rewardInfo.endTime > rewardInfo.openTime, \"reward time error\", \"rewardInfo\", rewardInfo,);\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const initInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    for (const rewardInfo of rewardInfos) {\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(Token.WSOL.mint)\n      const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n        mint: rewardInfo.mint,\n        tokenAccounts: rewardMintUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n        owner: ownerInfo.wallet,\n        createInfo: rewardMintUseSOLBalance ? {\n          connection,\n          payer: ownerInfo.feePayer,\n          amount: new BN(new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime)) ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0) : rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).add(1).toFixed(0)),\n\n          frontInstructions,\n          endInstructions,\n          signers\n        } : undefined,\n\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly\n      })\n\n      logger.assertArgument(\n        ownerRewardAccount,\n        \"no money\",\n        \"ownerRewardAccount\",\n        ownerInfo.tokenAccounts,\n      );\n\n\n      const insInfo = this.makeInitRewardInstructions({\n        poolInfo,\n        ownerInfo: {\n          wallet: ownerInfo.wallet,\n          tokenAccount: ownerRewardAccount!\n        },\n        rewardInfo: {\n          mint: rewardInfo.mint,\n          openTime: rewardInfo.openTime,\n          endTime: rewardInfo.endTime,\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond)\n        }\n      })\n      initInstructions.push(...insInfo.instructions)\n    }\n\n    transaction.add(...frontInstructions, ...initInstructions, ...endInstructions)\n\n    return {\n      signers: [...signers],\n      transaction,\n      address: {}\n    }\n  }\n\n  static async makeSetRewardTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n    rewardInfo,\n    associatedOnly = true,\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    rewardInfo: {\n      mint: PublicKey,\n      openTime: number, // If the reward is being distributed, please give 0\n      endTime: number, // If no modification is required, enter 0\n      perSecond: Decimal,\n    },\n    associatedOnly?: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    logger.assertArgument(\n      rewardInfo.endTime > rewardInfo.openTime,\n      \"reward time error\",\n      \"rewardInfo\",\n      rewardInfo,\n    );\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(Token.WSOL.mint)\n    const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n      mint: rewardInfo.mint,\n      tokenAccounts: rewardMintUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: rewardMintUseSOLBalance ? {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: new BN(new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime)) ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0) : rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).add(1).toFixed(0)),\n\n        frontInstructions,\n        endInstructions,\n        signers\n      } : undefined,\n\n      associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly\n    })\n\n    logger.assertArgument(\n      ownerRewardAccount,\n      \"no money\",\n      \"ownerRewardAccount\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeSetRewardInstructions({\n      poolInfo,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        tokenAccount: ownerRewardAccount!\n      },\n      rewardInfo: {\n        mint: rewardInfo.mint,\n        openTime: rewardInfo.openTime,\n        endTime: rewardInfo.endTime,\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond)\n      }\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static async makeSetRewardsTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n    rewardInfos,\n    associatedOnly = true,\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    rewardInfos: {\n      mint: PublicKey,\n      openTime: number, // If the reward is being distributed, please give 0\n      endTime: number, // If no modification is required, enter 0\n      perSecond: Decimal,\n    }[],\n    associatedOnly?: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const updateRewardInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    for (const rewardInfo of rewardInfos) {\n      logger.assertArgument(\n        rewardInfo.endTime > rewardInfo.openTime,\n        \"reward time error\",\n        \"rewardInfo\",\n        rewardInfo,\n      );\n\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(Token.WSOL.mint)\n      const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n        mint: rewardInfo.mint,\n        tokenAccounts: rewardMintUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n        owner: ownerInfo.wallet,\n\n        createInfo: rewardMintUseSOLBalance ? {\n          connection,\n          payer: ownerInfo.feePayer,\n          amount: new BN(new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime)) ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0) : rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).add(1).toFixed(0)),\n\n          frontInstructions,\n          endInstructions,\n          signers\n        } : undefined,\n\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly\n      })\n\n      logger.assertArgument(\n        ownerRewardAccount,\n        \"no money\",\n        \"ownerRewardAccount\",\n        ownerInfo.tokenAccounts,\n      );\n\n      const insInfo = this.makeSetRewardInstructions({\n        poolInfo,\n        ownerInfo: {\n          wallet: ownerInfo.wallet,\n          tokenAccount: ownerRewardAccount!\n        },\n        rewardInfo: {\n          mint: rewardInfo.mint,\n          openTime: rewardInfo.openTime,\n          endTime: rewardInfo.endTime,\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond)\n        }\n      })\n      updateRewardInstructions.push(...insInfo.instructions)\n    }\n\n    transaction.add(...frontInstructions, ...updateRewardInstructions, ...endInstructions)\n\n    return {\n      signers: [...signers],\n      transaction,\n      address: {}\n    }\n  }\n\n  static async makeCollectRewardTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n    rewardMint,\n    associatedOnly = true\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    rewardMint: PublicKey,\n    associatedOnly: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(Token.WSOL.mint)\n    const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n      mint: rewardMint,\n      tokenAccounts: rewardMintUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n      owner: ownerInfo.wallet,\n\n      createInfo: {\n        connection,\n        payer: ownerInfo.feePayer,\n        amount: 0,\n\n        frontInstructions,\n        endInstructions: rewardMintUseSOLBalance ? endInstructions : [],\n        signers\n      },\n\n      associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly\n    })\n\n    logger.assertArgument(\n      ownerRewardAccount,\n      \"no money\",\n      \"ownerRewardAccount\",\n      ownerInfo.tokenAccounts,\n    );\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const insInfo = this.makeCollectRewardInstructions({\n      poolInfo,\n      ownerInfo: {\n        wallet: ownerInfo.wallet,\n        tokenAccount: ownerRewardAccount!\n      },\n\n      rewardMint\n    })\n\n    transaction.add(...frontInstructions, ...insInfo.instructions, ...endInstructions)\n\n    return {\n      signers: [...signers, ...insInfo.signers],\n      transaction,\n      address: { ...insInfo.address }\n    }\n  }\n\n  static async makeCollectRewardsTransaction({\n    connection,\n    poolInfo,\n    ownerInfo,\n    rewardMints,\n    associatedOnly = true\n  }: {\n    connection: Connection\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n\n    rewardMints: PublicKey[],\n    associatedOnly: boolean\n  }): Promise<ReturnTypeMakeTransaction> {\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const iInstructions: TransactionInstruction[] = [];\n\n    const transaction = new Transaction()\n    transaction.add(addComputations())\n\n    const signers: Signer[] = []\n\n    for (const rewardMint of rewardMints) {\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(Token.WSOL.mint)\n      const ownerRewardAccount = await this._selectOrCreateTokenAccount({\n        mint: rewardMint,\n        tokenAccounts: rewardMintUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n        owner: ownerInfo.wallet,\n\n        createInfo: {\n          connection,\n          payer: ownerInfo.feePayer,\n          amount: 0,\n\n          frontInstructions,\n          endInstructions: rewardMintUseSOLBalance ? endInstructions : [],\n          signers\n        },\n\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly\n      })\n\n      logger.assertArgument(\n        ownerRewardAccount,\n        \"no money\",\n        \"ownerRewardAccount\",\n        ownerInfo.tokenAccounts,\n      );\n\n\n      const insInfo = this.makeCollectRewardInstructions({\n        poolInfo,\n        ownerInfo: {\n          wallet: ownerInfo.wallet,\n          tokenAccount: ownerRewardAccount!\n        },\n\n        rewardMint\n      })\n\n      iInstructions.push(...insInfo.instructions)\n    }\n\n    transaction.add(...frontInstructions, ...iInstructions, ...endInstructions)\n\n    return {\n      signers: [...signers],\n      transaction,\n      address: {}\n    }\n  }\n\n  static async makeHarvestAllRewardTransaction({\n    connection, fetchPoolInfos, ownerInfo, associatedOnly = true\n  }: {\n    connection: Connection\n    fetchPoolInfos: ReturnTypeFetchMultiplePoolInfos,\n    ownerInfo: {\n      feePayer: PublicKey,\n      wallet: PublicKey,\n      tokenAccounts: TokenAccount[],\n      useSOLBalance?: boolean  // if has WSOL mint\n    },\n    associatedOnly?: boolean\n  }): Promise<ReturnTypeMakeHarvestTranscation> {\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {}\n    for (const item of ownerInfo.tokenAccounts) {\n      if (associatedOnly) {\n        const ata = getATAAddress(ownerInfo.wallet, item.accountInfo.mint).publicKey\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey\n      } else {\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey\n      }\n    }\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const harvestInstructions: TransactionInstruction[] = [];\n\n    const signers: Signer[] = []\n\n    for (const itemInfo of Object.values(fetchPoolInfos)) {\n      if (itemInfo.positionAccount === undefined) continue\n\n      if (!itemInfo.positionAccount.find(i => !i.tokenFeeAmountA.isZero() || !i.tokenFeeAmountB.isZero() || i.rewardInfos.find(ii => !ii.pendingReward.isZero()))) continue\n\n      const poolInfo = itemInfo.state\n\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.mint.equals(Token.WSOL.mint)\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.mint.equals(Token.WSOL.mint)\n\n      const ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.mint.toString()] ?? await this._selectOrCreateTokenAccount({\n        mint: poolInfo.mintA.mint,\n        tokenAccounts: mintAUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n        owner: ownerInfo.wallet,\n\n        createInfo: {\n          connection,\n          payer: ownerInfo.feePayer,\n          amount: 0,\n\n          frontInstructions,\n          signers\n        },\n\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly\n      })\n\n      const ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.mint.toString()] ?? await this._selectOrCreateTokenAccount({\n        mint: poolInfo.mintB.mint,\n        tokenAccounts: mintBUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n        owner: ownerInfo.wallet,\n\n        createInfo: {\n          connection,\n          payer: ownerInfo.feePayer,\n          amount: 0,\n\n          frontInstructions,\n          signers\n        },\n\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly\n      })\n      ownerMintToAccount[poolInfo.mintA.mint.toString()] = ownerTokenAccountA\n      ownerMintToAccount[poolInfo.mintB.mint.toString()] = ownerTokenAccountB\n\n      const rewardAccounts: PublicKey[] = []\n      for (const itemReward of poolInfo.rewardInfos) {\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.tokenMint.equals(Token.WSOL.mint)\n\n        const ownerRewardAccount = ownerMintToAccount[itemReward.tokenMint.toString()] ?? await this._selectOrCreateTokenAccount({\n          mint: itemReward.tokenMint,\n          tokenAccounts: rewardUseSOLBalance ? [] : ownerInfo.tokenAccounts,\n          owner: ownerInfo.wallet,\n\n          createInfo: {\n            connection,\n            payer: ownerInfo.feePayer,\n            amount: 0,\n\n            frontInstructions,\n            endInstructions: rewardUseSOLBalance ? endInstructions : [],\n            signers\n          },\n\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly\n        })\n        ownerMintToAccount[itemReward.tokenMint.toString()] = ownerRewardAccount\n        rewardAccounts.push(ownerRewardAccount!)\n      }\n\n      for (const itemPosition of itemInfo.positionAccount) {\n        harvestInstructions.push(\n          ...this.makeDecreaseLiquidityInstructions({\n            poolInfo,\n            ownerPosition: itemPosition,\n            ownerInfo: {\n              wallet: ownerInfo.wallet,\n              tokenAccountA: ownerTokenAccountA,\n              tokenAccountB: ownerTokenAccountB,\n              rewardAccounts\n            },\n            liquidity: ZERO,\n            amountMinA: ZERO,\n            amountMinB: ZERO\n          }).instructions\n        )\n      }\n    }\n\n    const allInstruction = [...frontInstructions, ...harvestInstructions, ...endInstructions]\n\n    const transactions = splitTxAndSigners({ instructions: allInstruction, signers, payer: ownerInfo.wallet })\n\n    return {\n      transactions, address: {}\n    }\n  }\n\n  // instrument\n  static async makeCreatePoolInstructions({\n    connection,\n    programId,\n    owner,\n    mintA,\n    mintB,\n    ammConfigId,\n    initialPriceX64\n  }: {\n    connection: Connection,\n    programId: PublicKey,\n    owner: PublicKey,\n    mintA: MintInfo,\n    mintB: MintInfo,\n    ammConfigId: PublicKey,\n    initialPriceX64: BN\n  }): Promise<ReturnTypeMakeInstructions> {\n    const observationId = new Keypair();\n    const ins = [\n      SystemProgram.createAccount({\n        fromPubkey: owner,\n        newAccountPubkey: observationId.publicKey,\n        lamports: await connection.getMinimumBalanceForRentExemption(ObservationInfoLayout.span),\n        space: ObservationInfoLayout.span,\n        programId,\n      }),\n    ];\n\n    const poolId = getPdaPoolId(programId, ammConfigId, mintA.mint, mintB.mint).publicKey;\n    const mintAVault = getPdaPoolVaultId(programId, poolId, mintA.mint).publicKey;\n    const mintBVault = getPdaPoolVaultId(programId, poolId, mintB.mint).publicKey;\n\n    ins.push(\n      createPoolInstruction(\n        programId,\n        poolId,\n        owner,\n        ammConfigId,\n        observationId.publicKey,\n        mintA.mint,\n        mintAVault,\n        mintB.mint,\n        mintBVault,\n        initialPriceX64\n      )\n    );\n\n    return {\n      signers: [observationId],\n      instructions: ins,\n      address: { poolId, observationId: observationId.publicKey, mintAVault, mintBVault },\n    };\n  }\n\n  static makeOpenPositionInstructions(\n    { poolInfo, ownerInfo, tickLower, tickUpper, liquidity, amountSlippageA, amountSlippageB }: {\n      poolInfo: AmmV3PoolInfo,\n\n      ownerInfo: {\n        feePayer: PublicKey,\n        wallet: PublicKey,\n        tokenAccountA: PublicKey\n        tokenAccountB: PublicKey\n      },\n\n      tickLower: number,\n      tickUpper: number,\n      liquidity: BN,\n      amountSlippageA: BN,\n      amountSlippageB: BN,\n    }\n  ): ReturnTypeMakeInstructions {\n    const signers: Signer[] = []\n\n    const nftMintAKeypair = new Keypair();\n    signers.push(nftMintAKeypair)\n\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.ammConfig.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.ammConfig.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAKeypair.publicKey);\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAKeypair.publicKey);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolInfo.programId, nftMintAKeypair.publicKey)\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(poolInfo.programId, poolInfo.id, tickLower, tickUpper)\n\n    const ins = openPositionInstruction(\n      poolInfo.programId,\n      ownerInfo.feePayer,\n      poolInfo.id,\n      ownerInfo.wallet,\n      nftMintAKeypair.publicKey,\n      positionNftAccount,\n      metadataAccount,\n      protocolPosition,\n      tickArrayLower,\n      tickArrayUpper,\n      personalPosition,\n      ownerInfo.tokenAccountA,\n      ownerInfo.tokenAccountB,\n      poolInfo.mintA.vault,\n      poolInfo.mintB.vault,\n\n      tickLower,\n      tickUpper,\n      tickArrayLowerStartIndex,\n      tickArrayUpperStartIndex,\n      liquidity,\n      amountSlippageA,\n      amountSlippageB\n    )\n\n    return {\n      signers: [nftMintAKeypair],\n      instructions: [ins],\n      address: {},\n    };\n  }\n\n  static makeIncreaseLiquidityInstructions({\n    poolInfo,\n    ownerPosition,\n    ownerInfo,\n    liquidity,\n    amountSlippageA,\n    amountSlippageB\n  }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccountA: PublicKey\n      tokenAccountB: PublicKey\n    },\n\n    liquidity: BN,\n    amountSlippageA: BN,\n    amountSlippageB: BN\n  }): ReturnTypeMakeInstructions {\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(ownerPosition.tickLower, poolInfo.ammConfig.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(ownerPosition.tickUpper, poolInfo.ammConfig.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, tickArrayUpperStartIndex);\n\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolInfo.programId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(poolInfo.programId, poolInfo.id, ownerPosition.tickLower, ownerPosition.tickUpper);\n\n    const ins: TransactionInstruction[] = [];\n    ins.push(\n      increaseLiquidityInstruction(\n        poolInfo.programId,\n        ownerInfo.wallet,\n        positionNftAccount,\n        personalPosition,\n        poolInfo.id,\n        protocolPosition,\n        tickArrayLower,\n        tickArrayUpper,\n        ownerInfo.tokenAccountA,\n        ownerInfo.tokenAccountB,\n        poolInfo.mintA.vault,\n        poolInfo.mintB.vault,\n\n        liquidity,\n        amountSlippageA,\n        amountSlippageB\n      )\n    );\n\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  static makeDecreaseLiquidityInstructions({\n    poolInfo,\n    ownerPosition,\n    ownerInfo,\n    liquidity,\n    amountMinA,\n    amountMinB\n  }: {\n\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccountA: PublicKey\n      tokenAccountB: PublicKey\n      rewardAccounts: PublicKey[]\n    },\n\n    liquidity: BN,\n    amountMinA: BN,\n    amountMinB: BN\n\n  }): ReturnTypeMakeInstructions {\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(ownerPosition.tickLower, poolInfo.ammConfig.tickSpacing);\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(ownerPosition.tickUpper, poolInfo.ammConfig.tickSpacing);\n\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, tickArrayLowerStartIndex);\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, tickArrayUpperStartIndex);\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint);\n\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolInfo.programId, ownerPosition.nftMint);\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(poolInfo.programId, poolInfo.id, ownerPosition.tickLower, ownerPosition.tickUpper);\n\n    const rewardAccounts: {\n      poolRewardVault: PublicKey,\n      ownerRewardVault: PublicKey\n    }[] = []\n    for (let i = 0; i < poolInfo.rewardInfos.length; i++) {\n      rewardAccounts.push({\n        poolRewardVault: poolInfo.rewardInfos[i].tokenVault,\n        ownerRewardVault: ownerInfo.rewardAccounts[i]\n      })\n    }\n\n    const ins: TransactionInstruction[] = [];\n    ins.push(\n      decreaseLiquidityInstruction(\n        poolInfo.programId,\n        ownerInfo.wallet,\n        positionNftAccount,\n        personalPosition,\n        poolInfo.id,\n        protocolPosition,\n        tickArrayLower,\n        tickArrayUpper,\n        ownerInfo.tokenAccountA,\n        ownerInfo.tokenAccountB,\n        poolInfo.mintA.vault,\n        poolInfo.mintB.vault,\n        rewardAccounts,\n\n        liquidity,\n        amountMinA,\n        amountMinB\n      )\n    );\n\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  static makeClosePositionInstructions({\n    poolInfo, ownerInfo, ownerPosition\n  }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n\n    ownerInfo: {\n      wallet: PublicKey,\n    },\n  }): ReturnTypeMakeInstructions {\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint);\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolInfo.programId, ownerPosition.nftMint)\n\n    const ins: TransactionInstruction[] = [];\n    ins.push(\n      closePositionInstruction(\n        poolInfo.programId,\n\n        ownerInfo.wallet,\n        ownerPosition.nftMint,\n        positionNftAccount,\n        personalPosition\n      )\n    );\n\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  static makeSwapBaseInInstructions({ poolInfo, ownerInfo, inputMint, amountIn, amountOutMin, sqrtPriceLimitX64, remainingAccounts }: {\n    poolInfo: AmmV3PoolInfo,\n\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccountA: PublicKey\n      tokenAccountB: PublicKey\n    },\n\n    inputMint: PublicKey\n\n    amountIn: BN\n    amountOutMin: BN\n    sqrtPriceLimitX64: BN\n\n    remainingAccounts: PublicKey[]\n  }): ReturnTypeMakeInstructions {\n    const isInputMintA = poolInfo.mintA.mint.equals(inputMint)\n    const ins = [\n      swapInstruction(\n        poolInfo.programId,\n        ownerInfo.wallet,\n\n        poolInfo.id,\n        poolInfo.ammConfig.id,\n\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\n\n        isInputMintA ? poolInfo.mintA.vault : poolInfo.mintB.vault,\n        isInputMintA ? poolInfo.mintB.vault : poolInfo.mintA.vault,\n\n        remainingAccounts,\n        poolInfo.observationId,\n        amountIn,\n        amountOutMin,\n        sqrtPriceLimitX64,\n        true\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  static makeInitRewardInstructions({\n    poolInfo, ownerInfo, rewardInfo\n  }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccount: PublicKey,\n    },\n    rewardInfo: {\n      mint: PublicKey,\n      openTime: number,\n      endTime: number,\n      emissionsPerSecondX64: BN\n    }\n  }): ReturnTypeMakeInstructions {\n    const poolRewardVault = getPdaPoolRewardVaulId(poolInfo.programId, poolInfo.id, rewardInfo.mint).publicKey\n    const operationId = getPdaOperationAccount(poolInfo.programId).publicKey\n    const ins = [\n      initRewardInstruction(\n        poolInfo.programId,\n        ownerInfo.wallet,\n        poolInfo.id,\n        operationId,\n        poolInfo.ammConfig.id,\n\n        ownerInfo.tokenAccount,\n        rewardInfo.mint,\n        poolRewardVault,\n\n        rewardInfo.openTime,\n        rewardInfo.endTime,\n        rewardInfo.emissionsPerSecondX64\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  static makeSetRewardInstructions({\n    poolInfo, ownerInfo, rewardInfo\n  }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccount: PublicKey,\n    },\n    rewardInfo: {\n      mint: PublicKey,\n      openTime: number,\n      endTime: number,\n      emissionsPerSecondX64: BN\n    }\n  }): ReturnTypeMakeInstructions {\n    let rewardIndex\n    let rewardVault\n    for (let index = 0; index < poolInfo.rewardInfos.length; index++)\n      if (poolInfo.rewardInfos[index].tokenMint.equals(rewardInfo.mint)) {\n        rewardIndex = index\n        rewardVault = poolInfo.rewardInfos[index].tokenVault\n      }\n\n    logger.assertArgument(\n      rewardIndex !== undefined && rewardVault !== undefined,\n      \"reward mint check error\",\n      \"no reward mint\",\n      poolInfo.rewardInfos,\n    );\n\n    const operationId = getPdaOperationAccount(poolInfo.programId).publicKey\n\n    const ins = [\n      setRewardInstruction(\n        poolInfo.programId,\n        ownerInfo.wallet,\n        poolInfo.id,\n        operationId,\n        poolInfo.ammConfig.id,\n\n        ownerInfo.tokenAccount,\n        rewardVault,\n\n        rewardIndex,\n        rewardInfo.openTime,\n        rewardInfo.endTime,\n        rewardInfo.emissionsPerSecondX64\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  static makeCollectRewardInstructions({\n    poolInfo, ownerInfo, rewardMint\n  }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerInfo: {\n      wallet: PublicKey,\n      tokenAccount: PublicKey,\n    },\n    rewardMint: PublicKey\n  }): ReturnTypeMakeInstructions {\n    let rewardIndex\n    let rewardVault\n    for (let index = 0; index < poolInfo.rewardInfos.length; index++)\n      if (poolInfo.rewardInfos[index].tokenMint.equals(rewardMint)) {\n        rewardIndex = index\n        rewardVault = poolInfo.rewardInfos[index].tokenVault\n      }\n\n    logger.assertArgument(\n      rewardIndex !== undefined && rewardVault !== undefined,\n      \"reward mint check error\",\n      \"no reward mint\",\n      poolInfo.rewardInfos,\n    );\n\n    const ins = [\n      collectRewardInstruction(\n        poolInfo.programId,\n        ownerInfo.wallet,\n        poolInfo.id,\n\n        ownerInfo.tokenAccount,\n        rewardVault,\n\n        rewardIndex,\n      ),\n    ];\n    return {\n      signers: [],\n      instructions: ins,\n      address: {},\n    };\n  }\n\n  // calculate\n  static getLiquidityAmountOutFromAmountIn({ poolInfo, inputA, tickLower, tickUpper, amount, slippage, add }:\n    { poolInfo: AmmV3PoolInfo, inputA: boolean, tickLower: number, tickUpper: number, amount: BN, slippage: number, add: boolean }): ReturnTypeGetLiquidityAmountOutFromAmountIn {\n    const sqrtPriceX64 = poolInfo.sqrtPriceX64\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower)\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper)\n\n    const coefficient = add ? 1 - slippage : 1 + slippage;\n    const _amount = amount.mul(new BN(Math.floor(coefficient * 1000000))).div(new BN(1000000))\n\n    let liquidity: BN\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\n      liquidity = inputA ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add) : new BN(0)\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\n      liquidity = inputA ? liquidity0 : liquidity1\n    } else {\n      liquidity = inputA ? new BN(0) : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\n    }\n\n    const amountsSlippage = LiquidityMath.getAmountsFromLiquidityWithSlippage(poolInfo.sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add, !add, slippage)\n    const amounts = LiquidityMath.getAmountsFromLiquidity(poolInfo.sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, !add)\n\n    return { liquidity, ...amountsSlippage, ...amounts }\n  }\n\n  static getAmountsFromLiquidity({ poolInfo, ownerPosition, liquidity, slippage, add }: {\n    poolInfo: AmmV3PoolInfo,\n    ownerPosition: AmmV3PoolPersonalPosition,\n    liquidity: BN\n    slippage: number,\n    add: boolean\n  }): ReturnTypeGetAmountsFromLiquidity {\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower)\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper)\n    return LiquidityMath.getAmountsFromLiquidityWithSlippage(poolInfo.sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add, add, slippage)\n  }\n\n  static getPriceAndTick({ poolInfo, price, baseIn }: { poolInfo: AmmV3PoolInfo, price: Decimal, baseIn: boolean }): ReturnTypeGetPriceAndTick {\n    const _price = baseIn ? price : new Decimal(1).div(price)\n\n    const tick = TickMath.getTickWithPriceAndTickspacing(_price, poolInfo.ammConfig.tickSpacing, poolInfo.mintA.decimals, poolInfo.mintB.decimals)\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick)\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(tickSqrtPriceX64, poolInfo.mintA.decimals, poolInfo.mintB.decimals)\n\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) }\n  }\n\n  static getTickPrice({ poolInfo, tick, baseIn }: { poolInfo: AmmV3PoolInfo, tick: number, baseIn: boolean }): ReturnTypeGetTickPrice {\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick)\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(tickSqrtPriceX64, poolInfo.mintA.decimals, poolInfo.mintB.decimals)\n\n    return baseIn ? { tick, price: tickPrice, tickSqrtPriceX64 } : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 }\n  }\n\n  static computeAmountOutFormat({ poolInfo, tickArrayCache, amountIn, currencyOut, slippage }: {\n    poolInfo: AmmV3PoolInfo,\n    tickArrayCache: { [key: string]: TickArray; },\n\n    amountIn: CurrencyAmount | TokenAmount,\n    currencyOut: Token | Currency,\n    slippage: Percent\n  }): ReturnTypeComputeAmountOutFormat {\n    const amountInIsTokenAmount = amountIn instanceof TokenAmount\n    const inputMint = (amountInIsTokenAmount ? amountIn.token : Token.WSOL).mint;\n    const _amountIn = amountIn.raw\n    const _slippage = slippage.numerator.toNumber() / slippage.denominator.toNumber()\n\n    const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee, remainingAccounts } = AmmV3.computeAmountOut({\n      poolInfo,\n      tickArrayCache,\n      baseMint: inputMint,\n      amountIn: _amountIn,\n      slippage: _slippage,\n    })\n\n    const _amountOut = currencyOut instanceof Token ? new TokenAmount(currencyOut, amountOut) : new CurrencyAmount(currencyOut, amountOut)\n    const _minAmountOut = currencyOut instanceof Token ? new TokenAmount(currencyOut, minAmountOut) : new CurrencyAmount(currencyOut, minAmountOut)\n    const _currentPrice = new Price(\n      amountInIsTokenAmount ? amountIn.token : amountIn.currency,\n      new BN(10).pow(new BN(20 + (amountInIsTokenAmount ? amountIn.token : amountIn.currency).decimals)),\n      currencyOut instanceof Token ? currencyOut : Token.WSOL,\n      currentPrice.mul(new Decimal(10 ** (20 + (currencyOut instanceof Token ? currencyOut : Token.WSOL).decimals))).toFixed(0)\n    )\n    const _executionPrice = new Price(\n      amountInIsTokenAmount ? amountIn.token : amountIn.currency,\n      new BN(10).pow(new BN(20 + (amountInIsTokenAmount ? amountIn.token : amountIn.currency).decimals)),\n      currencyOut instanceof Token ? currencyOut : Token.WSOL,\n      executionPrice.mul(new Decimal(10 ** (20 + (currencyOut instanceof Token ? currencyOut : Token.WSOL).decimals))).toFixed(0)\n    )\n    const _fee = amountInIsTokenAmount ? new TokenAmount(amountIn.token, fee) : new CurrencyAmount(amountIn.currency, fee);\n\n    return {\n      amountOut: _amountOut,\n      minAmountOut: _minAmountOut,\n      currentPrice: _currentPrice,\n      executionPrice: _executionPrice,\n      priceImpact,\n      fee: _fee,\n      remainingAccounts\n    }\n  }\n\n  static computeAmountOut(\n    { poolInfo, tickArrayCache, baseMint, amountIn, slippage, priceLimit = new Decimal(0) }: {\n      poolInfo: AmmV3PoolInfo,\n      tickArrayCache: { [key: string]: TickArray; },\n      baseMint: PublicKey,\n\n      amountIn: BN,\n      slippage: number,\n      priceLimit?: Decimal\n    }\n  ): ReturnTypeComputeAmountOut {\n    let sqrtPriceLimitX64: BN;\n    if (priceLimit.equals(new Decimal(0))) {\n      sqrtPriceLimitX64 = baseMint.equals(poolInfo.mintA.mint)\n        ? MIN_SQRT_PRICE_X64.add(ONE)\n        : MAX_SQRT_PRICE_X64.sub(ONE);\n    } else {\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\n        priceLimit,\n        poolInfo.mintA.decimals,\n        poolInfo.mintB.decimals\n      );\n    }\n\n    const { expectedAmountOut, remainingAccounts, executionPrice: _executionPriceX64, feeAmount } = PoolUtils.getOutputAmountAndRemainAccounts(\n      poolInfo,\n      tickArrayCache,\n      baseMint,\n      amountIn,\n      sqrtPriceLimitX64\n    );\n\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(_executionPriceX64, poolInfo.mintA.decimals, poolInfo.mintB.decimals)\n    const executionPrice = baseMint.equals(poolInfo.mintA.mint) ? _executionPrice : new Decimal(1).div(_executionPrice)\n\n    const minAmountOut = expectedAmountOut.mul(new BN(Math.floor((1 - slippage) * 10000000000))).div(new BN(10000000000));\n\n    const poolPrice = poolInfo.mintA.mint.equals(baseMint) ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice)\n    const priceImpact = new Percent(\n      parseInt(String(Math.abs(parseFloat(executionPrice.toFixed()) - parseFloat(poolPrice.toFixed())) * 1e9)),\n      parseInt(String(parseFloat(poolPrice.toFixed()) * 1e9)),\n    );\n\n    return {\n      amountOut: expectedAmountOut,\n      minAmountOut,\n      currentPrice: poolInfo.currentPrice,\n      executionPrice,\n      priceImpact,\n      fee: feeAmount,\n\n      remainingAccounts\n    }\n  }\n\n  static estimateAprsForPriceRangeMultiplier({ poolInfo, aprType, positionTickLowerIndex, positionTickUpperIndex }: {\n    poolInfo: AmmV3PoolInfo,\n    aprType: 'day' | 'week' | 'month',\n\n    positionTickLowerIndex: number,\n    positionTickUpperIndex: number,\n  }) {\n    const aprInfo = poolInfo[aprType]\n\n    const priceLower = this.getTickPrice({ poolInfo, tick: positionTickLowerIndex, baseIn: true }).price.toNumber()\n    const priceUpper = this.getTickPrice({ poolInfo, tick: positionTickUpperIndex, baseIn: true }).price.toNumber()\n\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin)\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax)\n\n    const sub = _maxPrice - _minPrice\n\n    const userRange = priceUpper - priceLower\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin\n\n    let p\n\n    if (sub <= 0) p = 0\n    else if (userRange === sub) p = (tradeRange) / sub\n    else if (tradeRange === sub) p = sub / (userRange)\n    else p = sub / (tradeRange) * (sub / (userRange))\n\n    return {\n      feeApr: aprInfo.feeApr * p,\n      rewardsApr: [aprInfo.rewardApr.A * p, aprInfo.rewardApr.B * p, aprInfo.rewardApr.C * p],\n      apr: aprInfo.apr * p\n    }\n  }\n\n  static estimateAprsForPriceRangeDelta({ poolInfo, aprType, mintPrice, rewardMintDecimals, liquidity, positionTickLowerIndex, positionTickUpperIndex, chainTime }: {\n    poolInfo: AmmV3PoolInfo,\n    aprType: 'day' | 'week' | 'month',\n\n    mintPrice: { [mint: string]: Price },\n\n    rewardMintDecimals: { [mint: string]: number },\n\n    liquidity: BN,\n    positionTickLowerIndex: number,\n    positionTickUpperIndex: number,\n\n    chainTime: number,\n  }) {\n    const aprTypeDay = aprType === 'day' ? 1 : aprType === 'week' ? 7 : aprType === 'month' ? 30 : 0\n    const aprInfo = poolInfo[aprType]\n    const mintPriceA = mintPrice[poolInfo.mintA.mint.toString()]\n    const mintPriceB = mintPrice[poolInfo.mintB.mint.toString()]\n    const mintDecimalsA = poolInfo.mintA.decimals\n    const mintDecimalsB = poolInfo.mintB.decimals\n\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 }\n\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex)\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex)\n\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } = LiquidityMath.getAmountsFromLiquidityWithSlippage(poolInfo.sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, poolInfo.liquidity, false, false, 0)\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } = LiquidityMath.getAmountsFromLiquidityWithSlippage(poolInfo.sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, false, false, 0)\n\n    const poolTvl = new Decimal(poolLiquidityA.toString()).div(new Decimal(10).pow(mintDecimalsA)).mul(mintPriceA.toFixed(mintDecimalsA)).add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.toFixed(mintDecimalsB)))\n    const userTvl = new Decimal(userLiquidityA.toString()).div(new Decimal(10).pow(mintDecimalsA)).mul(mintPriceA.toFixed(mintDecimalsA)).add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.toFixed(mintDecimalsB)))\n\n    const p = userTvl.div(poolTvl.add(userTvl)).div(userTvl)\n\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\n\n    const SECONDS_PER_YEAR = 3600 * 24 * 365\n\n    const rewardsApr = poolInfo.rewardInfos.map((i) => {\n      const iDecimal = rewardMintDecimals[i.tokenMint.toString()]\n      const iPrice = mintPrice[i.tokenMint.toString()]\n\n      if (chainTime < i.openTime.toNumber() || chainTime > i.endTime.toNumber() || i.perSecond.equals(0) || !iPrice || iDecimal === undefined) return 0\n\n      return new Decimal(iPrice.toFixed(iDecimal)).mul(i.perSecond.mul(SECONDS_PER_YEAR)).div(new Decimal(10).pow(iDecimal)).mul(p).mul(100).toNumber()\n    })\n\n    return {\n      feeApr,\n      rewardsApr,\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0)\n    }\n  }\n\n  // fetch data\n  static async fetchMultiplePoolInfos({ connection, poolKeys, ownerInfo, chainTime, batchRequest = false }: { connection: Connection, poolKeys: ApiAmmV3PoolInfo[], ownerInfo?: { wallet: PublicKey, tokenAccounts: TokenAccount[] }, chainTime: number, batchRequest?: boolean }): Promise<ReturnTypeFetchMultiplePoolInfos> {\n    const poolAccountInfos = await getMultipleAccountsInfo(connection, poolKeys.map(i => new PublicKey(i.id)), { batchRequest })\n\n    const programIds: PublicKey[] = []\n\n    const poolsInfo: ReturnTypeFetchMultiplePoolInfos = {}\n\n    const updateRewardInfos: AmmV3PoolRewardInfo[] = []\n\n    for (let index = 0; index < poolKeys.length; index++) {\n      const apiPoolInfo = poolKeys[index]\n      const accountInfo = poolAccountInfos[index]\n\n      if (accountInfo === null) continue\n\n      const layoutAccountInfo = PoolInfoLayout.decode(accountInfo.data)\n\n      poolsInfo[apiPoolInfo.id] = {\n        state: {\n          id: new PublicKey(apiPoolInfo.id),\n          mintA: {\n            mint: layoutAccountInfo.mintA,\n            vault: layoutAccountInfo.vaultA,\n            decimals: layoutAccountInfo.mintDecimalsA,\n          },\n          mintB: {\n            mint: layoutAccountInfo.mintB,\n            vault: layoutAccountInfo.vaultB,\n            decimals: layoutAccountInfo.mintDecimalsB,\n          },\n          observationId: layoutAccountInfo.observationId,\n          ammConfig: {\n            ...apiPoolInfo.ammConfig,\n            id: new PublicKey(apiPoolInfo.ammConfig.id)\n          },\n\n          creator: layoutAccountInfo.creator,\n          programId: accountInfo.owner,\n          version: 6,\n\n          tickSpacing: layoutAccountInfo.tickSpacing,\n          liquidity: layoutAccountInfo.liquidity,\n          sqrtPriceX64: layoutAccountInfo.sqrtPriceX64,\n          currentPrice: SqrtPriceMath.sqrtPriceX64ToPrice(layoutAccountInfo.sqrtPriceX64, layoutAccountInfo.mintDecimalsA, layoutAccountInfo.mintDecimalsB),\n          tickCurrent: layoutAccountInfo.tickCurrent,\n          observationIndex: layoutAccountInfo.observationIndex,\n          observationUpdateDuration: layoutAccountInfo.observationUpdateDuration,\n          feeGrowthGlobalX64A: layoutAccountInfo.feeGrowthGlobalX64A,\n          feeGrowthGlobalX64B: layoutAccountInfo.feeGrowthGlobalX64B,\n          protocolFeesTokenA: layoutAccountInfo.protocolFeesTokenA,\n          protocolFeesTokenB: layoutAccountInfo.protocolFeesTokenB,\n          swapInAmountTokenA: layoutAccountInfo.swapInAmountTokenA,\n          swapOutAmountTokenB: layoutAccountInfo.swapOutAmountTokenB,\n          swapInAmountTokenB: layoutAccountInfo.swapInAmountTokenB,\n          swapOutAmountTokenA: layoutAccountInfo.swapOutAmountTokenA,\n          tickArrayBitmap: layoutAccountInfo.tickArrayBitmap,\n\n          rewardInfos: PoolUtils.updatePoolRewardInfos({\n            chainTime,\n            poolLiquidity: layoutAccountInfo.liquidity,\n            rewardInfos: layoutAccountInfo.rewardInfos.filter(i => !i.tokenMint.equals(PublicKey.default))\n          }),\n\n          day: apiPoolInfo.day,\n          week: apiPoolInfo.week,\n          month: apiPoolInfo.month,\n          tvl: apiPoolInfo.tvl\n        }\n      }\n\n      if (ownerInfo) {\n        updateRewardInfos.push(...poolsInfo[apiPoolInfo.id].state.rewardInfos.filter(i => i.creator.equals(ownerInfo.wallet)))\n      }\n\n      if (!programIds.find(i => i.equals(accountInfo.owner))) programIds.push(accountInfo.owner)\n    }\n\n    if (ownerInfo) {\n      const allMint = ownerInfo.tokenAccounts.map(i => i.accountInfo.mint)\n      const allPositionKey: PublicKey[] = []\n      for (const itemMint of allMint) {\n        for (const itemProgramId of programIds) {\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey)\n        }\n      }\n\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest })\n\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {}\n      for (const itemAccountInfo of positionAccountInfos) {\n        if (itemAccountInfo === null) continue\n        const position = PositionInfoLayout.decode(itemAccountInfo.data)\n        const itemPoolId = position.poolId.toString()\n        const poolInfoA = poolsInfo[itemPoolId]\n        if (poolInfoA === undefined) continue\n\n        const poolInfo = poolInfoA.state\n\n        const priceLower = this.getTickPrice({\n          poolInfo,\n          tick: position.tickLower,\n          baseIn: true\n        })\n        const priceUpper = this.getTickPrice({\n          poolInfo,\n          tick: position.tickUpper,\n          baseIn: true\n        })\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(poolInfo.sqrtPriceX64, priceLower.tickSqrtPriceX64, priceUpper.tickSqrtPriceX64, position.liquidity, false)\n\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())))\n\n        poolsInfo[itemPoolId].positionAccount = [...(poolsInfo[itemPoolId].positionAccount ?? []), {\n          poolId: position.poolId,\n          nftMint: position.nftMint,\n\n          priceLower: priceLower.price,\n          priceUpper: priceUpper.price,\n          amountA,\n          amountB,\n          tickLower: position.tickLower,\n          tickUpper: position.tickUpper,\n          liquidity: position.liquidity,\n          feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\n          feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\n          tokenFeesOwedA: position.tokenFeesOwedA,\n          tokenFeesOwedB: position.tokenFeesOwedB,\n          rewardInfos: position.rewardInfos.map(i => ({\n            ...i,\n            pendingReward: new BN(0)\n          })),\n\n          leverage,\n          tokenFeeAmountA: new BN(0),\n          tokenFeeAmountB: new BN(0),\n        }]\n\n        const tickArrayLowerAddress = TickUtils.getTickArrayAddressByTick(\n          poolsInfo[itemPoolId].state.programId,\n          position.poolId,\n          position.tickLower,\n          poolsInfo[itemPoolId].state.tickSpacing\n        );\n        const tickArrayUpperAddress = TickUtils.getTickArrayAddressByTick(\n          poolsInfo[itemPoolId].state.programId,\n          position.poolId,\n          position.tickUpper,\n          poolsInfo[itemPoolId].state.tickSpacing\n        );\n        keyToTickArrayAddress[`${poolsInfo[itemPoolId].state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`] = tickArrayLowerAddress\n        keyToTickArrayAddress[`${poolsInfo[itemPoolId].state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`] = tickArrayUpperAddress\n      }\n\n      const tickArrayKeys = Object.values(keyToTickArrayAddress)\n      const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest })\n      const tickArrayLayout = {}\n      for (let index = 0; index < tickArrayKeys.length; index++) {\n        const tickArrayData = tickArrayDatas[index]\n        if (tickArrayData === null) continue\n        const key = tickArrayKeys[index].toString()\n        tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data)\n      }\n\n      for (const { state, positionAccount } of Object.values(poolsInfo)) {\n        if (!positionAccount) continue\n        for (const itemPA of positionAccount) {\n          const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`\n          const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`\n          const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()]\n          const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()]\n          const tickLowerState: Tick = tickArrayLower.ticks[TickUtils.getTickOffsetInArray(\n            itemPA.tickLower,\n            state.tickSpacing\n          )]\n          const tickUpperState: Tick = tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(\n            itemPA.tickUpper,\n            state.tickSpacing\n          )]\n          const { tokenFeeAmountA, tokenFeeAmountB } = PositionUtils.GetPositionFees(state, itemPA, tickLowerState, tickUpperState)\n          const rewardInfos = PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState)\n          itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(ZERO) ? tokenFeeAmountA : ZERO\n          itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(ZERO) ? tokenFeeAmountB : ZERO\n          for (let i = 0; i < rewardInfos.length; i++) {\n            itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(ZERO) ? rewardInfos[i] : ZERO\n          }\n        }\n      }\n    }\n\n    if (updateRewardInfos.length > 0) {\n      const vaults = updateRewardInfos.map(i => i.tokenVault)\n      const rewardVaultInfos = await getMultipleAccountsInfo(connection, vaults, { batchRequest })\n      const rewardVaultAmount: { [mint: string]: BN } = {}\n      for (let index = 0; index < vaults.length; index++) {\n        const valutKey = vaults[index].toString()\n        const itemRewardVaultInfo = rewardVaultInfos[index]\n        if (itemRewardVaultInfo === null) continue\n        const info = SPL_ACCOUNT_LAYOUT.decode(itemRewardVaultInfo.data)\n        rewardVaultAmount[valutKey] = info.amount\n      }\n      for (const item of updateRewardInfos) {\n        const vaultAmount = rewardVaultAmount[item.tokenVault.toString()]\n        item.remainingRewards = vaultAmount !== undefined ? vaultAmount.sub(item.rewardTotalEmissioned) : ZERO\n      }\n    }\n\n    return poolsInfo\n  }\n\n  static async fetchMultiplePoolTickArrays({ connection, poolKeys, batchRequest }: { connection: Connection, poolKeys: AmmV3PoolInfo[], batchRequest?: boolean }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\n    const tickArraysToPoolId = {}\n    const tickArrays: { pubkey: PublicKey }[] = []\n    for (const itemPoolInfo of poolKeys) {\n      const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(itemPoolInfo.tickArrayBitmap);\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(itemPoolInfo.tickCurrent, itemPoolInfo.tickSpacing);\n\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(tickArrayBitmap, itemPoolInfo.tickSpacing, currentTickArrayStartIndex, Math.floor(FETCH_TICKARRAY_COUNT / 2));\n      for (const itemIndex of startIndexArray) {\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n          itemPoolInfo.programId,\n          itemPoolInfo.id,\n          itemIndex\n        );\n        tickArrays.push({ pubkey: tickArrayAddress });\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id\n      }\n    }\n\n    const fetchedTickArrays = (await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest }))\n\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {}\n\n    for (const itemAccountInfo of fetchedTickArrays) {\n      if (!itemAccountInfo.accountInfo) continue\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()]\n      if (!poolId) continue\n      if (tickArrayCache[poolId] === undefined) tickArrayCache[poolId] = {}\n\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data)\n\n      tickArrayCache[poolId][accountLayoutData.startTickIndex] = {\n        ...accountLayoutData,\n        address: itemAccountInfo.pubkey\n      }\n    }\n    return tickArrayCache;\n  }\n\n  static async getWhiteListMint({ connection, programId }: { connection: Connection, programId: PublicKey }) {\n    const accountInfo = await connection.getAccountInfo(getPdaOperationAccount(programId).publicKey)\n    if (!accountInfo) return []\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data)\n    return whitelistMintsInfo.whitelistMints.filter(i => !i.equals(PublicKey.default))\n  }\n}","import { AccountLayout, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  Connection, Keypair, PublicKey, Signer, SystemProgram, Transaction, TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport { BigNumberish, Token } from \"../entity\";\nimport { Spl, SplAccount } from \"../spl\";\n\nexport interface TokenAccount {\n  pubkey: PublicKey;\n  accountInfo: SplAccount;\n}\n\nexport interface SelectTokenAccountParams {\n  tokenAccounts: TokenAccount[];\n  mint: PublicKey;\n  owner: PublicKey;\n  config?: { associatedOnly?: boolean };\n}\n\nexport interface HandleTokenAccountParams {\n  connection: Connection;\n  side: \"in\" | \"out\";\n  amount: BigNumberish;\n  mint: PublicKey;\n  tokenAccount: PublicKey | null;\n  owner: PublicKey;\n  payer?: PublicKey;\n  frontInstructions: TransactionInstruction[];\n  endInstructions?: TransactionInstruction[];\n  signers: Signer[];\n  bypassAssociatedCheck: boolean;\n}\n\nexport interface SelectOrCreateTokenAccountParams {\n  mint: PublicKey,\n  tokenAccounts: TokenAccount[]\n\n  owner: PublicKey\n\n  createInfo?: {\n    connection: Connection,\n    payer: PublicKey\n    amount?: BigNumberish\n\n    frontInstructions: TransactionInstruction[];\n    endInstructions?: TransactionInstruction[];\n    signers: Signer[];\n  }\n\n  associatedOnly: boolean\n}\n\nexport interface UnsignedTransactionAndSigners {\n  transaction: Transaction;\n  signers: Signer[];\n}\n\nexport class Base {\n  static _selectTokenAccount(params: SelectTokenAccountParams) {\n    const { tokenAccounts, mint, owner, config } = params;\n\n    const { associatedOnly } = {\n      // default\n      ...{ associatedOnly: true },\n      // custom\n      ...config,\n    };\n\n    const _tokenAccounts = tokenAccounts\n      // filter by mint\n      .filter(({ accountInfo }) => accountInfo.mint.equals(mint))\n      // sort by balance\n      .sort((a, b) => (a.accountInfo.amount.lt(b.accountInfo.amount) ? 1 : -1));\n\n    const ata = Spl.getAssociatedTokenAccount({ mint, owner });\n\n    for (const tokenAccount of _tokenAccounts) {\n      const { pubkey } = tokenAccount;\n\n      if (associatedOnly) {\n        // return ata only\n        if (ata.equals(pubkey)) return pubkey;\n      } else {\n        // return the first account\n        return pubkey;\n      }\n    }\n\n    return null;\n  }\n\n  static async _handleTokenAccount(params: HandleTokenAccountParams) {\n    const {\n      connection,\n      side,\n      amount,\n      mint,\n      tokenAccount,\n      owner,\n      payer = owner,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    } = params;\n\n    const ata = Spl.getAssociatedTokenAccount({ mint, owner });\n\n    if (Token.WSOL.mint.equals(mint)) {\n      const newTokenAccount = await Spl.insertCreateWrappedNativeAccountInstructions({\n        connection,\n        owner,\n        payer,\n        instructions: frontInstructions,\n        signers,\n        amount,\n      });\n      // if no endInstructions provide, no need to close\n      if (endInstructions) {\n        endInstructions.push(Spl.makeCloseAccountInstruction({ tokenAccount: newTokenAccount, owner, payer }));\n      }\n\n      return newTokenAccount;\n    } else if (!tokenAccount || (side === \"out\" && !ata.equals(tokenAccount) && !bypassAssociatedCheck)) {\n      frontInstructions.push(\n        Spl.makeCreateAssociatedTokenAccountInstruction({\n          mint,\n          associatedAccount: ata,\n          owner,\n          payer,\n        }),\n      );\n\n      return ata;\n    }\n\n    return tokenAccount;\n  }\n\n  static async _selectOrCreateTokenAccount(params: SelectOrCreateTokenAccountParams) {\n    const { mint, tokenAccounts, createInfo, associatedOnly, owner } = params\n    const ata = Spl.getAssociatedTokenAccount({ mint, owner });\n    const accounts = tokenAccounts.filter((i) => i.accountInfo.mint.equals(mint) && (!associatedOnly || i.pubkey.equals(ata))).sort((a, b) => (a.accountInfo.amount.lt(b.accountInfo.amount) ? 1 : -1))\n    // find token or don't need create\n    if (createInfo === undefined || accounts.length > 0) {\n      return accounts.length > 0 ? accounts[0].pubkey : undefined\n    }\n\n    if (associatedOnly) {\n      createInfo.frontInstructions.push(\n        Spl.makeCreateAssociatedTokenAccountInstruction({\n          mint,\n          associatedAccount: ata,\n          owner,\n          payer: createInfo.payer,\n        }),\n      );\n\n      if (mint.equals(Token.WSOL.mint)) {\n        const newTokenAccount = await Spl.insertCreateWrappedNativeAccountInstructions({\n          connection: createInfo.connection,\n          owner,\n          payer: createInfo.payer,\n          instructions: createInfo.frontInstructions,\n          signers: createInfo.signers,\n          amount: createInfo.amount ?? 0,\n        });\n        if (createInfo.endInstructions) {\n          createInfo.endInstructions.push(Spl.makeCloseAccountInstruction({ tokenAccount: newTokenAccount, owner, payer: createInfo.payer }));\n        }\n\n        if (createInfo.amount) {\n          createInfo.frontInstructions.push(\n            Spl.makeTransferInstruction({\n              source: newTokenAccount,\n              destination: ata,\n              owner,\n              amount: createInfo.amount,\n            })\n          )\n        }\n      }\n\n      if (createInfo.endInstructions) {\n        createInfo.endInstructions.push(Spl.makeCloseAccountInstruction({ tokenAccount: ata, owner, payer: createInfo.payer }));\n      }\n\n      return ata\n    } else {\n      if (mint.equals(Token.WSOL.mint)) {\n        const newTokenAccount = await Spl.insertCreateWrappedNativeAccountInstructions({\n          connection: createInfo.connection,\n          owner,\n          payer: createInfo.payer,\n          instructions: createInfo.frontInstructions,\n          signers: createInfo.signers,\n          amount: createInfo.amount ?? 0,\n        });\n        if (createInfo.endInstructions) {\n          createInfo.endInstructions.push(Spl.makeCloseAccountInstruction({ tokenAccount: newTokenAccount, owner, payer: createInfo.payer }));\n        }\n        return newTokenAccount\n      } else {\n        const newTokenAccount = Keypair.generate()\n        const balanceNeeded = await createInfo.connection.getMinimumBalanceForRentExemption(AccountLayout.span)\n\n        const createAccountIns = SystemProgram.createAccount({\n          fromPubkey: owner,\n          newAccountPubkey: newTokenAccount.publicKey,\n          lamports: balanceNeeded,\n          space: AccountLayout.span,\n          programId: TOKEN_PROGRAM_ID,\n        })\n\n        const initAccountIns = Spl.createInitAccountInstruction(\n          TOKEN_PROGRAM_ID,\n          mint,\n          newTokenAccount.publicKey,\n          owner,\n        )\n        createInfo.frontInstructions.push(createAccountIns, initAccountIns)\n        createInfo.signers.push(newTokenAccount)\n        if (createInfo.endInstructions) {\n          createInfo.endInstructions.push(Spl.makeCloseAccountInstruction({ tokenAccount: newTokenAccount.publicKey, owner, payer: createInfo.payer }))\n        }\n        return newTokenAccount.publicKey\n      }\n    }\n  }\n}\n","import { GetStructureSchema, publicKey, struct, u32, u64, u8 } from \"../marshmallow\";\n\nexport const SPL_MINT_LAYOUT = struct([\n  u32(\"mintAuthorityOption\"),\n  publicKey(\"mintAuthority\"),\n  u64(\"supply\"),\n  u8(\"decimals\"),\n  u8(\"isInitialized\"),\n  u32(\"freezeAuthorityOption\"),\n  publicKey(\"freezeAuthority\"),\n]);\n\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\n\nexport type SplMint = GetStructureSchema<SplMintLayout>;\n\n// 165 bytes\nexport const SPL_ACCOUNT_LAYOUT = struct([\n  publicKey(\"mint\"),\n  publicKey(\"owner\"),\n  u64(\"amount\"),\n  u32(\"delegateOption\"),\n  publicKey(\"delegate\"),\n  u8(\"state\"),\n  u32(\"isNativeOption\"),\n  u64(\"isNative\"),\n  u64(\"delegatedAmount\"),\n  u32(\"closeAuthorityOption\"),\n  publicKey(\"closeAuthority\"),\n]);\n\nexport type SplAccountLayout = typeof SPL_ACCOUNT_LAYOUT;\n\nexport type SplAccount = GetStructureSchema<SplAccountLayout>;\n","import {\n  createAssociatedTokenAccountInstruction, createCloseAccountInstruction, createInitializeAccountInstruction,\n  createInitializeMintInstruction, createMintToInstruction, createTransferInstruction,\n} from \"@solana/spl-token\";\nimport {\n  Commitment, Connection, Keypair, PublicKey, Signer, SystemProgram, TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { getATAAddress } from \"../ammV3/utils/pda\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID, SYSVAR_RENT_PUBKEY, TOKEN_PROGRAM_ID, validateAndParsePublicKey,\n} from \"../common\";\nimport { BigNumberish, parseBigNumberish } from \"../entity\";\nimport { u64, u8 } from \"../marshmallow\";\nimport { WSOL } from \"../token\";\n\nimport { SPL_ACCOUNT_LAYOUT } from \"./layout\";\n\n// https://github.com/solana-labs/solana-program-library/tree/master/token/js/client\nexport class Spl {\n  static getAssociatedTokenAccount({ mint, owner }: { mint: PublicKey; owner: PublicKey }) {\n    // return getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, mint, owner, true);\n    return getATAAddress(owner, mint).publicKey\n  }\n\n  static makeCreateAssociatedTokenAccountInstruction({\n    mint,\n    associatedAccount,\n    owner,\n    payer,\n  }: {\n    mint: PublicKey;\n    associatedAccount: PublicKey;\n    owner: PublicKey;\n    payer: PublicKey;\n  }) {\n    return createAssociatedTokenAccountInstruction(\n      payer,\n      associatedAccount,\n      owner,\n      mint,\n    );\n  }\n\n  // https://github.com/solana-labs/solana-program-library/blob/master/token/js/client/token.js\n  static async makeCreateWrappedNativeAccountInstructions({\n    connection,\n    owner,\n    payer,\n    amount,\n    // baseRentExemption,\n    commitment,\n  }: {\n    connection: Connection;\n    owner: PublicKey;\n    payer: PublicKey;\n    amount: BigNumberish;\n    // baseRentExemption?: number;\n    commitment?: Commitment;\n  }) {\n    const instructions: TransactionInstruction[] = [];\n\n    // Allocate memory for the account\n    // baseRentExemption = getMinimumBalanceForRentExemption size is 0\n    // -X POST -H \"Content-Type: application/json\" -d '{\"jsonrpc\":\"2.0\", \"id\":1, \"method\":\"getMinimumBalanceForRentExemption\", \"params\":[0]}'\n    // baseRentExemption = perByteRentExemption * 128\n    // balanceNeeded = baseRentExemption / 128 * (dataSize + 128)\n    const balanceNeeded = await connection.getMinimumBalanceForRentExemption(SPL_ACCOUNT_LAYOUT.span, commitment);\n\n    // Create a new account\n    const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\n    const newAccount = Keypair.generate();\n    instructions.push(\n      SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: lamports.toNumber(),\n        space: SPL_ACCOUNT_LAYOUT.span,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n    );\n\n    // * merge this instruction into SystemProgram.createAccount\n    // * will save transaction size ~17(441-424) bytes\n    // Send lamports to it (these will be wrapped into native tokens by the token program)\n    // instructions.push(\n    //   SystemProgram.transfer({\n    //     fromPubkey: payer,\n    //     toPubkey: newAccount.publicKey,\n    //     lamports: parseBigNumberish(amount).toNumber(),\n    //   }),\n    // );\n\n    // Assign the new account to the native token mint.\n    // the account will be initialized with a balance equal to the native token balance.\n    // (i.e. amount)\n    instructions.push(\n      this.makeInitAccountInstruction({\n        mint: validateAndParsePublicKey(WSOL.mint),\n        tokenAccount: newAccount.publicKey,\n        owner,\n      }),\n    );\n\n    return { newAccount, instructions };\n  }\n\n  static async insertCreateWrappedNativeAccountInstructions({\n    connection,\n    owner,\n    payer,\n    amount,\n    instructions,\n    signers,\n    commitment,\n  }: {\n    connection: Connection;\n    owner: PublicKey;\n    payer: PublicKey;\n    amount: BigNumberish;\n    instructions: TransactionInstruction[];\n    signers: Signer[];\n    commitment?: Commitment;\n  }) {\n    const { newAccount, instructions: newInstructions } = await this.makeCreateWrappedNativeAccountInstructions({\n      connection,\n      owner,\n      payer,\n      amount,\n      commitment,\n    });\n\n    instructions.push(...newInstructions);\n    signers.push(newAccount);\n\n    return newAccount.publicKey;\n  }\n\n  static makeInitMintInstruction({\n    mint,\n    decimals,\n    mintAuthority,\n    freezeAuthority = null,\n  }: {\n    mint: PublicKey;\n    decimals: number;\n    mintAuthority: PublicKey;\n    freezeAuthority?: PublicKey | null;\n  }) {\n    return createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority);\n  }\n\n  static makeMintToInstruction({\n    mint,\n    dest,\n    authority,\n    amount,\n    multiSigners = [],\n  }: {\n    mint: PublicKey;\n    dest: PublicKey;\n    authority: PublicKey;\n    amount: BigNumberish;\n    multiSigners?: Signer[];\n  }) {\n    return createMintToInstruction(mint, dest, authority, BigInt(String(amount)), multiSigners);\n  }\n\n  static makeInitAccountInstruction({\n    mint,\n    tokenAccount,\n    owner,\n  }: {\n    mint: PublicKey;\n    tokenAccount: PublicKey;\n    owner: PublicKey;\n  }) {\n    return createInitializeAccountInstruction(tokenAccount, mint, owner);\n  }\n\n  static makeTransferInstruction({\n    source,\n    destination,\n    owner,\n    amount,\n    multiSigners = [],\n  }: {\n    source: PublicKey;\n    destination: PublicKey;\n    owner: PublicKey;\n    amount: BigNumberish;\n    multiSigners?: Signer[];\n  }) {\n    return createTransferInstruction(\n      source,\n      destination,\n      owner,\n      BigInt(String(amount)),\n      multiSigners\n    );\n  }\n\n  static makeCloseAccountInstruction({\n    tokenAccount,\n    owner,\n    payer,\n    multiSigners = [],\n  }: {\n    tokenAccount: PublicKey;\n    owner: PublicKey;\n    payer: PublicKey;\n    multiSigners?: Signer[];\n  }) {\n    return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners);\n  }\n\n  static createInitAccountInstruction(programId, mint, account, owner) {\n    const keys = [{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: owner,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    const dataLayout = u8('instruction');\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(1, data);\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { BN } from \"bn.js\";\n\nimport { splitTxAndSigners } from \"../common\";\nimport { Spl } from \"../spl\";\nimport { WSOL } from \"../token\";\n\nimport { TokenAccount } from \"./base\";\n\nexport function unwarpSol({ ownerInfo, tokenAccounts }: {\n  ownerInfo: {\n    wallet: PublicKey,\n    payer: PublicKey\n  },\n  tokenAccounts: TokenAccount[],\n}) {\n  const WSOL_MINT = new PublicKey(WSOL.mint)\n  const instructionsInfo = tokenAccounts.filter(i => i.accountInfo.mint.equals(WSOL_MINT)).map(i => ({\n    amount: i.accountInfo.amount,\n    tx: Spl.makeCloseAccountInstruction({ tokenAccount: i.pubkey, owner: ownerInfo.wallet, payer: ownerInfo.payer })\n  }))\n  const transactions = splitTxAndSigners({ instructions: instructionsInfo.map(i => i.tx), signers: [], payer: ownerInfo.wallet })\n  const amount = instructionsInfo.map(i => i.amount).reduce((a, b) => a.add(b), new BN(0))\n\n  return { transactions, amount }\n}","import BN from \"bn.js\";\n\nimport { ONE } from \"../../entity\";\n\nexport const NEGATIVE_ONE = new BN(-1);\n\nexport const Q64 = new BN(1).shln(64);\nexport const Q128 = new BN(1).shln(128);\n\nexport const MaxU64 = Q64.sub(ONE);\n\nexport const U64Resolution = 64;\n\nexport const MaxUint128 = Q128.subn(1);\n\nexport const MIN_TICK = -307200;\nexport const MAX_TICK = -MIN_TICK;\n\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"3939943522091\");\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"86367321006760116002434269\");\n\nexport const MIN_TICK_ARRAY_START_INDEX = -307200;\nexport const MAX_TICK_ARRAY_START_INDEX = 306600;\n\nexport const BIT_PRECISION = 14;\nexport const LOG_B_2_X32 = \"59543866431248\";\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\n\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\n\nexport enum Fee {\n  rate_500 = 500, //  500 / 10e6 = 0.0005\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\n}\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\n  [Fee.rate_500]: 10,\n  [Fee.rate_3000]: 60,\n  [Fee.rate_10000]: 200,\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\n\nimport { ONE, ZERO } from \"../../entity\";\n\nimport {\n  BIT_PRECISION, Fee, FEE_RATE_DENOMINATOR, LOG_B_2_X32, LOG_B_P_ERR_MARGIN_LOWER_X64, LOG_B_P_ERR_MARGIN_UPPER_X64,\n  MAX_SQRT_PRICE_X64, MAX_TICK, MaxU64, MaxUint128, MIN_SQRT_PRICE_X64, MIN_TICK, NEGATIVE_ONE, Q128, Q64,\n  U64Resolution,\n} from \"./constants\";\nimport { TickArray } from \"./tick\";\nimport { TickQuery } from \"./tickQuery\";\n\nexport class MathUtil {\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\n    const numerator = a.mul(b);\n    let result = numerator.div(denominator);\n    if (!numerator.mod(denominator).eq(ZERO)) {\n      result = result.add(ONE);\n    }\n    return result;\n  }\n\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\n    if (denominator.eq(ZERO)) {\n      throw new Error(\"division by 0\");\n    }\n    return a.mul(b).div(denominator);\n  }\n\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\n    if (denominator.eq(ZERO)) {\n      throw new Error(\"division by 0\");\n    }\n    const numerator = a.mul(b).add(denominator.sub(ONE));\n    return numerator.div(denominator);\n  }\n\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\n    return new Decimal(num.toString())\n      .div(Decimal.pow(2, 64))\n      .toDecimalPlaces(decimalPlaces);\n  }\n\n  public static decimalToX64(num: Decimal): BN {\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\n  }\n\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\n    return n0.add(Q128).sub(n1).mod(Q128);\n  }\n}\n\n// sqrt price math\nfunction mulRightShift(val: BN, mulBy: BN): BN {\n  return signedRightShift(val.mul(mulBy), 64, 256);\n}\n\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number) {\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\n  twosN0.imaskn(bitWidth + 1);\n  return twosN0.fromTwos(bitWidth);\n}\n\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number) {\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\n  twoN0.imaskn(bitWidth - shiftBy + 1);\n  return twoN0.fromTwos(bitWidth - shiftBy);\n}\n\nexport class SqrtPriceMath {\n  public static sqrtPriceX64ToPrice(\n    sqrtPriceX64: BN,\n    decimalsA: number,\n    decimalsB: number\n  ): Decimal {\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\n      .pow(2)\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\n  }\n\n  public static priceToSqrtPriceX64(\n    price: Decimal,\n    decimalsA: number,\n    decimalsB: number\n  ): BN {\n    return MathUtil.decimalToX64(\n      price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt()\n    );\n  }\n\n  public static getNextSqrtPriceX64FromInput(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amountIn: BN,\n    zeroForOne: boolean\n  ): BN {\n    if (!sqrtPriceX64.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\n    }\n    if (!liquidity.gt(ZERO)) {\n      throw new Error(\"liquidity must greater than 0\");\n    }\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(\n        sqrtPriceX64,\n        liquidity,\n        amountIn,\n        true\n      )\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(\n        sqrtPriceX64,\n        liquidity,\n        amountIn,\n        true\n      );\n  }\n\n  public static getNextSqrtPriceX64FromOutput(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amountOut: BN,\n    zeroForOne: boolean\n  ): BN {\n    if (!sqrtPriceX64.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\n    }\n    if (!liquidity.gt(ZERO)) {\n      throw new Error(\"liquidity must greater than 0\");\n    }\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(\n        sqrtPriceX64,\n        liquidity,\n        amountOut,\n        false\n      )\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(\n        sqrtPriceX64,\n        liquidity,\n        amountOut,\n        false\n      );\n  }\n\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amount: BN,\n    add: boolean\n  ): BN {\n    if (amount.eq(ZERO)) return sqrtPriceX64;\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\n\n    if (add) {\n      const numerator1 = liquidityLeftShift;\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\n      if (denominator.gte(numerator1)) {\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\n      }\n      return MathUtil.mulDivRoundingUp(\n        numerator1,\n        ONE,\n        numerator1.div(sqrtPriceX64).add(amount)\n      );\n    } else {\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\n        throw new Error(\n          \"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\"\n        );\n      }\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\n    }\n  }\n\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\n    sqrtPriceX64: BN,\n    liquidity: BN,\n    amount: BN,\n    add: boolean\n  ): BN {\n    const deltaY = amount.shln(U64Resolution);\n    if (add) {\n      return sqrtPriceX64.add(deltaY.div(liquidity));\n    } else {\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(\n        deltaY,\n        ONE,\n        liquidity\n      );\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\n        throw new Error(\n          \"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\"\n        );\n      }\n      return sqrtPriceX64.sub(amountDivLiquidity);\n    }\n  }\n\n  public static getSqrtPriceX64FromTick(tick: number): BN {\n    if (!Number.isInteger(tick)) {\n      throw new Error(\"tick must be integer\");\n    }\n    if (tick < MIN_TICK || tick > MAX_TICK) {\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\n    }\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\n\n    let ratio: BN =\n      (tickAbs & 0x1) != 0\n        ? new BN(\"18445821805675395072\")\n        : new BN(\"18446744073709551616\");\n    if ((tickAbs & 0x2) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\n    if ((tickAbs & 0x4) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\n    if ((tickAbs & 0x8) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\n    if ((tickAbs & 0x10) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\n    if ((tickAbs & 0x20) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\n    if ((tickAbs & 0x40) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\n    if ((tickAbs & 0x80) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\n    if ((tickAbs & 0x100) != 0)\n      ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\n    if ((tickAbs & 0x200) != 0)\n      ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\n    if ((tickAbs & 0x400) != 0)\n      ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\n    if ((tickAbs & 0x800) != 0)\n      ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\n    if ((tickAbs & 0x1000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\n    if ((tickAbs & 0x2000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\n    if ((tickAbs & 0x4000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\n    if ((tickAbs & 0x8000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\n    if ((tickAbs & 0x10000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\n    if ((tickAbs & 0x20000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\n    if ((tickAbs & 0x40000) != 0)\n      ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\n\n    if (tick > 0) ratio = MaxUint128.div(ratio);\n    return ratio;\n  }\n\n  public static getTickFromPrice(\n    price: Decimal,\n    decimalsA: number,\n    decimalsB: number\n  ): number {\n    return SqrtPriceMath.getTickFromSqrtPriceX64(\n      SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB)\n    );\n  }\n\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\n    if (\n      sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) ||\n      sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)\n    ) {\n      throw new Error(\n        \"Provided sqrtPrice is not within the supported sqrtPrice range.\"\n      );\n    }\n\n    const msb = sqrtPriceX64.bitLength() - 1;\n    const adjustedMsb = new BN(msb - 64);\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\n\n    let bit = new BN(\"8000000000000000\", \"hex\");\n    let precision = 0;\n    let log2pFractionX64 = new BN(0);\n\n    let r =\n      msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\n\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\n      r = r.mul(r);\n      const rMoreThanTwo = r.shrn(127);\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\n      bit = bit.shrn(1);\n      precision += 1;\n    }\n\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\n\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\n\n    const tickLow = signedRightShift(\n      logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)),\n      64,\n      128\n    ).toNumber();\n    const tickHigh = signedRightShift(\n      logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)),\n      64,\n      128\n    ).toNumber();\n\n    if (tickLow == tickHigh) {\n      return tickLow;\n    } else {\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh)\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow\n    }\n  }\n}\n\n// tick math\nexport class TickMath {\n  public static getTickWithPriceAndTickspacing(\n    price: Decimal,\n    tickSpacing: number,\n    mintDecimalsA: number,\n    mintDecimalsB: number\n  ) {\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\n      SqrtPriceMath.priceToSqrtPriceX64(\n        price,\n        mintDecimalsA,\n        mintDecimalsB\n      )\n    );\n    let result = tick / tickSpacing;\n    if (result < 0) {\n      result = Math.floor(result);\n    } else {\n      result = Math.ceil(result);\n    }\n    return result * tickSpacing;\n  }\n\n  public static roundPriceWithTickspacing(\n    price: Decimal,\n    tickSpacing: number,\n    mintDecimalsA: number,\n    mintDecimalsB: number\n  ) {\n    const tick = TickMath.getTickWithPriceAndTickspacing(\n      price,\n      tickSpacing,\n      mintDecimalsA,\n      mintDecimalsB\n    );\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\n    return SqrtPriceMath.sqrtPriceX64ToPrice(\n      sqrtPriceX64,\n      mintDecimalsA,\n      mintDecimalsB\n    );\n  }\n}\n\nexport class LiquidityMath {\n  public static addDelta(x: BN, y: BN): BN {\n    return x.add(y);\n  }\n\n  public static getTokenAmountAFromLiquidity(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (!sqrtPriceX64A.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\n    }\n\n    const numerator1 = liquidity.ushln(U64Resolution);\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\n\n    return roundUp\n      ? MathUtil.mulDivRoundingUp(\n        MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B),\n        ONE,\n        sqrtPriceX64A\n      )\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(\n        sqrtPriceX64A\n      );\n  }\n\n  public static getTokenAmountBFromLiquidity(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n    if (!sqrtPriceX64A.gt(ZERO)) {\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\n    }\n\n    return roundUp\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\n  }\n\n  public static getLiquidityFromTokenAmountA(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    amountA: BN,\n    roundUp: boolean\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\n    const result = numerator.div(denominator);\n\n    if (roundUp) {\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\n    } else {\n      return result.shrn(U64Resolution);\n    }\n  }\n\n  public static getLiquidityFromTokenAmountB(\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    amountB: BN\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n    return MathUtil.mulDivFloor(\n      amountB,\n      MaxU64,\n      sqrtPriceX64B.sub(sqrtPriceX64A)\n    );\n  }\n\n  public static getLiquidityFromTokenAmounts(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    amountA: BN,\n    amountB: BN\n  ): BN {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\n      return LiquidityMath.getLiquidityFromTokenAmountA(\n        sqrtPriceX64A,\n        sqrtPriceX64B,\n        amountA,\n        false\n      );\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(\n        sqrtPriceCurrentX64,\n        sqrtPriceX64B,\n        amountA,\n        false\n      );\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(\n        sqrtPriceX64A,\n        sqrtPriceCurrentX64,\n        amountB\n      );\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\n    } else {\n      return LiquidityMath.getLiquidityFromTokenAmountB(\n        sqrtPriceX64A,\n        sqrtPriceX64B,\n        amountB\n      );\n    }\n  }\n\n  public static getAmountsFromLiquidity(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    roundUp: boolean\n  ): { amountA: BN, amountB: BN } {\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\n    }\n\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\n      return {\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(\n          sqrtPriceX64A,\n          sqrtPriceX64B,\n          liquidity,\n          roundUp\n        ),\n        amountB: new BN(0)\n      };\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\n        sqrtPriceCurrentX64,\n        sqrtPriceX64B,\n        liquidity,\n        roundUp\n      );\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\n        sqrtPriceX64A,\n        sqrtPriceCurrentX64,\n        liquidity,\n        roundUp\n      );\n      return { amountA, amountB };\n    } else {\n      return {\n        amountA: new BN(0),\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(\n          sqrtPriceX64A,\n          sqrtPriceX64B,\n          liquidity,\n          roundUp\n        ),\n      };\n    }\n  }\n\n  public static getAmountsFromLiquidityWithSlippage(\n    sqrtPriceCurrentX64: BN,\n    sqrtPriceX64A: BN,\n    sqrtPriceX64B: BN,\n    liquidity: BN,\n    amountMax: boolean,\n    roundUp: boolean,\n    amountSlippage: number\n  ) {\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\n      sqrtPriceCurrentX64,\n      sqrtPriceX64A,\n      sqrtPriceX64B,\n      liquidity,\n      roundUp\n    );\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\n\n    const amount0Slippage = amountA.muln(coefficient)\n    const amount1Slippage = amountB.muln(coefficient)\n    return {\n      amountSlippageA: amount0Slippage,\n      amountSlippageB: amount1Slippage,\n    };\n  }\n}\n\n// swap math\n\ntype SwapStep = {\n  sqrtPriceX64Next: BN;\n  amountIn: BN;\n  amountOut: BN;\n  feeAmount: BN;\n};\n\nexport interface StepComputations {\n  sqrtPriceStartX64: BN;\n  tickNext: number;\n  initialized: boolean;\n  sqrtPriceNextX64: BN;\n  amountIn: BN;\n  amountOut: BN;\n  feeAmount: BN;\n}\n\nexport abstract class SwapMath {\n  public static swapCompute(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    zeroForOne: boolean,\n    fee: number,\n    liquidity: BN,\n    currentTick: number,\n    tickSpacing: number,\n    currentSqrtPriceX64: BN,\n    amountSpecified: BN,\n    lastSavedTickArrayStartIndex: number,\n    sqrtPriceLimitX64?: BN\n  ) {\n    if (amountSpecified.eq(ZERO)) {\n      throw new Error(\"amountSpecified must not be 0\");\n    }\n    if (!sqrtPriceLimitX64)\n      sqrtPriceLimitX64 = zeroForOne\n        ? MIN_SQRT_PRICE_X64.add(ONE)\n        : MAX_SQRT_PRICE_X64.sub(ONE);\n\n    if (zeroForOne) {\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\n      }\n\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\n      }\n    } else {\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\n      }\n\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\n        throw new Error(\"sqrtPriceX64 must greater than current\");\n      }\n    }\n    const baseInput = amountSpecified.gt(ZERO);\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX64: currentSqrtPriceX64,\n      tick: currentTick,\n      accounts: [] as PublicKey[],\n      liquidity,\n      feeAmount: new BN(0),\n    };\n    let loopCount = 0;\n    while (\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\n      state.sqrtPriceX64 != sqrtPriceLimitX64 &&\n      state.tick < MAX_TICK &&\n      state.tick > MIN_TICK\n    ) {\n      if (loopCount > 10) {\n        throw Error(\"liquidity limit\");\n      }\n      const step: Partial<StepComputations> = {};\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\n      const { nextTick: nextInitTick, tickArrayAddress, tickArrayStartTickIndex: tickAarrayStartIndex } =\n        TickQuery.nextInitializedTick(\n          programId,\n          poolId,\n          tickArrayCache,\n          state.tick,\n          tickSpacing,\n          zeroForOne\n        );\n      step.tickNext = nextInitTick.tick;\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\n      if (\n        lastSavedTickArrayStartIndex !== tickAarrayStartIndex &&\n        tickArrayAddress\n      ) {\n        state.accounts.push(tickArrayAddress);\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\n      }\n      if (step.tickNext < MIN_TICK) {\n        step.tickNext = MIN_TICK;\n      } else if (step.tickNext > MAX_TICK) {\n        step.tickNext = MAX_TICK;\n      }\n\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(\n        step.tickNext\n      );\n      let targetPrice: BN;\n      if (\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\n      ) {\n        targetPrice = sqrtPriceLimitX64;\n      } else {\n        targetPrice = step.sqrtPriceNextX64;\n      }\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] =\n        SwapMath.swapStepCompute(\n          state.sqrtPriceX64,\n          targetPrice,\n          state.liquidity,\n          state.amountSpecifiedRemaining,\n          fee\n        );\n\n      state.feeAmount = state.feeAmount.add(step.feeAmount)\n\n      if (baseInput) {\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(\n          step.amountIn.add(step.feeAmount)\n        );\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\n      } else {\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(\n          step.amountOut\n        );\n        state.amountCalculated = state.amountCalculated.add(\n          step.amountIn.add(step.feeAmount)\n        );\n      }\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\n        if (step.initialized) {\n          let liquidityNet = nextInitTick.liquidityNet;\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\n          state.liquidity = LiquidityMath.addDelta(\n            state.liquidity,\n            liquidityNet\n          );\n        }\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\n        state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\n      }\n      ++loopCount;\n    }\n    return {\n      amountCalculated: state.amountCalculated,\n      feeAmount: state.feeAmount,\n      sqrtPriceX64: state.sqrtPriceX64,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick,\n      accounts: state.accounts,\n    };\n  }\n\n  private static swapStepCompute(\n    sqrtPriceX64Current: BN,\n    sqrtPriceX64Target: BN,\n    liquidity: BN,\n    amountRemaining: BN,\n    feeRate: Fee\n  ): [BN, BN, BN, BN] {\n    const swapStep: SwapStep = {\n      sqrtPriceX64Next: new BN(0),\n      amountIn: new BN(0),\n      amountOut: new BN(0),\n      feeAmount: new BN(0),\n    };\n\n    const zeroForOne = sqrtPriceX64Current.gte(sqrtPriceX64Target);\n    const baseInput = amountRemaining.gte(ZERO);\n\n    if (baseInput) {\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\n        amountRemaining,\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\n        FEE_RATE_DENOMINATOR\n      );\n      swapStep.amountIn = zeroForOne\n        ? LiquidityMath.getTokenAmountAFromLiquidity(\n          sqrtPriceX64Target,\n          sqrtPriceX64Current,\n          liquidity,\n          true\n        )\n        : LiquidityMath.getTokenAmountBFromLiquidity(\n          sqrtPriceX64Current,\n          sqrtPriceX64Target,\n          liquidity,\n          true\n        );\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\n      } else {\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\n          sqrtPriceX64Current,\n          liquidity,\n          amountRemainingSubtractFee,\n          zeroForOne\n        );\n      }\n    } else {\n      swapStep.amountOut = zeroForOne\n        ? LiquidityMath.getTokenAmountBFromLiquidity(\n          sqrtPriceX64Target,\n          sqrtPriceX64Current,\n          liquidity,\n          false\n        )\n        : LiquidityMath.getTokenAmountAFromLiquidity(\n          sqrtPriceX64Current,\n          sqrtPriceX64Target,\n          liquidity,\n          false\n        );\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\n      } else {\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\n          sqrtPriceX64Current,\n          liquidity,\n          amountRemaining.mul(NEGATIVE_ONE),\n          zeroForOne\n        );\n      }\n    }\n\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\n\n    if (zeroForOne) {\n      if (!(reachTargetPrice && baseInput)) {\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\n          swapStep.sqrtPriceX64Next,\n          sqrtPriceX64Current,\n          liquidity,\n          true\n        );\n      }\n\n      if (!(reachTargetPrice && !baseInput)) {\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\n          swapStep.sqrtPriceX64Next,\n          sqrtPriceX64Current,\n          liquidity,\n          false\n        );\n      }\n    } else {\n      swapStep.amountIn =\n        reachTargetPrice && baseInput\n          ? swapStep.amountIn\n          : LiquidityMath.getTokenAmountBFromLiquidity(\n            sqrtPriceX64Current,\n            swapStep.sqrtPriceX64Next,\n            liquidity,\n            true\n          );\n      swapStep.amountOut =\n        reachTargetPrice && !baseInput\n          ? swapStep.amountOut\n          : LiquidityMath.getTokenAmountAFromLiquidity(\n            sqrtPriceX64Current,\n            swapStep.sqrtPriceX64Next,\n            liquidity,\n            false\n          );\n    }\n\n    if (\n      !baseInput &&\n      swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))\n    ) {\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\n    }\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\n    } else {\n      swapStep.feeAmount = MathUtil.mulDivCeil(\n        swapStep.amountIn,\n        new BN(feeRate),\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate))\n      );\n    }\n    return [\n      swapStep.sqrtPriceX64Next,\n      swapStep.amountIn,\n      swapStep.amountOut,\n      swapStep.feeAmount,\n    ];\n  }\n}\n","import { Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { getMultipleAccountsInfo } from \"../../common\";\nimport { TickArrayLayout } from \"../layout\";\n\nimport { MAX_TICK_ARRAY_START_INDEX, MIN_TICK_ARRAY_START_INDEX } from \"./constants\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { Tick, TICK_ARRAY_SIZE, TickArray, TickUtils } from \"./tick\";\n\nexport const FETCH_TICKARRAY_COUNT = 15;\n\nexport declare type PoolVars = {\n  key: PublicKey;\n  tokenA: PublicKey;\n  tokenB: PublicKey;\n  fee: number;\n};\n\nexport class TickQuery {\n  public static async getTickArrays(\n    connection: Connection,\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickCurrent: number,\n    tickSpacing: number,\n    tickArrayBitmapArray: BN[]\n  ) {\n    const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(tickArrayBitmapArray);\n    const tickArraysToFetch: PublicKey[] = [];\n    const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickCurrent, tickSpacing);\n\n    const startIndexArray = TickUtils.getInitializedTickArrayInRange(tickArrayBitmap, tickSpacing, currentTickArrayStartIndex, Math.floor(FETCH_TICKARRAY_COUNT / 2));\n    for (let i = 0; i < startIndexArray.length; i++) {\n      const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n        programId,\n        poolId,\n        startIndexArray[i]\n      );\n      tickArraysToFetch.push(tickArrayAddress);\n    }\n\n    const fetchedTickArrays = (await getMultipleAccountsInfo(connection, tickArraysToFetch)).map(i => i !== null ? TickArrayLayout.decode(i.data) : null)\n\n    const tickArrayCache: { [key: string]: TickArray } = {};\n    for (let i = 0; i < tickArraysToFetch.length; i++) {\n      const _info = fetchedTickArrays[i]\n      if (_info === null) continue\n\n      tickArrayCache[_info.startTickIndex] = {\n        ..._info,\n        address: tickArraysToFetch[i],\n      }\n    }\n    return tickArrayCache;\n  }\n\n  public static nextInitializedTick(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean\n  ) {\n    let {\n      initializedTick: nextTick,\n      tickArrayAddress,\n      tickArrayStartTickIndex,\n    } = this.nextInitializedTickInOneArray(\n      programId,\n      poolId,\n      tickArrayCache,\n      tickIndex,\n      tickSpacing,\n      zeroForOne\n    );\n    while (nextTick == undefined || nextTick.liquidityGross.lten(0)) {\n      tickArrayStartTickIndex = TickUtils.getNextTickArrayStartIndex(\n        tickArrayStartTickIndex,\n        tickSpacing,\n        zeroForOne\n      );\n      if (\n        tickArrayStartTickIndex < MIN_TICK_ARRAY_START_INDEX ||\n        tickArrayStartTickIndex > MAX_TICK_ARRAY_START_INDEX\n      ) {\n        throw new Error(\"No enough initialized tickArray\");\n      }\n      const cachedTickArray = tickArrayCache[tickArrayStartTickIndex];\n\n      if (cachedTickArray === undefined) continue\n\n      const { nextTick: _nextTick, tickArrayAddress: _tickArrayAddress, tickArrayStartTickIndex: _tickArrayStartTickIndex } = this.firstInitializedTickInOneArray(\n        programId,\n        poolId,\n        cachedTickArray,\n        zeroForOne\n      );\n      [nextTick, tickArrayAddress, tickArrayStartTickIndex] = [_nextTick, _tickArrayAddress, _tickArrayStartTickIndex]\n    }\n    if (nextTick == undefined) {\n      throw new Error(\"No invaild tickArray cache\");\n    }\n    return { nextTick, tickArrayAddress, tickArrayStartTickIndex };\n  }\n\n  public static firstInitializedTickInOneArray(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArray: TickArray,\n    zeroForOne: boolean\n  ) {\n    let nextInitializedTick: Tick | undefined = undefined;\n    if (zeroForOne) {\n      let i = TICK_ARRAY_SIZE - 1;\n      while (i >= 0) {\n        const tickInArray = tickArray.ticks[i];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        i = i - 1;\n      }\n    } else {\n      let i = 0;\n      while (i < TICK_ARRAY_SIZE) {\n        const tickInArray = tickArray.ticks[i];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        i = i + 1;\n      }\n    }\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n      programId,\n      poolId,\n      tickArray.startTickIndex\n    );\n    return { nextTick: nextInitializedTick, tickArrayAddress, tickArrayStartTickIndex: tickArray.startTickIndex };\n  }\n\n  public static nextInitializedTickInOneArray(\n    programId: PublicKey,\n    poolId: PublicKey,\n    tickArrayCache: { [key: string]: TickArray },\n    tickIndex: number,\n    tickSpacing: number,\n    zeroForOne: boolean\n  ): {\n    initializedTick: Tick | undefined;\n    tickArrayAddress: PublicKey | undefined;\n    tickArrayStartTickIndex: number;\n  } {\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(\n      tickIndex,\n      tickSpacing\n    );\n    let tickPositionInArray = Math.floor(\n      (tickIndex - startIndex) / tickSpacing\n    );\n    const cachedTickArray = tickArrayCache[startIndex];\n    if (cachedTickArray == undefined) {\n      return {\n        initializedTick: undefined,\n        tickArrayAddress: undefined,\n        tickArrayStartTickIndex: startIndex,\n      };\n    }\n    let nextInitializedTick: Tick | undefined = undefined;\n    if (zeroForOne) {\n      while (tickPositionInArray >= 0) {\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        tickPositionInArray = tickPositionInArray - 1;\n      }\n    } else {\n      tickPositionInArray = tickPositionInArray + 1;\n      while (tickPositionInArray < TICK_ARRAY_SIZE) {\n        const tickInArray = cachedTickArray.ticks[tickPositionInArray];\n        if (tickInArray.liquidityGross.gtn(0)) {\n          nextInitializedTick = tickInArray;\n          break;\n        }\n        tickPositionInArray = tickPositionInArray + 1;\n      }\n    }\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\n      programId,\n      poolId,\n      startIndex\n    );\n    return {\n      initializedTick: nextInitializedTick,\n      tickArrayAddress,\n      tickArrayStartTickIndex: cachedTickArray.startTickIndex,\n    };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { ZERO } from \"../../entity\";\nimport { AmmV3PoolInfo, AmmV3PoolRewardInfo, AmmV3PoolRewardLayoutInfo } from \"../ammV3\";\n\nimport { NEGATIVE_ONE, Q64 } from \"./constants\";\nimport { MathUtil, SwapMath } from \"./math\";\nimport { getPdaTickArrayAddress } from \"./pda\";\nimport { TickArray, TickUtils } from \"./tick\";\n\nexport class PoolUtils {\n  public static getOutputAmountAndRemainAccounts(\n    poolInfo: AmmV3PoolInfo,\n    tickArrayCache: { [key: string]: TickArray },\n    inputTokenMint: PublicKey,\n    inputAmount: BN,\n    sqrtPriceLimitX64?: BN\n  ) {\n    const zeroForOne = inputTokenMint.equals(poolInfo.mintA.mint);\n\n    const allNeededAccounts: PublicKey[] = [];\n    const { isExist, startIndex: firstTickArrayStartIndex, nextAccountMeta } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\n\n    allNeededAccounts.push(nextAccountMeta);\n    const {\n      amountCalculated: outputAmount,\n      accounts: reaminAccounts,\n      sqrtPriceX64: executionPrice,\n      feeAmount\n    } = SwapMath.swapCompute(\n      poolInfo.programId,\n      poolInfo.id,\n      tickArrayCache,\n      zeroForOne,\n      poolInfo.ammConfig.tradeFeeRate,\n      poolInfo.liquidity,\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing,\n      poolInfo.sqrtPriceX64,\n      inputAmount,\n      firstTickArrayStartIndex,\n      sqrtPriceLimitX64\n    );\n    allNeededAccounts.push(...reaminAccounts);\n    return { expectedAmountOut: outputAmount.mul(NEGATIVE_ONE), remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\n  }\n\n  public static getFirstInitializedTickArray(\n    poolInfo: AmmV3PoolInfo,\n    zeroForOne: boolean\n  ): { isExist: true, startIndex: number, nextAccountMeta: PublicKey } | { isExist: false, startIndex: undefined, nextAccountMeta: undefined } {\n    const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\n      poolInfo.tickArrayBitmap\n    );\n    const { isInitialized, startIndex } = TickUtils.checkTickArrayIsInitialized(\n      tickArrayBitmap,\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing\n    );\n    if (isInitialized) {\n      const { publicKey: address } = getPdaTickArrayAddress(\n        poolInfo.programId,\n        poolInfo.id,\n        startIndex\n      );\n      return {\n        isExist: true,\n        startIndex,\n        nextAccountMeta: address\n      }\n    }\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(poolInfo, zeroForOne);\n    if (isExist) {\n      const { publicKey: address } = getPdaTickArrayAddress(\n        poolInfo.programId,\n        poolInfo.id,\n        nextStartIndex\n      );\n      return {\n        isExist: true,\n        startIndex: nextStartIndex,\n        nextAccountMeta: address\n      }\n    }\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined }\n  }\n\n  public static nextInitializedTickArrayStartIndex(\n    poolInfo: AmmV3PoolInfo,\n    zeroForOne: boolean) {\n    const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\n      poolInfo.tickArrayBitmap\n    );\n    const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\n      poolInfo.tickCurrent,\n      poolInfo.tickSpacing\n    );\n    const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\n      tickArrayBitmap,\n      currentOffset - 1,\n      0,\n      1,\n      poolInfo.tickSpacing\n    ) : TickUtils.searchHightBitFromStart(\n      tickArrayBitmap,\n      currentOffset,\n      1024,\n      1,\n      poolInfo.tickSpacing\n    );\n\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\n  }\n\n  public static updatePoolRewardInfos({ chainTime, poolLiquidity, rewardInfos }: {\n    chainTime: number,\n    poolLiquidity: BN,\n    rewardInfos: AmmV3PoolRewardLayoutInfo[],\n  }) {\n    const nRewardInfo: AmmV3PoolRewardInfo[] = []\n    for (const _itemReward of rewardInfos) {\n      const itemReward = {\n        ..._itemReward,\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\n        remainingRewards: undefined\n      }\n\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\n        nRewardInfo.push(itemReward)\n        continue\n      }\n\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime))\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime)\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(\n        timeDelta,\n        itemReward.emissionsPerSecondX64,\n        poolLiquidity\n      );\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64)\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(\n        timeDelta,\n        itemReward.emissionsPerSecondX64,\n        Q64\n      )\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta)\n      nRewardInfo.push({\n        ...itemReward,\n        rewardGrowthGlobalX64,\n        rewardTotalEmissioned,\n        lastUpdateTime: latestUpdateTime\n      })\n    }\n    return nRewardInfo\n  }\n}\n","import BN from \"bn.js\";\n\nimport { AmmV3PoolInfo, AmmV3PoolPersonalPosition, AmmV3PoolRewardInfo } from \"../ammV3\";\n\nimport { Q64 } from \"./constants\";\nimport { MathUtil } from \"./math\";\nimport { Tick } from \"./tick\";\n\nexport class PositionUtils {\n\n  static getfeeGrowthInside(\n    poolState: AmmV3PoolInfo,\n    tickLowerState: Tick,\n    tickUpperState: Tick\n  ) {\n    let feeGrowthBelowX64A = new BN(0);\n    let feeGrowthBelowX64B = new BN(0);\n    if (poolState.tickCurrent >= tickLowerState.tick) {\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\n    } else {\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(\n        tickLowerState.feeGrowthOutsideX64A\n      );\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(\n        tickLowerState.feeGrowthOutsideX64B\n      );\n    }\n\n    let feeGrowthAboveX64A = new BN(0);\n    let feeGrowthAboveX64B = new BN(0);\n    if (poolState.tickCurrent < tickUpperState.tick) {\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\n    } else {\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(\n        tickUpperState.feeGrowthOutsideX64A\n      );\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(\n        tickUpperState.feeGrowthOutsideX64B\n      );\n    }\n\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\n      feeGrowthAboveX64A\n    );\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\n      feeGrowthAboveX64B\n    );\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\n  }\n\n  static GetPositionFees(\n    ammPool: AmmV3PoolInfo,\n    positionState: AmmV3PoolPersonalPosition,\n    tickLowerState: Tick,\n    tickUpperState: Tick\n  ) {\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\n      ammPool,\n      tickLowerState,\n      tickUpperState\n    );\n\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(\n        feeGrowthInsideX64A,\n        positionState.feeGrowthInsideLastX64A\n      ),\n      positionState.liquidity,\n      Q64\n    );\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\n\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\n      MathUtil.wrappingSubU128(\n        feeGrowthInsideBX64,\n        positionState.feeGrowthInsideLastX64B\n      ),\n      positionState.liquidity,\n      Q64\n    );\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\n\n    return { tokenFeeAmountA, tokenFeeAmountB };\n  }\n\n  static GetPositionRewards(\n    ammPool: AmmV3PoolInfo,\n    positionState: AmmV3PoolPersonalPosition,\n    tickLowerState: Tick,\n    tickUpperState: Tick\n  ): BN[] {\n    const rewards: BN[] = [];\n\n    const rewardGrowthsInside = this.getRewardGrowthInside(\n      ammPool.tickCurrent,\n      tickLowerState,\n      tickUpperState,\n      ammPool.rewardInfos\n    );\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\n      const rewardGrowthInside = rewardGrowthsInside[i];\n      const currRewardInfo = positionState.rewardInfos[i];\n\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(\n        rewardGrowthInside,\n        currRewardInfo.growthInsideLastX64\n      );\n      const amountOwedDelta = MathUtil.mulDivFloor(\n        rewardGrowthDelta,\n        positionState.liquidity,\n        Q64\n      );\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\n      rewards.push(rewardAmountOwed);\n    }\n    return rewards;\n  }\n\n  static getRewardGrowthInside(\n    tickCurrentIndex: number,\n    tickLowerState: Tick,\n    tickUpperState: Tick,\n    rewardInfos: AmmV3PoolRewardInfo[]\n  ): BN[] {\n    const rewardGrowthsInside: BN[] = [];\n    for (let i = 0; i < rewardInfos.length; i++) {\n      let rewardGrowthsBelow = new BN(0);\n      if (tickLowerState.liquidityGross.eqn(0)) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\n      } else if (tickCurrentIndex < tickLowerState.tick) {\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(\n          tickLowerState.rewardGrowthsOutsideX64[i]\n        );\n      } else {\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\n      }\n\n      let rewardGrowthsAbove = new BN(0);\n      if (tickUpperState.liquidityGross.eqn(0)) {\n        //\n      } else if (tickCurrentIndex < tickUpperState.tick) {\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\n      } else {\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(\n          tickUpperState.rewardGrowthsOutsideX64[i]\n        );\n      }\n\n      rewardGrowthsInside.push(\n        MathUtil.wrappingSubU128(\n          MathUtil.wrappingSubU128(\n            rewardInfos[i].rewardGrowthGlobalX64,\n            rewardGrowthsBelow\n          ),\n          rewardGrowthsAbove\n        )\n      );\n    }\n\n    return rewardGrowthsInside;\n  }\n}","import { PublicKey } from \"@solana/web3.js\";\n\nimport { SerumVersion } from \"../serum\";\n\nimport { LiquidityVersion } from \"./type\";\n\n/* ================= program public keys ================= */\nexport const _LIQUIDITY_PROGRAM_ID_V4 = \"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\";\nexport const LIQUIDITY_PROGRAM_ID_V4 = new PublicKey(_LIQUIDITY_PROGRAM_ID_V4);\n\nexport const _LIQUIDITY_PROGRAM_ID_V5 = \"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\";\nexport const LIQUIDITY_PROGRAM_ID_V5 = new PublicKey(_LIQUIDITY_PROGRAM_ID_V5);\n\n// liquidity program id string => liquidity version\nexport const LIQUIDITY_PROGRAMID_TO_VERSION: {\n  [key: string]: LiquidityVersion;\n} = {\n  [_LIQUIDITY_PROGRAM_ID_V4]: 4,\n  [_LIQUIDITY_PROGRAM_ID_V5]: 5,\n};\n\n// liquidity version => liquidity program id\nexport const LIQUIDITY_VERSION_TO_PROGRAMID: { [key in LiquidityVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  4: LIQUIDITY_PROGRAM_ID_V4,\n  5: LIQUIDITY_PROGRAM_ID_V5,\n};\n\n// liquidity version => serum version\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\n  [key in LiquidityVersion]?: SerumVersion;\n} & {\n  [K: number]: SerumVersion;\n} = {\n  4: 3,\n  5: 3,\n};\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64 } from \"../marshmallow\";\n\n/* ================= state layouts ================= */\nexport const LIQUIDITY_STATE_LAYOUT_V4 = struct([\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalValue\"),\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u128(\"quoteTotalDeposited\"),\n  u128(\"baseTotalDeposited\"),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u64(\"swapBase2QuoteFee\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  // amm vault\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  // mint\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n  // market\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"withdrawQueue\"),\n  publicKey(\"lpVault\"),\n  publicKey(\"owner\"),\n  // true circulating supply without lock up\n  u64(\"lpReserve\"),\n  seq(u64(), 3, \"padding\"),\n]);\n\nexport type LiquidityStateLayoutV4 = typeof LIQUIDITY_STATE_LAYOUT_V4;\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\n\nexport const LIQUIDITY_STATE_LAYOUT_V5 = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"nonce\"),\n  u64(\"maxOrder\"),\n  u64(\"depth\"),\n  u64(\"baseDecimal\"),\n  u64(\"quoteDecimal\"),\n  u64(\"state\"),\n  u64(\"resetFlag\"),\n  u64(\"minSize\"),\n  u64(\"volMaxCutRatio\"),\n  u64(\"amountWaveRatio\"),\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n  u64(\"minPriceMultiplier\"),\n  u64(\"maxPriceMultiplier\"),\n  u64(\"systemDecimalsValue\"),\n  u64(\"abortTradeFactor\"),\n  u64(\"priceTickMultiplier\"),\n  u64(\"priceTick\"),\n  // Fees\n  u64(\"minSeparateNumerator\"),\n  u64(\"minSeparateDenominator\"),\n  u64(\"tradeFeeNumerator\"),\n  u64(\"tradeFeeDenominator\"),\n  u64(\"pnlNumerator\"),\n  u64(\"pnlDenominator\"),\n  u64(\"swapFeeNumerator\"),\n  u64(\"swapFeeDenominator\"),\n  // OutPutData\n  u64(\"baseNeedTakePnl\"),\n  u64(\"quoteNeedTakePnl\"),\n  u64(\"quoteTotalPnl\"),\n  u64(\"baseTotalPnl\"),\n  u64(\"poolOpenTime\"),\n  u64(\"punishPcAmount\"),\n  u64(\"punishCoinAmount\"),\n  u64(\"orderbookToInitTime\"),\n  u128(\"swapBaseInAmount\"),\n  u128(\"swapQuoteOutAmount\"),\n  u128(\"swapQuoteInAmount\"),\n  u128(\"swapBaseOutAmount\"),\n  u64(\"swapQuote2BaseFee\"),\n  u64(\"swapBase2QuoteFee\"),\n\n  publicKey(\"baseVault\"),\n  publicKey(\"quoteVault\"),\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n  publicKey(\"lpMint\"),\n\n  publicKey(\"modelDataAccount\"),\n  publicKey(\"openOrders\"),\n  publicKey(\"marketId\"),\n  publicKey(\"marketProgramId\"),\n  publicKey(\"targetOrders\"),\n  publicKey(\"owner\"),\n  seq(u64(), 64, \"padding\"),\n]);\n\nexport type LiquidityStateLayoutV5 = typeof LIQUIDITY_STATE_LAYOUT_V5;\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\n\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\n\n/* ================= index ================= */\n// version => liquidity state layout\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: LiquidityStateLayout;\n} = {\n  4: LIQUIDITY_STATE_LAYOUT_V4,\n  5: LIQUIDITY_STATE_LAYOUT_V5,\n};\n","import {\n  AccountInfo, ComputeBudgetProgram, Connection, PublicKey, Signer, Transaction, TransactionInstruction,\n} from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { Base, TokenAccount } from \"../base\";\nimport {\n  AccountMeta, AccountMetaReadonly, findProgramAddress, getMultipleAccountsInfo, GetMultipleAccountsInfoConfig, Logger,\n  parseSimulateLogToJson, parseSimulateValue, simulateMultipleInstruction, SYSTEM_PROGRAM_ID, SYSVAR_RENT_PUBKEY,\n  TOKEN_PROGRAM_ID,\n} from \"../common\";\nimport {\n  BigNumberish, Currency, CurrencyAmount, divCeil, ONE, parseBigNumberish, Percent, Price, Token, TokenAmount, ZERO,\n} from \"../entity\";\nimport { struct, u64, u8 } from \"../marshmallow\";\nimport { Market } from \"../serum\";\nimport { Spl } from \"../spl\";\n\nimport {\n  LIQUIDITY_PROGRAMID_TO_VERSION, LIQUIDITY_VERSION_TO_PROGRAMID, LIQUIDITY_VERSION_TO_SERUM_VERSION,\n} from \"./id\";\nimport { LIQUIDITY_VERSION_TO_STATE_LAYOUT, LiquidityStateLayout, LiquidityStateV4 } from \"./layout\";\nimport {\n  formatLayout, getDxByDyBaseIn, getDyByDxBaseIn, getStablePrice, ModelDataPubkey, stableModelLayout,\n} from \"./stable\";\nimport { LiquidityPoolJsonInfo } from \"./type\";\n\nconst logger = Logger.from(\"Liquidity\");\n\nlet modelData: stableModelLayout = {\n  accountType: 0,\n  status: 0,\n  multiplier: 0,\n  validDataCount: 0,\n  DataElement: [],\n};\n\nexport async function initStableModelLayout(connection: Connection) {\n  if (modelData.validDataCount === 0) {\n    if (connection) {\n      const acc = await connection.getAccountInfo(ModelDataPubkey);\n      if (acc) modelData = formatLayout(acc?.data);\n    }\n  }\n}\n\n// buy: quote => base\n// sell: base => quote\n// export type TradeSide = \"buy\" | \"sell\";\n\nexport type SwapSide = \"in\" | \"out\";\nexport type LiquiditySide = \"a\" | \"b\";\n// for inner instruction\nexport type AmountSide = \"base\" | \"quote\";\n\n/* ================= pool keys ================= */\nexport type LiquidityPoolKeysV4 = {\n  [T in keyof LiquidityPoolJsonInfo]: string extends LiquidityPoolJsonInfo[T] ? PublicKey : LiquidityPoolJsonInfo[T];\n};\n\n/**\n * Full liquidity pool keys that build transaction need\n */\nexport type LiquidityPoolKeys = LiquidityPoolKeysV4;\n\nexport interface LiquidityAssociatedPoolKeysV4\n  extends Omit<\n  LiquidityPoolKeysV4,\n  \"marketBaseVault\" | \"marketQuoteVault\" | \"marketBids\" | \"marketAsks\" | \"marketEventQueue\"\n  > {\n  nonce: number;\n}\n\n/**\n * Associated liquidity pool keys\n * @remarks\n * without partial markets keys\n */\nexport type LiquidityAssociatedPoolKeys = LiquidityAssociatedPoolKeysV4;\n\nexport enum LiquidityPoolStatus {\n  Uninitialized,\n  Initialized,\n  Disabled,\n  RemoveLiquidityOnly,\n  LiquidityOnly,\n  OrderBook,\n  Swap,\n  WaitingForStart,\n}\n\n/* ================= pool info ================= */\n/**\n * Liquidity pool info\n * @remarks\n * same data type with layouts\n */\nexport interface LiquidityPoolInfo {\n  status: BN;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  baseReserve: BN;\n  quoteReserve: BN;\n  lpSupply: BN;\n  startTime: BN;\n}\n\n/* ================= user keys ================= */\n/**\n * Full user keys that build transaction need\n */\nexport interface LiquidityUserKeys {\n  baseTokenAccount: PublicKey;\n  quoteTokenAccount: PublicKey;\n  lpTokenAccount: PublicKey;\n  owner: PublicKey;\n}\n\n// liquidity class\n// export interface LiquidityLoadParams {\n//   connection: Connection;\n//   poolKeys: LiquidityPoolKeys;\n//   poolInfo?: LiquidityPoolInfo;\n// }\n\n// export type LiquidityConstructParams = Required<LiquidityLoadParams>;\n\n/* ================= make instruction and transaction ================= */\nexport interface LiquidityAddInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: LiquidityUserKeys;\n  baseAmountIn: BigNumberish;\n  quoteAmountIn: BigNumberish;\n  fixedSide: AmountSide;\n}\n\n/**\n * Add liquidity instruction params\n */\nexport type LiquidityAddInstructionParams = LiquidityAddInstructionParamsV4;\n\n/**\n * Add liquidity transaction params\n */\nexport interface LiquidityAddTransactionParams {\n  connection: Connection;\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccounts: TokenAccount[];\n    owner: PublicKey;\n    payer?: PublicKey;\n  };\n  amountInA: CurrencyAmount | TokenAmount;\n  amountInB: CurrencyAmount | TokenAmount;\n  fixedSide: LiquiditySide;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\nexport interface LiquidityRemoveInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: LiquidityUserKeys;\n  amountIn: BigNumberish;\n}\n\n/**\n * Remove liquidity instruction params\n */\nexport type LiquidityRemoveInstructionParams = LiquidityRemoveInstructionParamsV4;\n\n/**\n * Remove liquidity transaction params\n */\nexport interface LiquidityRemoveTransactionParams {\n  connection: Connection;\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccounts: TokenAccount[];\n    owner: PublicKey;\n    payer?: PublicKey;\n  };\n  amountIn: TokenAmount;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\nexport interface LiquiditySwapFixedInInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccountIn: PublicKey;\n    tokenAccountOut: PublicKey;\n    owner: PublicKey;\n  };\n  amountIn: BigNumberish;\n  // minimum amount out\n  minAmountOut: BigNumberish;\n}\n\nexport interface LiquiditySwapFixedOutInstructionParamsV4 {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccountIn: PublicKey;\n    tokenAccountOut: PublicKey;\n    owner: PublicKey;\n  };\n  // maximum amount in\n  maxAmountIn: BigNumberish;\n  amountOut: BigNumberish;\n}\n\n/**\n * Swap instruction params\n */\nexport interface LiquiditySwapInstructionParams {\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccountIn: PublicKey;\n    tokenAccountOut: PublicKey;\n    owner: PublicKey;\n  };\n  amountIn: BigNumberish;\n  amountOut: BigNumberish;\n  fixedSide: SwapSide;\n}\n\n/**\n * Swap transaction params\n */\nexport interface LiquiditySwapTransactionParams {\n  connection: Connection;\n  poolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccounts: TokenAccount[];\n    owner: PublicKey;\n    payer?: PublicKey;\n  };\n  amountIn: CurrencyAmount | TokenAmount;\n  amountOut: CurrencyAmount | TokenAmount;\n  fixedSide: SwapSide;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\nexport interface LiquidityCreatePoolInstructionParamsV4 {\n  poolKeys: LiquidityAssociatedPoolKeysV4;\n  userKeys: {\n    payer: PublicKey;\n  };\n}\n\n/**\n * Create pool instruction params\n */\nexport type LiquidityCreatePoolInstructionParams = LiquidityCreatePoolInstructionParamsV4;\n\n/**\n * Create pool transaction params\n */\nexport type LiquidityCreatePoolTransactionParams = LiquidityCreatePoolInstructionParams;\n\nexport interface LiquidityInitPoolInstructionParamsV4 {\n  poolKeys: LiquidityAssociatedPoolKeysV4;\n  userKeys: {\n    lpTokenAccount: PublicKey;\n    payer: PublicKey;\n  };\n  startTime: BigNumberish;\n}\n\n/**\n * Init pool instruction params\n */\nexport type LiquidityInitPoolInstructionParams = LiquidityInitPoolInstructionParamsV4;\n\n/**\n * Init pool transaction params\n */\nexport interface LiquidityInitPoolTransactionParams {\n  connection: Connection;\n  poolKeys: LiquidityAssociatedPoolKeysV4;\n  userKeys: {\n    tokenAccounts: TokenAccount[];\n    owner: PublicKey;\n    payer?: PublicKey;\n  };\n  baseAmount: CurrencyAmount | TokenAmount;\n  quoteAmount: CurrencyAmount | TokenAmount;\n  startTime?: BigNumberish;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\n/* ================= fetch data ================= */\n/**\n * Fetch liquidity pool info params\n */\nexport interface LiquidityFetchInfoParams {\n  connection: Connection;\n  poolKeys: LiquidityPoolKeys;\n}\n\n/**\n * Fetch liquidity multiple pool info params\n */\nexport interface LiquidityFetchMultipleInfoParams {\n  connection: Connection;\n  pools: LiquidityPoolKeys[];\n  config?: GetMultipleAccountsInfoConfig;\n}\n\n/* ================= compute data ================= */\nexport interface LiquidityComputeAnotherAmountParams {\n  poolKeys: LiquidityPoolKeys;\n  poolInfo: LiquidityPoolInfo;\n  amount: CurrencyAmount | TokenAmount;\n  anotherCurrency: Currency | Token;\n  slippage: Percent;\n}\n\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\n\nexport interface LiquidityComputeAmountOutParams {\n  poolKeys: LiquidityPoolKeys;\n  poolInfo: LiquidityPoolInfo;\n  amountIn: CurrencyAmount | TokenAmount;\n  currencyOut: Currency | Token;\n  slippage: Percent;\n}\n\nexport interface LiquidityComputeAmountInParams\n  extends Omit<LiquidityComputeAmountOutParams, \"amountIn\" | \"currencyOut\"> {\n  amountOut: CurrencyAmount | TokenAmount;\n  currencyIn: Currency | Token;\n}\n\nexport class Liquidity extends Base {\n  // public connection: Connection;\n  // public poolKeys: LiquidityPoolKeys;\n  // public poolInfo: LiquidityPoolInfo;\n\n  // constructor({ connection, poolKeys, poolInfo }: LiquidityConstructParams) {\n  //   this.connection = connection;\n  //   this.poolKeys = poolKeys;\n  //   this.poolInfo = poolInfo;\n  // }\n\n  // static async load({ connection, poolKeys, poolInfo }: LiquidityLoadParams) {\n  //   const _poolInfo = poolInfo || (await this.fetchInfo({ connection, poolKeys }));\n\n  //   return new Liquidity({ connection, poolKeys, poolInfo: _poolInfo });\n  // }\n\n  /* ================= get version and program id ================= */\n  static getProgramId(version: number) {\n    const programId = LIQUIDITY_VERSION_TO_PROGRAMID[version];\n    logger.assertArgument(!!programId, \"invalid version\", \"version\", version);\n\n    return programId;\n  }\n\n  static getVersion(programId: PublicKey) {\n    const programIdString = programId.toBase58();\n\n    const version = LIQUIDITY_PROGRAMID_TO_VERSION[programIdString];\n    logger.assertArgument(!!version, \"invalid program id\", \"programId\", programIdString);\n\n    return version;\n  }\n\n  static getSerumVersion(version: number) {\n    const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\n    logger.assertArgument(!!serumVersion, \"invalid version\", \"version\", version);\n\n    return serumVersion;\n  }\n\n  /* ================= get layout ================= */\n  static getStateLayout(version: number) {\n    const STATE_LAYOUT = LIQUIDITY_VERSION_TO_STATE_LAYOUT[version];\n    logger.assertArgument(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\n\n    return STATE_LAYOUT;\n  }\n\n  static getLayouts(version: number) {\n    return { state: this.getStateLayout(version) };\n  }\n\n  /* ================= get key ================= */\n  static getAssociatedId({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"amm_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedAuthority({ programId }: { programId: PublicKey }) {\n    return findProgramAddress(\n      // new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))\n      [Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])],\n      programId,\n    );\n  }\n\n  static getAssociatedBaseVault({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"coin_vault_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedQuoteVault({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"pc_vault_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedLpMint({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"lp_mint_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedLpVault({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"temp_lp_token_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedTargetOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"target_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedWithdrawQueue({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"withdraw_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const { publicKey } = findProgramAddress(\n      [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\n      programId,\n    );\n    return publicKey;\n  }\n\n  static getAssociatedPoolKeys({\n    version,\n    marketVersion,\n    marketId,\n    baseMint,\n    quoteMint,\n    baseDecimals,\n    quoteDecimals,\n    programId,\n    marketProgramId\n  }: {\n    version: number;\n    marketVersion: number;\n    marketId: PublicKey;\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n    baseDecimals: number;\n    quoteDecimals: number;\n    programId: PublicKey;\n    marketProgramId: PublicKey;\n  }): LiquidityAssociatedPoolKeys {\n    const id = this.getAssociatedId({ programId, marketId });\n    const lpMint = this.getAssociatedLpMint({ programId, marketId });\n    const { publicKey: authority, nonce } = this.getAssociatedAuthority({ programId });\n    const baseVault = this.getAssociatedBaseVault({ programId, marketId });\n    const quoteVault = this.getAssociatedQuoteVault({ programId, marketId });\n    const lpVault = this.getAssociatedLpVault({ programId, marketId });\n    const openOrders = this.getAssociatedOpenOrders({ programId, marketId });\n    const targetOrders = this.getAssociatedTargetOrders({ programId, marketId });\n    const withdrawQueue = this.getAssociatedWithdrawQueue({ programId, marketId });\n\n    const { publicKey: marketAuthority } = Market.getAssociatedAuthority({\n      programId: marketProgramId,\n      marketId,\n    });\n\n    return {\n      // base\n      id,\n      baseMint,\n      quoteMint,\n      lpMint,\n      baseDecimals,\n      quoteDecimals,\n      lpDecimals: baseDecimals,\n      // version\n      version,\n      programId,\n      // keys\n      authority,\n      nonce,\n      baseVault,\n      quoteVault,\n      lpVault,\n      openOrders,\n      targetOrders,\n      withdrawQueue,\n      // market version\n      marketVersion,\n      marketProgramId,\n      // market keys\n      marketId,\n      marketAuthority,\n    };\n  }\n\n  /* ================= make instruction and transaction ================= */\n  static makeAddLiquidityInstruction(params: LiquidityAddInstructionParams) {\n    const { poolKeys, userKeys, baseAmountIn, quoteAmountIn, fixedSide } = params;\n    const { version } = poolKeys;\n\n    if (version === 4 || version === 5) {\n      const LAYOUT = struct([u8(\"instruction\"), u64(\"baseAmountIn\"), u64(\"quoteAmountIn\"), u64(\"fixedSide\")]);\n      const data = Buffer.alloc(LAYOUT.span);\n      LAYOUT.encode(\n        {\n          instruction: 3,\n          baseAmountIn: parseBigNumberish(baseAmountIn),\n          quoteAmountIn: parseBigNumberish(quoteAmountIn),\n          fixedSide: parseBigNumberish(fixedSide === \"base\" ? 0 : 1),\n        },\n        data,\n      );\n\n      const keys = [\n        // system\n        AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n        // amm\n        AccountMeta(poolKeys.id, false),\n        AccountMetaReadonly(poolKeys.authority, false),\n        AccountMetaReadonly(poolKeys.openOrders, false),\n        AccountMeta(poolKeys.targetOrders, false),\n        AccountMeta(poolKeys.lpMint, false),\n        AccountMeta(poolKeys.baseVault, false),\n        AccountMeta(poolKeys.quoteVault, false),\n      ];\n\n      if (version === 5) {\n        keys.push(AccountMeta(ModelDataPubkey, false));\n      }\n\n      keys.push(\n        // serum\n        AccountMetaReadonly(poolKeys.marketId, false),\n        // user\n        AccountMeta(userKeys.baseTokenAccount, false),\n        AccountMeta(userKeys.quoteTokenAccount, false),\n        AccountMeta(userKeys.lpTokenAccount, false),\n        AccountMetaReadonly(userKeys.owner, true),\n        AccountMetaReadonly(poolKeys.marketEventQueue, false),\n      );\n\n      return new TransactionInstruction({\n        programId: poolKeys.programId,\n        keys,\n        data,\n      });\n    }\n\n    return logger.throwArgumentError(\"invalid version\", \"poolKeys.version\", version);\n  }\n\n  static async makeAddLiquidityTransaction(params: LiquidityAddTransactionParams) {\n    const { connection, poolKeys, userKeys, amountInA, amountInB, fixedSide, config } = params;\n    const { lpMint } = poolKeys;\n    const { tokenAccounts, owner, payer = owner } = userKeys;\n\n    logger.debug(\"amountInA:\", amountInA);\n    logger.debug(\"amountInB:\", amountInB);\n    logger.assertArgument(\n      !amountInA.isZero() && !amountInB.isZero(),\n      \"amounts must greater than zero\",\n      \"amountInA & amountInB\",\n      {\n        amountInA: amountInA.toFixed(),\n        amountInB: amountInB.toFixed(),\n      },\n    );\n\n    const { bypassAssociatedCheck } = {\n      // default\n      ...{ bypassAssociatedCheck: false },\n      // custom\n      ...config,\n    };\n\n    // handle currency a & b (convert SOL to WSOL)\n    const tokenA = amountInA instanceof TokenAmount ? amountInA.token : Token.WSOL;\n    const tokenB = amountInB instanceof TokenAmount ? amountInB.token : Token.WSOL;\n\n    const tokenAccountA = this._selectTokenAccount({\n      tokenAccounts,\n      mint: tokenA.mint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    const tokenAccountB = this._selectTokenAccount({\n      tokenAccounts,\n      mint: tokenB.mint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    logger.assertArgument(\n      !!tokenAccountA || !!tokenAccountB,\n      \"cannot found target token accounts\",\n      \"tokenAccounts\",\n      tokenAccounts,\n    );\n    const lpTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: lpMint,\n      owner,\n    });\n\n    const tokens = [tokenA, tokenB];\n    const _tokenAccounts = [tokenAccountA, tokenAccountB];\n    const rawAmounts = [amountInA.raw, amountInB.raw];\n\n    // handle amount a & b and direction\n    const [sideA] = this._getAmountsSide(amountInA, amountInB, poolKeys);\n    let _fixedSide: AmountSide = \"base\";\n    if (sideA === \"quote\") {\n      // reverse\n      tokens.reverse();\n      _tokenAccounts.reverse();\n      rawAmounts.reverse();\n\n      if (fixedSide === \"a\") _fixedSide = \"quote\";\n      else if (fixedSide === \"b\") _fixedSide = \"base\";\n      else return logger.throwArgumentError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\n    } else if (sideA === \"base\") {\n      if (fixedSide === \"a\") _fixedSide = \"base\";\n      else if (fixedSide === \"b\") _fixedSide = \"quote\";\n      else return logger.throwArgumentError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\n    } else return logger.throwArgumentError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\n\n    const [baseToken, quoteToken] = tokens;\n    const [baseTokenAccount, quoteTokenAccount] = _tokenAccounts;\n    const [baseAmountRaw, quoteAmountRaw] = rawAmounts;\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const signers: Signer[] = [];\n\n    const _baseTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: baseAmountRaw,\n      mint: baseToken.mint,\n      tokenAccount: baseTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n    const _quoteTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: quoteAmountRaw,\n      mint: quoteToken.mint,\n      tokenAccount: quoteTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n    const _lpTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"out\",\n      amount: 0,\n      mint: lpMint,\n      tokenAccount: lpTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n\n    frontInstructions.push(\n      this.makeAddLiquidityInstruction({\n        poolKeys,\n        userKeys: {\n          baseTokenAccount: _baseTokenAccount,\n          quoteTokenAccount: _quoteTokenAccount,\n          lpTokenAccount: _lpTokenAccount,\n          owner,\n        },\n        baseAmountIn: baseAmountRaw,\n        quoteAmountIn: quoteAmountRaw,\n        fixedSide: _fixedSide,\n      }),\n    );\n\n    const transaction = new Transaction();\n    transaction.add(...[...frontInstructions, ...endInstructions]);\n\n    return { transaction, signers };\n  }\n\n  static makeRemoveLiquidityInstruction(params: LiquidityRemoveInstructionParams) {\n    const { poolKeys, userKeys, amountIn } = params;\n    const { version } = poolKeys;\n\n    if (version === 4 || version === 5) {\n      const LAYOUT = struct([u8(\"instruction\"), u64(\"amountIn\")]);\n      const data = Buffer.alloc(LAYOUT.span);\n      LAYOUT.encode(\n        {\n          instruction: 4,\n          amountIn: parseBigNumberish(amountIn),\n        },\n        data,\n      );\n\n      const keys = [\n        // system\n        AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n        // amm\n        AccountMeta(poolKeys.id, false),\n        AccountMetaReadonly(poolKeys.authority, false),\n        AccountMeta(poolKeys.openOrders, false),\n        AccountMeta(poolKeys.targetOrders, false),\n        AccountMeta(poolKeys.lpMint, false),\n        AccountMeta(poolKeys.baseVault, false),\n        AccountMeta(poolKeys.quoteVault, false),\n      ];\n\n      if (version === 5) {\n        keys.push(AccountMeta(ModelDataPubkey, false));\n      } else {\n        keys.push(AccountMeta(poolKeys.withdrawQueue, false));\n        keys.push(AccountMeta(poolKeys.lpVault, false));\n      }\n\n      keys.push(\n        // serum\n        AccountMetaReadonly(poolKeys.marketProgramId, false),\n        AccountMeta(poolKeys.marketId, false),\n        AccountMeta(poolKeys.marketBaseVault, false),\n        AccountMeta(poolKeys.marketQuoteVault, false),\n        AccountMetaReadonly(poolKeys.marketAuthority, false),\n        // user\n        AccountMeta(userKeys.lpTokenAccount, false),\n        AccountMeta(userKeys.baseTokenAccount, false),\n        AccountMeta(userKeys.quoteTokenAccount, false),\n        AccountMetaReadonly(userKeys.owner, true),\n        // serum orderbook\n        AccountMeta(poolKeys.marketEventQueue, false),\n        AccountMeta(poolKeys.marketBids, false),\n        AccountMeta(poolKeys.marketAsks, false),\n      );\n\n      return new TransactionInstruction({\n        programId: poolKeys.programId,\n        keys,\n        data,\n      });\n    }\n\n    return logger.throwArgumentError(\"invalid version\", \"poolKeys.version\", version);\n  }\n\n  static async makeRemoveLiquidityTransaction(params: LiquidityRemoveTransactionParams) {\n    const { connection, poolKeys, userKeys, amountIn, config } = params;\n    const { baseMint, quoteMint, lpMint } = poolKeys;\n    const { tokenAccounts, owner, payer = owner } = userKeys;\n\n    logger.debug(\"amountIn:\", amountIn);\n    logger.assertArgument(!amountIn.isZero(), \"amount must greater than zero\", \"amountIn\", amountIn.toFixed());\n    logger.assertArgument(\n      amountIn instanceof TokenAmount && amountIn.token.mint.equals(lpMint),\n      \"amountIn's token not match lpMint\",\n      \"amountIn\",\n      amountIn,\n    );\n    const lpTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: lpMint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    if (!lpTokenAccount)\n      return logger.throwArgumentError(\"cannot found lpTokenAccount\", \"tokenAccounts\", tokenAccounts);\n\n    const baseTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: baseMint,\n      owner,\n    });\n    const quoteTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: quoteMint,\n      owner,\n    });\n\n    const { bypassAssociatedCheck } = {\n      // default\n      ...{ bypassAssociatedCheck: false },\n      // custom\n      ...config,\n    };\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const signers: Signer[] = [];\n\n    const _lpTokenAccount = lpTokenAccount;\n    const _baseTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"out\",\n      amount: 0,\n      mint: baseMint,\n      tokenAccount: baseTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n    const _quoteTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"out\",\n      amount: 0,\n      mint: quoteMint,\n      tokenAccount: quoteTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n\n    frontInstructions.push(\n      ComputeBudgetProgram.requestUnits({\n        units: 400000,\n        additionalFee: 0,\n      }),\n    );\n\n    frontInstructions.push(\n      this.makeRemoveLiquidityInstruction({\n        poolKeys,\n        userKeys: {\n          lpTokenAccount: _lpTokenAccount,\n          baseTokenAccount: _baseTokenAccount,\n          quoteTokenAccount: _quoteTokenAccount,\n          owner,\n        },\n        amountIn: amountIn.raw,\n      }),\n    );\n\n    const transaction = new Transaction();\n    transaction.add(...[...frontInstructions, ...endInstructions]);\n\n    return { transaction, signers };\n  }\n\n  static makeSwapInstruction(params: LiquiditySwapInstructionParams) {\n    const { poolKeys, userKeys, amountIn, amountOut, fixedSide } = params;\n    const { version } = poolKeys;\n\n    if (version === 4 || version === 5) {\n      if (fixedSide === \"in\") {\n        return this.makeSwapFixedInInstruction(\n          {\n            poolKeys,\n            userKeys,\n            amountIn,\n            minAmountOut: amountOut,\n          },\n          version,\n        );\n      } else if (fixedSide === \"out\") {\n        return this.makeSwapFixedOutInstruction(\n          {\n            poolKeys,\n            userKeys,\n            maxAmountIn: amountIn,\n            amountOut,\n          },\n          version,\n        );\n      }\n\n      return logger.throwArgumentError(\"invalid params\", \"params\", params);\n    }\n\n    return logger.throwArgumentError(\"invalid version\", \"poolKeys.version\", version);\n  }\n\n  static makeSwapFixedInInstruction(\n    { poolKeys, userKeys, amountIn, minAmountOut }: LiquiditySwapFixedInInstructionParamsV4,\n    version: number,\n  ) {\n    const LAYOUT = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n    LAYOUT.encode(\n      {\n        instruction: 9,\n        amountIn: parseBigNumberish(amountIn),\n        minAmountOut: parseBigNumberish(minAmountOut),\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n      // amm\n      AccountMeta(poolKeys.id, false),\n      AccountMetaReadonly(poolKeys.authority, false),\n      AccountMeta(poolKeys.openOrders, false),\n    ];\n\n    if (version === 4) {\n      keys.push(AccountMeta(poolKeys.targetOrders, false));\n    }\n\n    keys.push(AccountMeta(poolKeys.baseVault, false), AccountMeta(poolKeys.quoteVault, false));\n\n    if (version === 5) {\n      keys.push(AccountMeta(ModelDataPubkey, false));\n    }\n\n    keys.push(\n      // serum\n      AccountMetaReadonly(poolKeys.marketProgramId, false),\n      AccountMeta(poolKeys.marketId, false),\n      AccountMeta(poolKeys.marketBids, false),\n      AccountMeta(poolKeys.marketAsks, false),\n      AccountMeta(poolKeys.marketEventQueue, false),\n      AccountMeta(poolKeys.marketBaseVault, false),\n      AccountMeta(poolKeys.marketQuoteVault, false),\n      AccountMetaReadonly(poolKeys.marketAuthority, false),\n      // user\n      AccountMeta(userKeys.tokenAccountIn, false),\n      AccountMeta(userKeys.tokenAccountOut, false),\n      AccountMetaReadonly(userKeys.owner, true),\n    );\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  static makeSwapFixedOutInstruction(\n    { poolKeys, userKeys, maxAmountIn, amountOut }: LiquiditySwapFixedOutInstructionParamsV4,\n    version: number,\n  ) {\n    const LAYOUT = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n    LAYOUT.encode(\n      {\n        instruction: 11,\n        maxAmountIn: parseBigNumberish(maxAmountIn),\n        amountOut: parseBigNumberish(amountOut),\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n      // amm\n      AccountMeta(poolKeys.id, false),\n      AccountMetaReadonly(poolKeys.authority, false),\n      AccountMeta(poolKeys.openOrders, false),\n      AccountMeta(poolKeys.targetOrders, false),\n      AccountMeta(poolKeys.baseVault, false),\n      AccountMeta(poolKeys.quoteVault, false),\n    ];\n\n    if (version === 5) {\n      keys.push(AccountMeta(ModelDataPubkey, false));\n    }\n\n    keys.push(\n      // serum\n      AccountMetaReadonly(poolKeys.marketProgramId, false),\n      AccountMeta(poolKeys.marketId, false),\n      AccountMeta(poolKeys.marketBids, false),\n      AccountMeta(poolKeys.marketAsks, false),\n      AccountMeta(poolKeys.marketEventQueue, false),\n      AccountMeta(poolKeys.marketBaseVault, false),\n      AccountMeta(poolKeys.marketQuoteVault, false),\n      AccountMetaReadonly(poolKeys.marketAuthority, false),\n      // user\n      AccountMeta(userKeys.tokenAccountIn, false),\n      AccountMeta(userKeys.tokenAccountOut, false),\n      AccountMetaReadonly(userKeys.owner, true),\n    );\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  static async makeSwapTransaction(params: LiquiditySwapTransactionParams) {\n    const { connection, poolKeys, userKeys, amountIn, amountOut, fixedSide, config } = params;\n    const { tokenAccounts, owner, payer = owner } = userKeys;\n\n    logger.debug(\"amountIn:\", amountIn);\n    logger.debug(\"amountOut:\", amountOut);\n    logger.assertArgument(\n      !amountIn.isZero() && !amountOut.isZero(),\n      \"amounts must greater than zero\",\n      \"currencyAmounts\",\n      {\n        amountIn: amountIn.toFixed(),\n        amountOut: amountOut.toFixed(),\n      },\n    );\n\n    const { bypassAssociatedCheck } = {\n      // default\n      ...{ bypassAssociatedCheck: false },\n      // custom\n      ...config,\n    };\n\n    // handle currency in & out (convert SOL to WSOL)\n    const tokenIn = amountIn instanceof TokenAmount ? amountIn.token : Token.WSOL;\n    const tokenOut = amountOut instanceof TokenAmount ? amountOut.token : Token.WSOL;\n\n    const tokenAccountIn = this._selectTokenAccount({\n      tokenAccounts,\n      mint: tokenIn.mint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    const tokenAccountOut = this._selectTokenAccount({\n      tokenAccounts,\n      mint: tokenOut.mint,\n      owner,\n    });\n\n    const [amountInRaw, amountOutRaw] = [amountIn.raw, amountOut.raw];\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const signers: Signer[] = [];\n\n    const _tokenAccountIn = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: amountInRaw,\n      mint: tokenIn.mint,\n      tokenAccount: tokenAccountIn,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n    const _tokenAccountOut = await this._handleTokenAccount({\n      connection,\n      side: \"out\",\n      amount: 0,\n      mint: tokenOut.mint,\n      tokenAccount: tokenAccountOut,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n\n    frontInstructions.push(\n      this.makeSwapInstruction({\n        poolKeys,\n        userKeys: {\n          tokenAccountIn: _tokenAccountIn,\n          tokenAccountOut: _tokenAccountOut,\n          owner,\n        },\n        amountIn: amountInRaw,\n        amountOut: amountOutRaw,\n        fixedSide,\n      }),\n    );\n\n    const transaction = new Transaction();\n    transaction.add(...[...frontInstructions, ...endInstructions]);\n\n    return { transaction, signers };\n  }\n\n  static makeCreatePoolInstruction(params: LiquidityCreatePoolInstructionParams) {\n    const { poolKeys } = params;\n    const { version } = poolKeys;\n\n    if (version === 4) {\n      return this.makeCreatePoolInstructionV4(params);\n    }\n\n    return logger.throwArgumentError(\"invalid version\", \"poolKeys.version\", version);\n  }\n\n  static makeCreatePoolInstructionV4({ poolKeys, userKeys }: LiquidityCreatePoolInstructionParamsV4) {\n    const LAYOUT = struct([u8(\"instruction\"), u8(\"nonce\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n    LAYOUT.encode(\n      {\n        instruction: 10,\n        nonce: poolKeys.nonce,\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n      AccountMetaReadonly(SYSTEM_PROGRAM_ID, false),\n      AccountMetaReadonly(SYSVAR_RENT_PUBKEY, false),\n      // amm\n      AccountMeta(poolKeys.targetOrders, false),\n      AccountMeta(poolKeys.withdrawQueue, false),\n      AccountMetaReadonly(poolKeys.authority, false),\n      AccountMeta(poolKeys.lpMint, false),\n      AccountMetaReadonly(poolKeys.baseMint, false),\n      AccountMetaReadonly(poolKeys.quoteMint, false),\n      AccountMeta(poolKeys.baseVault, false),\n      AccountMeta(poolKeys.quoteVault, false),\n      AccountMeta(poolKeys.lpVault, false),\n      // serum\n      AccountMetaReadonly(poolKeys.marketId, false),\n      // user\n      AccountMeta(userKeys.payer, true),\n    ];\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  static makeCreatePoolTransaction(params: LiquidityCreatePoolTransactionParams) {\n    const transaction = new Transaction();\n    const signers: Signer[] = [];\n\n    transaction.add(this.makeCreatePoolInstruction(params));\n\n    return { transaction, signers };\n  }\n\n  static makeInitPoolInstruction(params: LiquidityInitPoolInstructionParams) {\n    const { poolKeys } = params;\n    const { version } = poolKeys;\n\n    if (version === 4) {\n      return this.makeInitPoolInstructionV4(params);\n    }\n\n    return logger.throwArgumentError(\"invalid version\", \"poolKeys.version\", version);\n  }\n\n  static makeInitPoolInstructionV4({ poolKeys, userKeys, startTime }: LiquidityInitPoolInstructionParamsV4) {\n    const LAYOUT = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n    LAYOUT.encode(\n      {\n        instruction: 0,\n        nonce: poolKeys.nonce,\n        startTime: parseBigNumberish(startTime),\n      },\n      data,\n    );\n\n    const keys = [\n      // system\n      AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n      AccountMetaReadonly(SYSTEM_PROGRAM_ID, false),\n      AccountMetaReadonly(SYSVAR_RENT_PUBKEY, false),\n      // amm\n      AccountMeta(poolKeys.id, false),\n      AccountMetaReadonly(poolKeys.authority, false),\n      AccountMeta(poolKeys.openOrders, false),\n      AccountMeta(poolKeys.lpMint, false),\n      AccountMetaReadonly(poolKeys.baseMint, false),\n      AccountMetaReadonly(poolKeys.quoteMint, false),\n      AccountMetaReadonly(poolKeys.baseVault, false),\n      AccountMetaReadonly(poolKeys.quoteVault, false),\n      AccountMeta(poolKeys.withdrawQueue, false),\n      AccountMeta(poolKeys.targetOrders, false),\n      AccountMeta(userKeys.lpTokenAccount, false),\n      AccountMetaReadonly(poolKeys.lpVault, false),\n      // serum\n      AccountMetaReadonly(poolKeys.marketProgramId, false),\n      AccountMetaReadonly(poolKeys.marketId, false),\n      // user\n      AccountMeta(userKeys.payer, true),\n    ];\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  static async makeInitPoolTransaction(params: LiquidityInitPoolTransactionParams) {\n    const { connection, poolKeys, userKeys, baseAmount, quoteAmount, startTime = 0, config } = params;\n    const { baseMint, quoteMint, lpMint, baseVault, quoteVault } = poolKeys;\n    const { tokenAccounts, owner, payer = owner } = userKeys;\n\n    const { bypassAssociatedCheck } = {\n      // default\n      ...{ bypassAssociatedCheck: false },\n      // custom\n      ...config,\n    };\n\n    const baseTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: baseMint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    const quoteTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: quoteMint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    logger.assertArgument(\n      !!baseTokenAccount || !!quoteTokenAccount,\n      \"cannot found target token accounts\",\n      \"tokenAccounts\",\n      tokenAccounts,\n    );\n    const lpTokenAccount = this._selectTokenAccount({\n      tokenAccounts,\n      mint: lpMint,\n      owner,\n    });\n\n    const frontInstructions: TransactionInstruction[] = [];\n    const endInstructions: TransactionInstruction[] = [];\n    const signers: Signer[] = [];\n\n    const _baseTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: baseAmount.raw,\n      mint: baseMint,\n      tokenAccount: baseTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n    const _quoteTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: quoteAmount.raw,\n      mint: quoteMint,\n      tokenAccount: quoteTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n    const _lpTokenAccount = await this._handleTokenAccount({\n      connection,\n      side: \"out\",\n      amount: 0,\n      mint: lpMint,\n      tokenAccount: lpTokenAccount,\n      owner,\n      payer,\n      frontInstructions,\n      endInstructions,\n      signers,\n      bypassAssociatedCheck,\n    });\n\n    frontInstructions.push(\n      Spl.makeTransferInstruction({\n        source: _baseTokenAccount,\n        destination: baseVault,\n        owner,\n        amount: baseAmount.raw,\n      }),\n    );\n    frontInstructions.push(\n      Spl.makeTransferInstruction({\n        source: _quoteTokenAccount,\n        destination: quoteVault,\n        owner,\n        amount: quoteAmount.raw,\n      }),\n    );\n    frontInstructions.push(\n      this.makeInitPoolInstruction({\n        poolKeys,\n        userKeys: {\n          lpTokenAccount: _lpTokenAccount,\n          payer,\n        },\n        startTime,\n      }),\n    );\n\n    const transaction = new Transaction();\n    transaction.add(...[...frontInstructions, ...endInstructions]);\n\n    return { transaction, signers };\n  }\n\n  static makeSimulatePoolInfoInstruction({ poolKeys }: { poolKeys: LiquidityPoolKeys }) {\n    const LAYOUT = struct([u8(\"instruction\"), u8(\"simulateType\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n    LAYOUT.encode(\n      {\n        instruction: 12,\n        simulateType: 0,\n      },\n      data,\n    );\n\n    const keys = [\n      // amm\n      AccountMetaReadonly(poolKeys.id, false),\n      AccountMetaReadonly(poolKeys.authority, false),\n      AccountMetaReadonly(poolKeys.openOrders, false),\n      AccountMetaReadonly(poolKeys.baseVault, false),\n      AccountMetaReadonly(poolKeys.quoteVault, false),\n      AccountMetaReadonly(poolKeys.lpMint, false),\n      // serum\n      AccountMetaReadonly(poolKeys.marketId, false),\n      AccountMetaReadonly(poolKeys.marketEventQueue, false),\n    ];\n\n    return new TransactionInstruction({\n      programId: poolKeys.programId,\n      keys,\n      data,\n    });\n  }\n\n  static isV4(lsl: any): lsl is LiquidityStateV4 {\n    return lsl.withdrawQueue !== undefined;\n  }\n\n  /* ================= fetch data ================= */\n  /**\n   * Fetch all pools keys from on-chain data\n   */\n  static async fetchAllPoolKeys(\n    connection: Connection,\n    config?: GetMultipleAccountsInfoConfig,\n  ): Promise<LiquidityPoolKeys[]> {\n    // supported versions\n    const supported = Object.keys(LIQUIDITY_VERSION_TO_STATE_LAYOUT).map((v) => {\n      const version = Number(v);\n      const serumVersion = this.getSerumVersion(version);\n      const serumProgramId = Market.getProgramId(serumVersion);\n      return {\n        version,\n        programId: this.getProgramId(version),\n        serumVersion,\n        serumProgramId,\n        stateLayout: this.getStateLayout(version),\n      };\n    });\n\n    let poolsAccountInfo: {\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer>;\n\n      version: number;\n      programId: PublicKey;\n      serumVersion: number;\n      serumProgramId: PublicKey;\n      stateLayout: LiquidityStateLayout;\n    }[][] = [];\n    try {\n      poolsAccountInfo = await Promise.all(\n        supported.map(({ programId, version, serumVersion, serumProgramId, stateLayout }) =>\n          connection\n            .getProgramAccounts(programId, {\n              filters: [{ dataSize: stateLayout.span }],\n            })\n            .then((accounts) => {\n              return accounts.map((info) => {\n                return {\n                  ...info,\n                  ...{ version, programId, serumVersion, serumProgramId, stateLayout },\n                };\n              });\n            }),\n        ),\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        return logger.throwError(\"failed to fetch all liquidity pools\", Logger.errors.RPC_ERROR, {\n          message: error.message,\n        });\n      }\n    }\n\n    const flatPoolsAccountInfo = poolsAccountInfo.flat();\n    // temp pool keys without market keys\n    const tempPoolsKeys: Omit<LiquidityAssociatedPoolKeys, \"nonce\">[] = [];\n\n    for (const {\n      pubkey,\n      account: accountInfo,\n      version,\n      programId,\n      serumVersion,\n      serumProgramId,\n      stateLayout: LIQUIDITY_STATE_LAYOUT,\n    } of flatPoolsAccountInfo) {\n      logger.assertArgument(!!accountInfo, \"empty state account info\", \"pool.id\", pubkey);\n\n      const { data } = accountInfo;\n      logger.assertArgument(\n        data.length === LIQUIDITY_STATE_LAYOUT.span,\n        \"invalid state data length\",\n        \"pool.id\",\n        pubkey,\n      );\n\n      const fields = LIQUIDITY_STATE_LAYOUT.decode(data);\n\n      const { status, baseMint, quoteMint, baseDecimal, quoteDecimal, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } =\n        fields;\n\n      let withdrawQueue, lpVault;\n      if (this.isV4(fields)) {\n        withdrawQueue = fields.withdrawQueue;\n        lpVault = fields.lpVault;\n      } else {\n        withdrawQueue = PublicKey.default;\n        lpVault = PublicKey.default;\n      }\n      // uninitialized\n      if (status.isZero()) {\n        continue;\n      }\n\n      const associatedPoolKeys = Liquidity.getAssociatedPoolKeys({\n        version,\n        marketVersion: serumVersion,\n        marketId,\n        baseMint,\n        baseDecimals: baseDecimal.toNumber(),\n        quoteMint,\n        quoteDecimals: quoteDecimal.toNumber(),\n        programId,\n        marketProgramId: serumProgramId\n      });\n      // double check keys with on-chain data\n      // logger.assert(Number(nonce) === associatedPoolKeys.nonce, \"invalid nonce\");\n\n      tempPoolsKeys.push({\n        id: pubkey,\n        baseMint,\n        quoteMint,\n        baseDecimals: associatedPoolKeys.baseDecimals,\n        quoteDecimals: associatedPoolKeys.quoteDecimals,\n        lpDecimals: associatedPoolKeys.lpDecimals,\n        lpMint,\n        version,\n        programId,\n\n        authority: associatedPoolKeys.authority,\n        openOrders,\n        targetOrders,\n        baseVault,\n        quoteVault,\n        withdrawQueue,\n        lpVault,\n        marketVersion: serumVersion,\n        marketProgramId: serumProgramId,\n        marketId,\n        marketAuthority: associatedPoolKeys.marketAuthority,\n      });\n    }\n\n    // fetch market keys\n    let marketsInfo: (AccountInfo<Buffer> | null)[] = [];\n    try {\n      marketsInfo = await getMultipleAccountsInfo(\n        connection,\n        tempPoolsKeys.map(({ marketId }) => marketId),\n        config,\n      );\n    } catch (error) {\n      if (error instanceof Error) {\n        return logger.throwError(\"failed to fetch markets\", Logger.errors.RPC_ERROR, {\n          message: error.message,\n        });\n      }\n    }\n\n    logger.assertArgument(\n      marketsInfo.length === tempPoolsKeys.length,\n      \"markets count not equal to pools\",\n      \"markets.length\",\n      marketsInfo.length,\n    );\n\n    const poolsKeys: LiquidityPoolKeys[] = [];\n\n    for (const index in marketsInfo) {\n      const poolKeys = tempPoolsKeys[index];\n      const marketInfo = marketsInfo[index];\n\n      const { id, marketVersion } = poolKeys;\n\n      if (!marketInfo) {\n        return logger.throwArgumentError(\"empty market account info\", \"pool.id\", id);\n      }\n\n      const { data } = marketInfo;\n      const { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n      logger.assertArgument(data.length === MARKET_STATE_LAYOUT.span, \"invalid market data length\", \"pool.id\", id);\n\n      const {\n        baseVault: marketBaseVault,\n        quoteVault: marketQuoteVault,\n        bids: marketBids,\n        asks: marketAsks,\n        eventQueue: marketEventQueue,\n      } = MARKET_STATE_LAYOUT.decode(data);\n\n      poolsKeys.push({\n        ...poolKeys,\n        ...{\n          marketBaseVault,\n          marketQuoteVault,\n          marketBids,\n          marketAsks,\n          marketEventQueue,\n        },\n      });\n    }\n\n    return poolsKeys;\n  }\n\n  /**\n   * Fetch liquidity pool's info\n   */\n  static async fetchInfo({ connection, poolKeys }: LiquidityFetchInfoParams) {\n    const info = await this.fetchMultipleInfo({ connection, pools: [poolKeys] });\n\n    logger.assertArgument(\n      info.length === 1,\n      `fetchInfo failed, ${info.length} pools found`,\n      \"poolKeys.id\",\n      poolKeys.id,\n    );\n\n    return info[0];\n  }\n\n  /**\n   * Fetch multiple info of liquidity pools\n   */\n  static async fetchMultipleInfo({\n    connection,\n    pools,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    config,\n  }: LiquidityFetchMultipleInfoParams): Promise<LiquidityPoolInfo[]> {\n    await initStableModelLayout(connection);\n\n    const instructions = pools.map((pool) => this.makeSimulatePoolInfoInstruction({ poolKeys: pool }));\n\n    const logs = await simulateMultipleInstruction(connection, instructions, \"GetPoolData\");\n\n    const poolsInfo = logs.map((log) => {\n      const json = parseSimulateLogToJson(log, \"GetPoolData\");\n\n      const status = new BN(parseSimulateValue(json, \"status\"));\n      const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\n      const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\n      const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\n      const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\n      const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\n      const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\n      // TODO fix it when split stable\n      let startTime = \"0\";\n      try {\n        startTime = parseSimulateValue(json, \"pool_open_time\");\n      } catch (error) {\n        //\n      }\n\n      return {\n        status,\n        baseDecimals,\n        quoteDecimals,\n        lpDecimals,\n        baseReserve,\n        quoteReserve,\n        lpSupply,\n        startTime: new BN(startTime),\n      };\n    });\n\n    return poolsInfo;\n  }\n\n  /* ================= compute data ================= */\n  static getEnabledFeatures(poolInfo: LiquidityPoolInfo) {\n    const { status } = poolInfo;\n    const _status = status.toNumber();\n\n    if (_status === LiquidityPoolStatus.Uninitialized)\n      return {\n        swap: false,\n        addLiquidity: false,\n        removeLiquidity: false,\n      };\n    else if (_status === LiquidityPoolStatus.Initialized)\n      return {\n        swap: true,\n        addLiquidity: true,\n        removeLiquidity: true,\n      };\n    else if (_status === LiquidityPoolStatus.Disabled)\n      return {\n        swap: false,\n        addLiquidity: false,\n        removeLiquidity: false,\n      };\n    else if (_status === LiquidityPoolStatus.RemoveLiquidityOnly)\n      return {\n        swap: false,\n        addLiquidity: false,\n        removeLiquidity: true,\n      };\n    else if (_status === LiquidityPoolStatus.LiquidityOnly)\n      return {\n        swap: false,\n        addLiquidity: true,\n        removeLiquidity: true,\n      };\n    else if (_status === LiquidityPoolStatus.OrderBook)\n      return {\n        swap: false,\n        addLiquidity: true,\n        removeLiquidity: true,\n      };\n    else if (_status === LiquidityPoolStatus.Swap)\n      return {\n        swap: true,\n        addLiquidity: true,\n        removeLiquidity: true,\n      };\n    else if (_status === LiquidityPoolStatus.WaitingForStart) {\n      // handle start time\n      const { startTime } = poolInfo;\n      if (Date.now() / 1000 < startTime.toNumber())\n        return {\n          swap: false,\n          addLiquidity: true,\n          removeLiquidity: true,\n        };\n\n      return {\n        swap: true,\n        addLiquidity: true,\n        removeLiquidity: true,\n      };\n    } else\n      return {\n        swap: false,\n        addLiquidity: false,\n        removeLiquidity: false,\n      };\n  }\n\n  static includesToken(token: Token, poolKeys: LiquidityPoolKeys) {\n    const { baseMint, quoteMint } = poolKeys;\n\n    return token.mint.equals(baseMint) || token.mint.equals(quoteMint);\n  }\n\n  /**\n   * Get token side of liquidity pool\n   * @param token - the token provided\n   * @param poolKeys - the pool keys\n   * @returns token side is `base` or `quote`\n   */\n  static _getTokenSide(token: Token, poolKeys: LiquidityPoolKeys): AmountSide {\n    const { baseMint, quoteMint } = poolKeys;\n\n    if (token.mint.equals(baseMint)) return \"base\";\n    else if (token.mint.equals(quoteMint)) return \"quote\";\n    else\n      return logger.throwArgumentError(\"token not match with pool\", \"params\", {\n        token: token.mint,\n        baseMint,\n        quoteMint,\n      });\n  }\n\n  /**\n   * Get tokens side of liquidity pool\n   * @param tokenA - the token provided\n   * @param tokenB - the token provided\n   * @param poolKeys - the pool keys\n   * @returns tokens side array\n   */\n  static _getTokensSide(tokenA: Token, tokenB: Token, poolKeys: LiquidityPoolKeys): AmountSide[] {\n    const { baseMint, quoteMint } = poolKeys;\n\n    const sideA = this._getTokenSide(tokenA, poolKeys);\n    const sideB = this._getTokenSide(tokenB, poolKeys);\n\n    logger.assertArgument(sideA !== sideB, \"tokens not match with pool\", \"params\", {\n      tokenA: tokenA.mint,\n      tokenB: tokenB.mint,\n      baseMint,\n      quoteMint,\n    });\n    return [sideA, sideB];\n  }\n\n  /**\n   * Get currency amount side of liquidity pool\n   * @param amount - the currency amount provided\n   * @param poolKeys - the pool keys\n   * @returns currency amount side is `base` or `quote`\n   */\n  static _getAmountSide(amount: CurrencyAmount | TokenAmount, poolKeys: LiquidityPoolKeys): AmountSide {\n    const token = amount instanceof TokenAmount ? amount.token : Token.WSOL;\n\n    return this._getTokenSide(token, poolKeys);\n  }\n\n  /**\n   * Get currencies amount side of liquidity pool\n   * @param amountA - the currency amount provided\n   * @param amountB - the currency amount provided\n   * @param poolKeys - the pool keys\n   * @returns currencies amount side array\n   */\n  static _getAmountsSide(\n    amountA: CurrencyAmount | TokenAmount,\n    amountB: CurrencyAmount | TokenAmount,\n    poolKeys: LiquidityPoolKeys,\n  ): AmountSide[] {\n    const tokenA = amountA instanceof TokenAmount ? amountA.token : Token.WSOL;\n    const tokenB = amountB instanceof TokenAmount ? amountB.token : Token.WSOL;\n\n    return this._getTokensSide(tokenA, tokenB, poolKeys);\n  }\n\n  /**\n   * Compute the another currency amount of add liquidity\n   *\n   * @param params - {@link LiquidityComputeAnotherAmountParams}\n   *\n   * @returns\n   * anotherCurrencyAmount - currency amount without slippage\n   * @returns\n   * maxAnotherCurrencyAmount - currency amount with slippage\n   *\n   * @returns {@link CurrencyAmount}\n   *\n   * @example\n   * ```\n   * Liquidity.computeAnotherAmount({\n   *   // 1%\n   *   slippage: new Percent(1, 100)\n   * })\n   * ```\n   */\n  static computeAnotherAmount({\n    poolKeys,\n    poolInfo,\n    amount,\n    anotherCurrency,\n    slippage,\n  }: LiquidityComputeAnotherAmountParams):\n    | { anotherAmount: CurrencyAmount; maxAnotherAmount: CurrencyAmount }\n    | { anotherAmount: TokenAmount; maxAnotherAmount: TokenAmount } {\n    const { baseReserve, quoteReserve } = poolInfo;\n    logger.debug(\"baseReserve:\", baseReserve.toString());\n    logger.debug(\"quoteReserve:\", quoteReserve.toString());\n\n    const currencyIn = amount instanceof TokenAmount ? amount.token : amount.currency;\n    logger.debug(\"currencyIn:\", currencyIn);\n    logger.debug(\"amount:\", amount.toFixed());\n    logger.debug(\"anotherCurrency:\", anotherCurrency);\n    logger.debug(\"slippage:\", `${slippage.toSignificant()}%`);\n\n    // input is fixed\n    const input = this._getAmountSide(amount, poolKeys);\n    logger.debug(\"input side:\", input);\n\n    // round up\n    let amountRaw = ZERO;\n    if (!amount.isZero()) {\n      amountRaw =\n        input === \"base\"\n          ? divCeil(amount.raw.mul(quoteReserve), baseReserve)\n          : divCeil(amount.raw.mul(baseReserve), quoteReserve);\n    }\n\n    const _slippage = new Percent(ONE).add(slippage);\n    const slippageAdjustedAmount = _slippage.mul(amountRaw).quotient;\n\n    const _anotherAmount =\n      anotherCurrency instanceof Token\n        ? new TokenAmount(anotherCurrency, amountRaw)\n        : new CurrencyAmount(anotherCurrency, amountRaw);\n    const _maxAnotherAmount =\n      anotherCurrency instanceof Token\n        ? new TokenAmount(anotherCurrency, slippageAdjustedAmount)\n        : new CurrencyAmount(anotherCurrency, slippageAdjustedAmount);\n    logger.debug(\"anotheAmount:\", _anotherAmount.toFixed());\n    logger.debug(\"maxAnotheAmount:\", _maxAnotherAmount.toFixed());\n\n    return {\n      anotherAmount: _anotherAmount,\n      maxAnotherAmount: _maxAnotherAmount,\n    };\n  }\n\n  static _computePriceImpact(currentPrice: Price, amountIn: BN, amountOut: BN) {\n    const exactQuote = currentPrice.raw.mul(amountIn);\n    // calculate slippage := (exactQuote - outputAmount) / exactQuote\n    const slippage = exactQuote.sub(amountOut).div(exactQuote);\n    return new Percent(slippage.numerator, slippage.denominator);\n  }\n\n  static getRate(poolInfo: LiquidityPoolInfo) {\n    const { baseReserve, quoteReserve, baseDecimals, quoteDecimals } = poolInfo;\n    const price = new Price(new Currency(baseDecimals), baseReserve, new Currency(quoteDecimals), quoteReserve);\n\n    return price;\n  }\n\n  /**\n   * Compute output currency amount of swap\n   *\n   * @param params - {@link LiquidityComputeAmountOutParams}\n   *\n   * @returns\n   * amountOut - currency amount without slippage\n   * @returns\n   * minAmountOut - currency amount with slippage\n   */\n  static computeAmountOut = ({\n    poolKeys,\n    poolInfo,\n    amountIn,\n    currencyOut,\n    slippage,\n  }: LiquidityComputeAmountOutParams):\n    | {\n      amountOut: CurrencyAmount;\n      minAmountOut: CurrencyAmount;\n      currentPrice: Price;\n      executionPrice: Price | null;\n      priceImpact: Percent;\n      fee: CurrencyAmount;\n    }\n    | {\n      amountOut: TokenAmount;\n      minAmountOut: TokenAmount;\n      currentPrice: Price;\n      executionPrice: Price | null;\n      priceImpact: Percent;\n      fee: CurrencyAmount;\n    } => {\n    const tokenIn = amountIn instanceof TokenAmount ? amountIn.token : Token.WSOL;\n    const tokenOut = currencyOut instanceof Token ? currencyOut : Token.WSOL;\n    logger.assertArgument(\n      this.includesToken(tokenIn, poolKeys) && this.includesToken(tokenOut, poolKeys),\n      \"token not match with pool\",\n      \"poolKeys\",\n      { poolKeys, tokenIn, tokenOut },\n    );\n\n    const { baseReserve, quoteReserve } = poolInfo;\n    logger.debug(\"baseReserve:\", baseReserve.toString());\n    logger.debug(\"quoteReserve:\", quoteReserve.toString());\n\n    const currencyIn = amountIn instanceof TokenAmount ? amountIn.token : amountIn.currency;\n    logger.debug(\"currencyIn:\", currencyIn);\n    logger.debug(\"amountIn:\", amountIn.toFixed());\n    logger.debug(\"currencyOut:\", currencyOut);\n    logger.debug(\"slippage:\", `${slippage.toSignificant()}%`);\n\n    const reserves = [baseReserve, quoteReserve];\n\n    // input is fixed\n    const input = this._getAmountSide(amountIn, poolKeys);\n    if (input === \"quote\") {\n      reserves.reverse();\n    }\n    logger.debug(\"input side:\", input);\n\n    const [reserveIn, reserveOut] = reserves;\n\n    let currentPrice;\n    if (poolKeys.version === 4) {\n      currentPrice = new Price(currencyIn, reserveIn, currencyOut, reserveOut);\n    } else {\n      const p = getStablePrice(modelData, baseReserve.toNumber(), quoteReserve.toNumber(), false);\n      if (input === \"quote\") currentPrice = new Price(currencyIn, new BN(p * 1e6), currencyOut, new BN(1e6));\n      else currentPrice = new Price(currencyIn, new BN(1e6), currencyOut, new BN(p * 1e6));\n    }\n\n    logger.debug(\"currentPrice:\", `1 ${currencyIn.symbol} ≈ ${currentPrice.toFixed()} ${currencyOut.symbol}`);\n    logger.debug(\n      \"currentPrice invert:\",\n      `1 ${currencyOut.symbol} ≈ ${currentPrice.invert().toFixed()} ${currencyIn.symbol}`,\n    );\n\n    const amountInRaw = amountIn.raw;\n    let amountOutRaw = ZERO;\n    let feeRaw = ZERO;\n\n    if (!amountInRaw.isZero()) {\n      if (poolKeys.version === 4) {\n        feeRaw = amountInRaw.mul(LIQUIDITY_FEES_NUMERATOR).div(LIQUIDITY_FEES_DENOMINATOR);\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n\n        const denominator = reserveIn.add(amountInWithFee);\n        amountOutRaw = reserveOut.mul(amountInWithFee).div(denominator);\n      } else {\n        feeRaw = amountInRaw.mul(new BN(2)).div(new BN(10000));\n        const amountInWithFee = amountInRaw.sub(feeRaw);\n        if (input === \"quote\")\n          amountOutRaw = new BN(\n            getDyByDxBaseIn(modelData, quoteReserve.toNumber(), baseReserve.toNumber(), amountInWithFee.toNumber()),\n          );\n        else {\n          amountOutRaw = new BN(\n            getDxByDyBaseIn(modelData, quoteReserve.toNumber(), baseReserve.toNumber(), amountInWithFee.toNumber()),\n          );\n        }\n      }\n    }\n\n    const _slippage = new Percent(ONE).add(slippage);\n    const minAmountOutRaw = _slippage.invert().mul(amountOutRaw).quotient;\n\n    const amountOut =\n      currencyOut instanceof Token\n        ? new TokenAmount(currencyOut, amountOutRaw)\n        : new CurrencyAmount(currencyOut, amountOutRaw);\n    const minAmountOut =\n      currencyOut instanceof Token\n        ? new TokenAmount(currencyOut, minAmountOutRaw)\n        : new CurrencyAmount(currencyOut, minAmountOutRaw);\n    logger.debug(\"amountOut:\", amountOut.toFixed());\n    logger.debug(\"minAmountOut:\", minAmountOut.toFixed());\n\n    let executionPrice = new Price(currencyIn, amountInRaw.sub(feeRaw), currencyOut, amountOutRaw);\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Price(currencyIn, amountInRaw.sub(feeRaw), currencyOut, amountOutRaw);\n      logger.debug(\"executionPrice:\", `1 ${currencyIn.symbol} ≈ ${executionPrice.toFixed()} ${currencyOut.symbol}`);\n      logger.debug(\n        \"executionPrice invert:\",\n        `1 ${currencyOut.symbol} ≈ ${executionPrice.invert().toFixed()} ${currencyIn.symbol}`,\n      );\n    }\n\n    const priceImpactDenominator = executionPrice.denominator.mul(currentPrice.numerator)\n    const priceImpactNumerator = executionPrice.numerator.mul(currentPrice.denominator).sub(priceImpactDenominator).abs()\n    const priceImpact = new Percent(priceImpactNumerator, priceImpactDenominator)\n\n    logger.debug(\"priceImpact:\", `${priceImpact.toSignificant()}%`);\n\n    const fee =\n      currencyIn instanceof Token ? new TokenAmount(currencyIn, feeRaw) : new CurrencyAmount(currencyIn, feeRaw);\n\n    return {\n      amountOut,\n      minAmountOut,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n      fee,\n    };\n  };\n\n  /**\n   * Compute input currency amount of swap\n   *\n   * @param params - {@link ComputeCurrencyAmountInParams}\n   *\n   * @returns\n   * amountIn - currency amount without slippage\n   * @returns\n   * maxAmountIn - currency amount with slippage\n   */\n  static computeAmountIn({ poolKeys, poolInfo, amountOut, currencyIn, slippage }: LiquidityComputeAmountInParams):\n    | {\n      amountIn: CurrencyAmount;\n      maxAmountIn: CurrencyAmount;\n      currentPrice: Price;\n      executionPrice: Price | null;\n      priceImpact: Percent;\n    }\n    | {\n      amountIn: TokenAmount;\n      maxAmountIn: TokenAmount;\n      currentPrice: Price;\n      executionPrice: Price | null;\n      priceImpact: Percent;\n    } {\n    const { baseReserve, quoteReserve } = poolInfo;\n    logger.debug(\"baseReserve:\", baseReserve.toString());\n    logger.debug(\"quoteReserve:\", quoteReserve.toString());\n\n    const currencyOut = amountOut instanceof TokenAmount ? amountOut.token : amountOut.currency;\n    logger.debug(\"currencyOut:\", currencyOut);\n    logger.debug(\"amountOut:\", amountOut.toFixed());\n    logger.debug(\"currencyIn:\", currencyIn);\n    logger.debug(\"slippage:\", `${slippage.toSignificant()}%`);\n\n    const reserves = [baseReserve, quoteReserve];\n\n    // output is fixed\n    const output = this._getAmountSide(amountOut, poolKeys);\n    if (output === \"base\") {\n      reserves.reverse();\n    }\n    logger.debug(\"output side:\", output);\n\n    const [reserveIn, reserveOut] = reserves;\n\n    const currentPrice = new Price(currencyIn, reserveIn, currencyOut, reserveOut);\n    logger.debug(\"currentPrice:\", `1 ${currencyIn.symbol} ≈ ${currentPrice.toFixed()} ${currencyOut.symbol}`);\n    logger.debug(\n      \"currentPrice invert:\",\n      `1 ${currencyOut.symbol} ≈ ${currentPrice.invert().toFixed()} ${currencyIn.symbol}`,\n    );\n\n    let amountInRaw = ZERO;\n    let amountOutRaw = amountOut.raw;\n    if (!amountOutRaw.isZero()) {\n      // if out > reserve, out = reserve - 1\n      if (amountOutRaw.gt(reserveOut)) {\n        amountOutRaw = reserveOut.sub(ONE);\n      }\n\n      const denominator = reserveOut.sub(amountOutRaw);\n      const amountInWithoutFee = reserveIn.mul(amountOutRaw).div(denominator);\n\n      amountInRaw = amountInWithoutFee\n        .mul(LIQUIDITY_FEES_DENOMINATOR)\n        .div(LIQUIDITY_FEES_DENOMINATOR.sub(LIQUIDITY_FEES_NUMERATOR));\n    }\n\n    const _slippage = new Percent(ONE).add(slippage);\n    const maxAmountInRaw = _slippage.mul(amountInRaw).quotient;\n\n    const amountIn =\n      currencyIn instanceof Token\n        ? new TokenAmount(currencyIn, amountInRaw)\n        : new CurrencyAmount(currencyIn, amountInRaw);\n    const maxAmountIn =\n      currencyIn instanceof Token\n        ? new TokenAmount(currencyIn, maxAmountInRaw)\n        : new CurrencyAmount(currencyIn, maxAmountInRaw);\n    logger.debug(\"amountIn:\", amountIn.toFixed());\n    logger.debug(\"maxAmountIn:\", maxAmountIn.toFixed());\n\n    let executionPrice: Price | null = null;\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Price(currencyIn, amountInRaw, currencyOut, amountOutRaw);\n      logger.debug(\"executionPrice:\", `1 ${currencyIn.symbol} ≈ ${executionPrice.toFixed()} ${currencyOut.symbol}`);\n      logger.debug(\n        \"executionPrice invert:\",\n        `1 ${currencyOut.symbol} ≈ ${executionPrice.invert().toFixed()} ${currencyIn.symbol}`,\n      );\n    }\n\n    const priceImpact = this._computePriceImpact(currentPrice, amountInRaw, amountOutRaw);\n    logger.debug(\"priceImpact:\", `${priceImpact.toSignificant()}%`);\n\n    return {\n      amountIn,\n      maxAmountIn,\n      currentPrice,\n      executionPrice,\n      priceImpact,\n    };\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { SerumVersion } from \"./type\";\n\n/* ================= program public keys ================= */\nexport const _SERUM_PROGRAM_ID_V3 = \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\";\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(_SERUM_PROGRAM_ID_V3);\n\n// serum program id string => serum version\nexport const SERUM_PROGRAMID_TO_VERSION: {\n  [key: string]: SerumVersion;\n} = {\n  [_SERUM_PROGRAM_ID_V3]: 3,\n};\n\n// serum version => serum program id\nexport const SERUM_VERSION_TO_PROGRAMID: { [key in SerumVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  3: SERUM_PROGRAM_ID_V3,\n};\n","import { blob, GetStructureSchema, publicKey, struct, u64 } from \"../marshmallow\";\n\n/* ================= state layouts ================= */\nexport const MARKET_STATE_LAYOUT_V3 = struct([\n  blob(5),\n\n  blob(8), // accountFlagsLayout('accountFlags'),\n\n  publicKey(\"ownAddress\"),\n\n  u64(\"vaultSignerNonce\"),\n\n  publicKey(\"baseMint\"),\n  publicKey(\"quoteMint\"),\n\n  publicKey(\"baseVault\"),\n  u64(\"baseDepositsTotal\"),\n  u64(\"baseFeesAccrued\"),\n\n  publicKey(\"quoteVault\"),\n  u64(\"quoteDepositsTotal\"),\n  u64(\"quoteFeesAccrued\"),\n\n  u64(\"quoteDustThreshold\"),\n\n  publicKey(\"requestQueue\"),\n  publicKey(\"eventQueue\"),\n\n  publicKey(\"bids\"),\n  publicKey(\"asks\"),\n\n  u64(\"baseLotSize\"),\n  u64(\"quoteLotSize\"),\n\n  u64(\"feeRateBps\"),\n\n  u64(\"referrerRebatesAccrued\"),\n\n  blob(7),\n]);\n\nexport type MarketStateLayoutV3 = typeof MARKET_STATE_LAYOUT_V3;\nexport type MarketStateLayout = MarketStateLayoutV3;\n\nexport type MarketStateV3 = GetStructureSchema<MarketStateLayoutV3>;\nexport type MarketState = MarketStateV3;\n\n/* ================= index ================= */\n// version => market state layout\nexport const MARKET_VERSION_TO_STATE_LAYOUT: {\n  [version: number]: MarketStateLayout;\n} = {\n  3: MARKET_STATE_LAYOUT_V3,\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { Logger } from \"../common\";\n\nimport { SERUM_PROGRAMID_TO_VERSION, SERUM_VERSION_TO_PROGRAMID } from \"./id\";\nimport { MARKET_VERSION_TO_STATE_LAYOUT } from \"./layout\";\n\nconst logger = Logger.from(\"Serum\");\n\nexport class Market {\n  /* ================= get version and program id ================= */\n  static getProgramId(version: number) {\n    const programId = SERUM_VERSION_TO_PROGRAMID[version];\n    logger.assertArgument(!!programId, \"invalid version\", \"version\", version);\n\n    return programId;\n  }\n\n  static getVersion(programId: PublicKey) {\n    const programIdString = programId.toBase58();\n\n    const version = SERUM_PROGRAMID_TO_VERSION[programIdString];\n    logger.assertArgument(!!version, \"invalid program id\", \"programId\", programIdString);\n\n    return version;\n  }\n\n  /* ================= get layout ================= */\n  static getStateLayout(version: number) {\n    const STATE_LAYOUT = MARKET_VERSION_TO_STATE_LAYOUT[version];\n    logger.assertArgument(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\n\n    return STATE_LAYOUT;\n  }\n\n  static getLayouts(version: number) {\n    return { state: this.getStateLayout(version) };\n  }\n\n  /* ================= get key ================= */\n  static getAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n    const seeds = [marketId.toBuffer()];\n\n    let nonce = 0;\n    let publicKey: PublicKey;\n\n    while (nonce < 100) {\n      try {\n        // Buffer.alloc(7) nonce u64\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\n        publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce++;\n        continue;\n      }\n      return { publicKey, nonce };\n    }\n\n    return logger.throwArgumentError(\"unable to find a viable program address nonce\", \"params\", {\n      programId,\n      marketId,\n    });\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { seq, struct, u64 } from \"../marshmallow\";\n\nexport const ModelDataPubkey = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\nconst ELEMENT_SIZE = 50000;\n\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\n\nexport const ModelDataInfo = struct([\n  u64(\"accountType\"),\n  u64(\"status\"),\n  u64(\"multiplier\"),\n  u64(\"validDataCount\"),\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\n]);\n\nexport interface stableModelLayout {\n  accountType: number;\n  status: number;\n  multiplier: number;\n  validDataCount: number;\n  DataElement: { x: number; y: number; price: number }[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number) {\n  return [0, ELEMENT_SIZE - 2];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction estimateRangeByX(_x: number) {\n  return [0, ELEMENT_SIZE - 2];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction estimateRangeByY(_y: number) {\n  return [0, ELEMENT_SIZE - 2];\n}\n\nfunction getMininumRangeByXyReal(\n  layoutData: stableModelLayout,\n  xReal: number,\n  yReal: number,\n): [number, number, boolean] {\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = (xReal * layoutData.multiplier) / yReal;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\n\n    if (target === cur) {\n      return [mid, mid, true];\n    } else if (target === left) {\n      return [mid - 1, mid - 1, true];\n    } else if (target === right) {\n      return [mid + 1, mid + 1, true];\n    } else if (target < left) {\n      maxRangeIdx = mid - 1;\n    } else if (target > left && target < cur) {\n      return [mid - 1, mid, true];\n    } else if (target > cur && target < right) {\n      return [mid, mid + 1, true];\n    } else {\n      minRangeIdx = mid + 1;\n    }\n  }\n  return [mid, mid, false];\n}\nfunction getRatio(layoutData: stableModelLayout, xReal: number, yReal: number) {\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\n\n  if (!find) {\n    return 0;\n  }\n\n  if (minRangeIdx === maxRangeIdx) {\n    const x = layoutData.DataElement[minRangeIdx].x;\n    const ratio = (xReal * layoutData.multiplier) / x;\n    return ratio;\n  } else {\n    const x1 = layoutData.DataElement[minRangeIdx].x;\n    const y1 = layoutData.DataElement[minRangeIdx].y;\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\n\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\n    const xNumerator1 = x1 * xDenominator;\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\n\n    const xNumerator = xNumerator1 + xNumerator2;\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\n    return ratio;\n  }\n}\n\nfunction realToTable(layoutData: stableModelLayout, realValue: number, ratio: number): number {\n  return (realValue * layoutData.multiplier) / ratio;\n}\n\nfunction tableToReal(layoutData: stableModelLayout, tableValue: number, ratio: number): number {\n  return (tableValue * ratio) / layoutData.multiplier;\n}\n\nfunction getMinimumRangeByX(layoutData: stableModelLayout, x: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByX(x);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = x;\n  while (minRangeIdx < maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n    const cur = layoutData.DataElement[mid].x;\n    const left = layoutData.DataElement[mid - 1].x;\n    const right = layoutData.DataElement[mid + 1].x;\n\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < left) maxRangeIdx = mid - 1;\n    else if (target > left && target < cur) return [mid - 1, mid, true];\n    else if (target > cur && target < right) return [mid, mid + 1, true];\n    else minRangeIdx = mid + 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getMinimumRangeByY(layoutData: stableModelLayout, y: number): [number, number, boolean] {\n  const [min, max] = estimateRangeByY(y);\n  let minRangeIdx = min;\n  let maxRangeIdx = max;\n  let mid = 0;\n  const target = y;\n  while (minRangeIdx <= maxRangeIdx) {\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\n      return [mid, mid, false];\n    }\n\n    const cur = layoutData.DataElement[mid].y;\n    const left = layoutData.DataElement[mid - 1].y;\n    const right = layoutData.DataElement[mid + 1].y;\n    if (target === cur) return [mid, mid, true];\n    else if (target === left) return [mid - 1, mid - 1, true];\n    else if (target === right) return [mid + 1, mid + 1, true];\n    else if (target < right) {\n      minRangeIdx = mid + 1;\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\n    else if (target < cur && target > right) return [mid, mid + 1, true];\n    else maxRangeIdx = mid - 1;\n  }\n  return [mid, mid, false];\n}\n\nfunction getDataByX(\n  layoutData: stableModelLayout,\n  x: number,\n  dx: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const xWithDx = priceUp ? x + dx : x - dx;\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\n  if (!find) return [0, 0, false, find];\n\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (x >= x1 && x <= x2) {\n      if (priceUp) return [p2, y2, true, find];\n      else return [p1, y1, true, find];\n    } else {\n      let p, y;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\n      } else {\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\n      }\n      return [p, y, false, find];\n    }\n  }\n}\n\nfunction getDataByY(\n  layoutData: stableModelLayout,\n  y: number,\n  dy: number,\n  priceUp: boolean,\n): [number, number, boolean, boolean] {\n  const yWithDy = priceUp ? y - dy : y + dy;\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\n  if (!find) return [0, 0, false, find];\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\n  else {\n    const x1 = layoutData.DataElement[minIdx].x;\n    const x2 = layoutData.DataElement[maxIdx].x;\n    const p1 = layoutData.DataElement[minIdx].price;\n    const p2 = layoutData.DataElement[maxIdx].price;\n    const y1 = layoutData.DataElement[minIdx].y;\n    const y2 = layoutData.DataElement[maxIdx].y;\n\n    if (y >= y2 && y <= y1) {\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\n    } else {\n      let p, x;\n      if (priceUp) {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\n      } else {\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\n      }\n      return [p, x, false, find];\n    }\n  }\n}\n\nfunction getMidPrice(layoutData: stableModelLayout, x: number): number {\n  const ret = getDataByX(layoutData, x, 0, false);\n  if (ret[3]) return ret[0];\n  else return 0;\n}\n\nexport function getDyByDxBaseIn(layoutData: stableModelLayout, xReal: number, yReal: number, dxReal: number) {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dx = realToTable(layoutData, dxReal, ratio);\n  const priceUp = true;\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dyReal = (dxReal * layoutData.multiplier) / p;\n    return dyReal;\n  } else {\n    const dy = y - y2;\n    const dyReal = tableToReal(layoutData, dy, ratio);\n    return dyReal;\n  }\n}\n\nexport function getDxByDyBaseIn(layoutData: stableModelLayout, xReal: number, yReal: number, dyReal: number) {\n  const ratio = getRatio(layoutData, xReal, yReal);\n  const x = realToTable(layoutData, xReal, ratio);\n  const y = realToTable(layoutData, yReal, ratio);\n  const dy = realToTable(layoutData, dyReal, ratio);\n  const priceUp = false;\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\n  if (!find) return 0;\n  if (lessTrade) {\n    const dxReal = (dyReal * p) / layoutData.multiplier;\n    return dxReal;\n  } else {\n    const dx = x - x2;\n    const dxReal = tableToReal(layoutData, dx, ratio);\n    return dxReal;\n  }\n}\n\nexport function formatLayout(buffer: Buffer): stableModelLayout {\n  const layoutInfo = ModelDataInfo.decode(buffer);\n  return {\n    accountType: layoutInfo.accountType.toNumber(),\n    status: layoutInfo.status.toNumber(),\n    multiplier: layoutInfo.multiplier.toNumber(),\n    validDataCount: layoutInfo.validDataCount.toNumber(),\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\n      x: item.x.toNumber(),\n      y: item.y.toNumber(),\n      price: item.price.toNumber(),\n    })),\n  };\n}\n\nexport function getStablePrice(layoutData: stableModelLayout, coinReal: number, pcReal: number, baseCoin: boolean) {\n  const price =\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\n    layoutData.multiplier;\n  return baseCoin ? price : 1 / price;\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nimport { LiquidityVersion } from \"../liquidity\";\n\nimport { RouteVersion } from \"./type\";\n\n/* ================= program public keys ================= */\nexport const _ROUTE_PROGRAM_ID_V1 = \"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\";\nexport const ROUTE_PROGRAM_ID_V1 = new PublicKey(_ROUTE_PROGRAM_ID_V1);\n\n// route program id string => route version\nexport const ROUTE_PROGRAMID_TO_VERSION: {\n  [key: string]: RouteVersion;\n} = {\n  [_ROUTE_PROGRAM_ID_V1]: 1,\n};\n\n// route version => route program id\nexport const ROUTE_VERSION_TO_PROGRAMID: { [key in RouteVersion]?: PublicKey } & {\n  [K: number]: PublicKey;\n} = {\n  1: ROUTE_PROGRAM_ID_V1,\n};\n\n// route version => serum version\nexport const ROUTE_VERSION_TO_LIQUIDITY_VERSION: {\n  [key in RouteVersion]?: LiquidityVersion;\n} & {\n  [K: number]: LiquidityVersion;\n} = {\n  1: 4,\n};\n","import { Connection, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { intersection, xor } from \"lodash\";\n\nimport { Base, TokenAccount, UnsignedTransactionAndSigners } from \"../base\";\nimport {\n  AccountMeta, AccountMetaReadonly, findProgramAddress, Logger, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID,\n} from \"../common\";\nimport {\n  BigNumberish, Currency, CurrencyAmount, parseBigNumberish, Percent, Price, Token, TokenAmount,\n} from \"../entity\";\nimport { Liquidity, LiquidityPoolInfo, LiquidityPoolKeys, SwapSide } from \"../liquidity\";\nimport { ModelDataPubkey } from \"../liquidity/stable\";\nimport { struct, u64, u8 } from \"../marshmallow\";\n\nimport {\n  ROUTE_PROGRAM_ID_V1, ROUTE_PROGRAMID_TO_VERSION, ROUTE_VERSION_TO_LIQUIDITY_VERSION, ROUTE_VERSION_TO_PROGRAMID,\n} from \"./id\";\n\nconst logger = Logger.from(\"Route\");\n\n/* ================= user keys ================= */\n/**\n * Full user keys that build transaction need\n */\nexport interface RouteUserKeys {\n  inTokenAccount: PublicKey;\n  outTokenAccount: PublicKey;\n  middleTokenAccount: PublicKey;\n  middleStatusAccount: PublicKey;\n  owner: PublicKey;\n}\n\n/* ================= make instruction and transaction ================= */\nexport interface RouteSwapInstructionParams {\n  fromPoolKeys: LiquidityPoolKeys;\n  toPoolKeys: LiquidityPoolKeys;\n  userKeys: RouteUserKeys;\n  amountIn: BigNumberish;\n  amountOut: BigNumberish;\n  fixedSide: SwapSide;\n}\n\nexport interface RouteSwapInFixedInInstructionParams {\n  fromPoolKeys: LiquidityPoolKeys;\n  toPoolKeys: LiquidityPoolKeys;\n  userKeys: Omit<RouteUserKeys, \"outTokenAccount\">;\n  amountIn: BigNumberish;\n  amountOut: BigNumberish;\n}\n\nexport interface RouteSwapOutFixedInInstructionParams {\n  fromPoolKeys: LiquidityPoolKeys;\n  toPoolKeys: LiquidityPoolKeys;\n  userKeys: Omit<RouteUserKeys, \"inTokenAccount\">;\n}\n\nexport interface RouteSwapTransactionParams {\n  connection: Connection;\n  fromPoolKeys: LiquidityPoolKeys;\n  toPoolKeys: LiquidityPoolKeys;\n  userKeys: {\n    tokenAccounts: TokenAccount[];\n    owner: PublicKey;\n    // dont support payer, txn size limited\n  };\n  amountIn: CurrencyAmount | TokenAmount;\n  amountOut: CurrencyAmount | TokenAmount;\n  fixedSide: SwapSide;\n  config?: {\n    bypassAssociatedCheck?: boolean;\n  };\n}\n\nexport interface RouteComputeAmountOutParams {\n  fromPoolKeys: LiquidityPoolKeys;\n  toPoolKeys: LiquidityPoolKeys;\n  fromPoolInfo: LiquidityPoolInfo;\n  toPoolInfo: LiquidityPoolInfo;\n  amountIn: CurrencyAmount | TokenAmount;\n  currencyOut: Currency | Token;\n  slippage: Percent;\n}\n\nexport class Route extends Base {\n  /* ================= get version and program id ================= */\n  static getProgramId(version: number) {\n    const programId = ROUTE_VERSION_TO_PROGRAMID[version];\n    logger.assertArgument(!!programId, \"invalid version\", \"version\", version);\n\n    return programId;\n  }\n\n  static getVersion(programId: PublicKey) {\n    const programIdString = programId.toBase58();\n\n    const version = ROUTE_PROGRAMID_TO_VERSION[programIdString];\n    logger.assertArgument(!!version, \"invalid program id\", \"programId\", programIdString);\n\n    return version;\n  }\n\n  static getLiquidityVersion(version: number) {\n    const liquidityVersion = ROUTE_VERSION_TO_LIQUIDITY_VERSION[version];\n    logger.assertArgument(!!liquidityVersion, \"invalid version\", \"version\", version);\n\n    return liquidityVersion;\n  }\n\n  /* ================= get key ================= */\n  static getAssociatedMiddleStatusAccount({\n    programId,\n    fromPoolId,\n    middleMint,\n    owner,\n  }: {\n    programId: PublicKey;\n    fromPoolId: PublicKey;\n    middleMint: PublicKey;\n    owner: PublicKey;\n  }) {\n    const { publicKey } = findProgramAddress(\n      [fromPoolId.toBuffer(), middleMint.toBuffer(), owner.toBuffer()],\n      programId,\n    );\n    return publicKey;\n  }\n\n  /* ================= make instruction and transaction ================= */\n  static makeSwapInstruction(params: RouteSwapInstructionParams) {\n    const { fixedSide } = params;\n\n    if (fixedSide === \"in\") {\n      return [this.makeSwapInFixedInInstruction(params), this.makeSwapOutFixedInInstruction(params)];\n    }\n\n    return logger.throwArgumentError(\"invalid params\", \"params\", params);\n  }\n\n  static makeSwapInFixedInInstruction({\n    fromPoolKeys,\n    toPoolKeys,\n    userKeys,\n    amountIn,\n    amountOut,\n  }: RouteSwapInFixedInInstructionParams) {\n    const LAYOUT = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n\n    let keys;\n\n    if (fromPoolKeys.version === 4) {\n      LAYOUT.encode(\n        {\n          instruction: 0,\n          amountIn: parseBigNumberish(amountIn),\n          amountOut: parseBigNumberish(amountOut),\n        },\n        data,\n      );\n      keys = [\n        // system\n        AccountMetaReadonly(SYSTEM_PROGRAM_ID, false),\n        AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n        // amm\n        AccountMetaReadonly(fromPoolKeys.programId, false),\n        AccountMeta(fromPoolKeys.id, false),\n        AccountMetaReadonly(toPoolKeys.id, false),\n        AccountMetaReadonly(fromPoolKeys.authority, false),\n        AccountMeta(fromPoolKeys.openOrders, false),\n        AccountMeta(fromPoolKeys.baseVault, false),\n        AccountMeta(fromPoolKeys.quoteVault, false),\n        // serum\n        AccountMetaReadonly(fromPoolKeys.marketProgramId, false),\n        AccountMeta(fromPoolKeys.marketId, false),\n        AccountMeta(fromPoolKeys.marketBids, false),\n        AccountMeta(fromPoolKeys.marketAsks, false),\n        AccountMeta(fromPoolKeys.marketEventQueue, false),\n        AccountMeta(fromPoolKeys.marketBaseVault, false),\n        AccountMeta(fromPoolKeys.marketQuoteVault, false),\n        AccountMetaReadonly(fromPoolKeys.marketAuthority, false),\n        // user\n        AccountMeta(userKeys.inTokenAccount, false),\n        AccountMeta(userKeys.middleTokenAccount, false),\n        AccountMeta(userKeys.middleStatusAccount, false),\n        AccountMetaReadonly(userKeys.owner, true),\n      ];\n    } else {\n      LAYOUT.encode(\n        {\n          instruction: 2,\n          amountIn: parseBigNumberish(amountIn),\n          amountOut: parseBigNumberish(amountOut),\n        },\n        data,\n      );\n      keys = [\n        // system\n        AccountMetaReadonly(SYSTEM_PROGRAM_ID, false),\n        AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n        // amm\n        AccountMetaReadonly(fromPoolKeys.programId, false),\n        AccountMeta(fromPoolKeys.id, false),\n        AccountMetaReadonly(toPoolKeys.id, false),\n        AccountMetaReadonly(fromPoolKeys.authority, false),\n        AccountMeta(fromPoolKeys.openOrders, false),\n        AccountMeta(fromPoolKeys.baseVault, false),\n        AccountMeta(fromPoolKeys.quoteVault, false),\n\n        AccountMetaReadonly(ModelDataPubkey, false),\n        // serum\n        AccountMetaReadonly(fromPoolKeys.marketProgramId, false),\n        AccountMeta(fromPoolKeys.marketId, false),\n        AccountMeta(fromPoolKeys.marketBids, false),\n        AccountMeta(fromPoolKeys.marketAsks, false),\n        AccountMeta(fromPoolKeys.marketEventQueue, false),\n        AccountMeta(fromPoolKeys.id, false),\n        AccountMeta(fromPoolKeys.id, false),\n        AccountMeta(fromPoolKeys.id, false),\n        // user\n        AccountMeta(userKeys.inTokenAccount, false),\n        AccountMeta(userKeys.middleTokenAccount, false),\n        AccountMeta(userKeys.middleStatusAccount, false),\n        AccountMetaReadonly(userKeys.owner, true),\n      ];\n    }\n\n    return new TransactionInstruction({\n      programId: ROUTE_PROGRAM_ID_V1,\n      keys,\n      data,\n    });\n  }\n\n  static makeSwapOutFixedInInstruction({ fromPoolKeys, toPoolKeys, userKeys }: RouteSwapOutFixedInInstructionParams) {\n    const LAYOUT = struct([u8(\"instruction\")]);\n    const data = Buffer.alloc(LAYOUT.span);\n\n    let keys;\n\n    if (toPoolKeys.version === 4) {\n      LAYOUT.encode(\n        {\n          instruction: 1,\n        },\n        data,\n      );\n      keys = [\n        // system\n        AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n        // amm\n        AccountMetaReadonly(toPoolKeys.programId, false),\n        AccountMetaReadonly(fromPoolKeys.id, false),\n        AccountMeta(toPoolKeys.id, false),\n        AccountMetaReadonly(toPoolKeys.authority, false),\n        AccountMeta(toPoolKeys.openOrders, false),\n        AccountMeta(toPoolKeys.baseVault, false),\n        AccountMeta(toPoolKeys.quoteVault, false),\n        // serum\n        AccountMetaReadonly(toPoolKeys.marketProgramId, false),\n        AccountMeta(toPoolKeys.marketId, false),\n        AccountMeta(toPoolKeys.marketBids, false),\n        AccountMeta(toPoolKeys.marketAsks, false),\n        AccountMeta(toPoolKeys.marketEventQueue, false),\n        AccountMeta(toPoolKeys.marketBaseVault, false),\n        AccountMeta(toPoolKeys.marketQuoteVault, false),\n        AccountMetaReadonly(toPoolKeys.marketAuthority, false),\n        // user\n        AccountMeta(userKeys.middleTokenAccount, false),\n        AccountMeta(userKeys.outTokenAccount, false),\n        AccountMeta(userKeys.middleStatusAccount, false),\n        AccountMetaReadonly(userKeys.owner, true),\n      ];\n    } else {\n      LAYOUT.encode(\n        {\n          instruction: 3,\n        },\n        data,\n      );\n      keys = [\n        // system\n        AccountMetaReadonly(TOKEN_PROGRAM_ID, false),\n        // amm\n        AccountMetaReadonly(toPoolKeys.programId, false),\n        AccountMetaReadonly(fromPoolKeys.id, false),\n        AccountMeta(toPoolKeys.id, false),\n        AccountMetaReadonly(toPoolKeys.authority, false),\n        AccountMeta(toPoolKeys.openOrders, false),\n        AccountMeta(toPoolKeys.baseVault, false),\n        AccountMeta(toPoolKeys.quoteVault, false),\n\n        AccountMetaReadonly(ModelDataPubkey, false),\n        // serum\n        AccountMetaReadonly(toPoolKeys.marketProgramId, false),\n        AccountMeta(toPoolKeys.marketId, false),\n        AccountMeta(toPoolKeys.marketBids, false),\n        AccountMeta(toPoolKeys.marketAsks, false),\n        AccountMeta(toPoolKeys.marketEventQueue, false),\n        AccountMeta(toPoolKeys.id, false),\n        AccountMeta(toPoolKeys.id, false),\n        AccountMeta(toPoolKeys.id, false),\n        // user\n        AccountMeta(userKeys.middleTokenAccount, false),\n        AccountMeta(userKeys.outTokenAccount, false),\n        AccountMeta(userKeys.middleStatusAccount, false),\n        AccountMetaReadonly(userKeys.owner, true),\n      ];\n    }\n\n    return new TransactionInstruction({\n      programId: ROUTE_PROGRAM_ID_V1,\n      keys,\n      data,\n    });\n  }\n\n  static async makeSwapTransaction(params: RouteSwapTransactionParams) {\n    const { connection, fromPoolKeys, toPoolKeys, userKeys, amountIn, amountOut, fixedSide, config } = params;\n    const { tokenAccounts, owner } = userKeys;\n\n    logger.debug(\"amountIn:\", amountIn);\n    logger.debug(\"amountOut:\", amountOut);\n    logger.assertArgument(\n      !amountIn.isZero() && !amountOut.isZero(),\n      \"amounts must greater than zero\",\n      \"currencyAmounts\",\n      {\n        amountIn: amountIn.toFixed(),\n        amountOut: amountOut.toFixed(),\n      },\n    );\n\n    const { bypassAssociatedCheck } = {\n      // default\n      ...{ bypassAssociatedCheck: false },\n      // custom\n      ...config,\n    };\n\n    // handle currency in & out (convert SOL to WSOL)\n    const tokenIn = amountIn instanceof TokenAmount ? amountIn.token : Token.WSOL;\n    const tokenOut = amountOut instanceof TokenAmount ? amountOut.token : Token.WSOL;\n\n    const tokenAccountIn = this._selectTokenAccount({\n      tokenAccounts,\n      mint: tokenIn.mint,\n      owner,\n      config: { associatedOnly: false },\n    });\n    const tokenAccountOut = this._selectTokenAccount({\n      tokenAccounts,\n      mint: tokenOut.mint,\n      owner,\n    });\n\n    const fromPoolMints = [fromPoolKeys.baseMint.toBase58(), fromPoolKeys.quoteMint.toBase58()];\n    const toPoolMints = [toPoolKeys.baseMint.toBase58(), toPoolKeys.quoteMint.toBase58()];\n    const intersectionMints = intersection(fromPoolMints, toPoolMints);\n    const _middleMint = intersectionMints[0];\n    const middleMint = new PublicKey(_middleMint);\n    const tokenAccountMiddle = this._selectTokenAccount({\n      tokenAccounts,\n      mint: middleMint,\n      owner,\n    });\n\n    const [amountInRaw, amountOutRaw] = [amountIn.raw, amountOut.raw];\n\n    const setupInstructions: TransactionInstruction[] = [];\n    const setupSigners: Signer[] = [];\n    const swapInstructions: TransactionInstruction[] = [];\n\n    const _tokenAccountIn = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: amountInRaw,\n      mint: tokenIn.mint,\n      tokenAccount: tokenAccountIn,\n      owner,\n      frontInstructions: setupInstructions,\n      signers: setupSigners,\n      bypassAssociatedCheck,\n    });\n    const _tokenAccountOut = await this._handleTokenAccount({\n      connection,\n      side: \"out\",\n      amount: 0,\n      mint: tokenOut.mint,\n      tokenAccount: tokenAccountOut,\n      owner,\n      frontInstructions: setupInstructions,\n      signers: setupSigners,\n      bypassAssociatedCheck,\n    });\n    const _tokenAccountMiddle = await this._handleTokenAccount({\n      connection,\n      side: \"in\",\n      amount: 0,\n      mint: middleMint,\n      tokenAccount: tokenAccountMiddle,\n      owner,\n      frontInstructions: setupInstructions,\n      signers: setupSigners,\n      bypassAssociatedCheck,\n    });\n\n    swapInstructions.push(\n      ...this.makeSwapInstruction({\n        fromPoolKeys,\n        toPoolKeys,\n        userKeys: {\n          inTokenAccount: _tokenAccountIn,\n          outTokenAccount: _tokenAccountOut,\n          middleTokenAccount: _tokenAccountMiddle,\n          middleStatusAccount: this.getAssociatedMiddleStatusAccount({\n            programId: ROUTE_PROGRAM_ID_V1,\n            fromPoolId: fromPoolKeys.id,\n            middleMint,\n            owner,\n          }),\n          owner,\n        },\n        amountIn: amountInRaw,\n        amountOut: amountOutRaw,\n        fixedSide,\n      }),\n    );\n\n    let setupTransaction: UnsignedTransactionAndSigners | null = null;\n    let swapTransaction: UnsignedTransactionAndSigners | null = null;\n\n    if (setupInstructions.length > 0) {\n      setupTransaction = {\n        transaction: new Transaction().add(...setupInstructions),\n        signers: setupSigners,\n      };\n    }\n    if (swapInstructions.length > 0) {\n      swapTransaction = {\n        transaction: new Transaction().add(...swapInstructions),\n        signers: [],\n      };\n    }\n\n    return { setupTransaction, swapTransaction };\n  }\n\n  // static makeSwapInFixedOutInstruction() {}\n\n  // static makeSwapOutFixedOutInstruction() {}\n\n  /* ================= compute data ================= */\n  static computeAmountOut({\n    fromPoolKeys,\n    toPoolKeys,\n    fromPoolInfo,\n    toPoolInfo,\n    amountIn,\n    currencyOut,\n    slippage,\n  }: RouteComputeAmountOutParams) {\n    const { swap: fromPoolSwapEnabled } = Liquidity.getEnabledFeatures(fromPoolInfo);\n    const { swap: toPoolSwapEnabled } = Liquidity.getEnabledFeatures(toPoolInfo);\n    logger.assertArgument(fromPoolSwapEnabled && toPoolSwapEnabled, \"pools swap not enabled\", \"pools\", {\n      fromPoolKeys,\n      toPoolKeys,\n      fromPoolInfo,\n      toPoolInfo,\n    });\n\n    const tokenIn = amountIn instanceof TokenAmount ? amountIn.token : Token.WSOL;\n    const tokenOut = currencyOut instanceof Token ? currencyOut : Token.WSOL;\n\n    logger.assertArgument(\n      Liquidity.includesToken(tokenIn, fromPoolKeys) && Liquidity.includesToken(tokenOut, toPoolKeys),\n      \"pools cannot be routed\",\n      \"pools\",\n      {\n        fromPoolKeys,\n        toPoolKeys,\n      },\n    );\n\n    const fromPoolMints = [fromPoolKeys.baseMint.toBase58(), fromPoolKeys.quoteMint.toBase58()];\n    const toPoolMints = [toPoolKeys.baseMint.toBase58(), toPoolKeys.quoteMint.toBase58()];\n    const mints = [...fromPoolMints, ...toPoolMints];\n    const decimals = [\n      fromPoolInfo.baseDecimals,\n      fromPoolInfo.quoteDecimals,\n      toPoolInfo.baseDecimals,\n      toPoolInfo.quoteDecimals,\n    ];\n    const mintIn = tokenIn.mint.toBase58();\n    const mintOut = tokenOut.mint.toBase58();\n\n    const xorMints = xor(fromPoolMints, toPoolMints);\n    logger.assertArgument(\n      xorMints.length === 2 && xorMints.includes(mintIn) && xorMints.includes(mintOut),\n      \"xor tokens not match\",\n      \"pools\",\n      {\n        fromPoolKeys,\n        toPoolKeys,\n      },\n    );\n\n    const intersectionMints = intersection(fromPoolMints, toPoolMints);\n    logger.assertArgument(intersectionMints.length === 1, \"cannot found middle token of two pools\", \"pools\", {\n      fromPoolKeys,\n      toPoolKeys,\n    });\n\n    const _middleMint = intersectionMints[0];\n    const index = mints.indexOf(_middleMint);\n    // logger.assertArgument(index !== -1, \"cannot found middle token\", \"pools\", {\n    //   fromPoolKeys,\n    //   toPoolKeys,\n    // });\n    const middleMintDecimals = decimals[index];\n    const middleMint = new PublicKey(_middleMint);\n    const middleToken = new Token(middleMint, middleMintDecimals);\n\n    logger.debug(\"from pool:\", fromPoolKeys);\n    logger.debug(\"to pool:\", toPoolKeys);\n    logger.debug(\"intersection mints:\", intersectionMints);\n    logger.debug(\"xor mints:\", xorMints);\n    logger.debug(\"middleMint:\", _middleMint);\n\n    // TODO slippage and amount out\n    const {\n      // amountOut: middleAmountOut,\n      minAmountOut: minMiddleAmountOut,\n      priceImpact: firstPriceImpact,\n      fee: firstFee,\n    } = Liquidity.computeAmountOut({\n      poolKeys: fromPoolKeys,\n      poolInfo: fromPoolInfo,\n      amountIn,\n      currencyOut: middleToken,\n      slippage,\n    });\n    const {\n      amountOut,\n      minAmountOut,\n      priceImpact: secondPriceImpact,\n      fee: secondFee,\n    } = Liquidity.computeAmountOut({\n      poolKeys: toPoolKeys,\n      poolInfo: toPoolInfo,\n      amountIn: minMiddleAmountOut,\n      currencyOut,\n      slippage,\n    });\n\n    let executionPrice: Price | null = null;\n    const amountInRaw = amountIn.raw;\n    const amountOutRaw = amountOut.raw;\n    const currencyIn = amountIn instanceof TokenAmount ? amountIn.token : amountIn.currency;\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\n      executionPrice = new Price(currencyIn, amountInRaw, currencyOut, amountOutRaw);\n      logger.debug(\"executionPrice:\", `1 ${currencyIn.symbol} ≈ ${executionPrice.toFixed()} ${currencyOut.symbol}`);\n      logger.debug(\n        \"executionPrice invert:\",\n        `1 ${currencyOut.symbol} ≈ ${executionPrice.invert().toFixed()} ${currencyIn.symbol}`,\n      );\n    }\n\n    return {\n      // middleAmountOut,\n      // minMiddleAmountOut,\n      amountOut,\n      minAmountOut,\n      executionPrice,\n      priceImpact: firstPriceImpact.add(secondPriceImpact),\n      fee: [firstFee, secondFee],\n    };\n  }\n\n  // static computeAmountIn() {}\n}\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\n\nimport { AmmV3PoolInfo } from \"../ammV3\";\nimport { jsonInfo2PoolKeys, SYSTEM_PROGRAM_ID } from \"../common\";\nimport { LiquidityPoolKeysV4 } from \"../liquidity\";\nimport { struct, u64, u8 } from \"../marshmallow\";\n\nimport { PoolType } from \"./trade\";\n\nexport function route1Instruction(\n  programId: PublicKey,\n  poolKeyA: PoolType,\n  poolKeyB: PoolType,\n\n  userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  // userDestinationToken: PublicKey,\n  userPdaAccount: PublicKey,\n  ownerWallet: PublicKey,\n\n  inputMint: PublicKey,\n\n  amountIn: BN,\n  amountOut: BN,\n\n  tickArrayA?: PublicKey[],\n  // tickArrayB?: PublicKey[],\n) {\n  const dataLayout = struct([\n    u8(\"instruction\"),\n    u64(\"amountIn\"),\n    u64(\"amountOut\"),\n  ]);\n\n  const keys: { pubkey: PublicKey, isSigner: boolean, isWritable: boolean }[] = [\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyA.programId)), isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\n\n    { pubkey: userSourceToken, isSigner: false, isWritable: true },\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\n  ];\n\n  if (poolKeyA.version === 6) {\n    const poolKey = poolKeyA as AmmV3PoolInfo\n    keys.push(...[\n      { pubkey: poolKey.ammConfig.id, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.mintA.mint.equals(inputMint) ? poolKey.mintA.vault : poolKey.mintB.vault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.mintA.mint.equals(inputMint) ? poolKey.mintB.vault : poolKey.mintA.vault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.observationId, isSigner: false, isWritable: true },\n      ...tickArrayA!.map(i => ({ pubkey: i, isSigner: false, isWritable: true }))\n    ])\n  } else if (poolKeyA.version === 5) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA) as LiquidityPoolKeysV4\n    keys.push(...[\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo'), isSigner: false, isWritable: false },\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.baseVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.quoteVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n    ])\n  } else if (poolKeyA.version === 4) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyA) as LiquidityPoolKeysV4\n    keys.push(...[\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.baseVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.quoteVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      ...(poolKey.marketProgramId.toString() === 'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX' ? [\n        { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n      ] : [\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ])\n    ])\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 4,\n      amountIn,\n      amountOut,\n    },\n    data\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}\n\nexport function route2Instruction(\n  programId: PublicKey,\n  poolKeyA: PoolType,\n  poolKeyB: PoolType,\n\n  // userSourceToken: PublicKey,\n  userRouteToken: PublicKey,\n  userDestinationToken: PublicKey,\n  userPdaAccount: PublicKey,\n  ownerWallet: PublicKey,\n\n  routeMint: PublicKey,\n\n  // tickArrayA?: PublicKey[],\n  tickArrayB?: PublicKey[],\n) {\n  const dataLayout = struct([\n    u8(\"instruction\"),\n  ]);\n\n  const keys: { pubkey: PublicKey, isSigner: boolean, isWritable: boolean }[] = [\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyB.programId)), isSigner: false, isWritable: false },\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\n\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\n    { pubkey: userDestinationToken, isSigner: false, isWritable: true },\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\n  ];\n\n  if (poolKeyB.version === 6) {\n    const poolKey = poolKeyB as AmmV3PoolInfo\n    keys.push(...[\n      { pubkey: poolKey.ammConfig.id, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.mintA.mint.equals(routeMint) ? poolKey.mintA.vault : poolKey.mintB.vault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.mintA.mint.equals(routeMint) ? poolKey.mintB.vault : poolKey.mintA.vault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.observationId, isSigner: false, isWritable: true },\n      ...tickArrayB!.map(i => ({ pubkey: i, isSigner: false, isWritable: true }))\n    ])\n  } else if (poolKeyB.version === 5) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB) as LiquidityPoolKeysV4\n    keys.push(...[\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo'), isSigner: false, isWritable: false },\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.baseVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.quoteVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\n    ])\n  } else if (poolKeyB.version === 4) {\n    const poolKey = jsonInfo2PoolKeys(poolKeyB) as LiquidityPoolKeysV4\n    keys.push(...[\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\n      { pubkey: poolKey.baseVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.quoteVault, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\n      ...(poolKey.marketProgramId.toString() === 'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX' ? [\n        { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\n        { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\n      ] : [\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\n      ])\n    ])\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 5,\n    },\n    data\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data,\n  });\n}"],"mappings":"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,UACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,eACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,YACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,QACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,OACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,QACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,OACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,OACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,QACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,QACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,OACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,YACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,YACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,QACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,MACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,cACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,cACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,UACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,KACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,MACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,SACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,UACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,QACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,MACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,MACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,eACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,cACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,gBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,eACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,aACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,YACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,YACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,iBACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,MACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,kBACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,iBACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,cACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,aACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,kBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,iBACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,cACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,aACf,CACF,EACA,OAAQ,CACN,OAAQ,SACR,KAAM,SACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,QAAS,CACP,OAAQ,UACR,KAAM,UACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,QACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,OACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,SACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,sBACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,MACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,aACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,YACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,eACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,cACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,QACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,eACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,iBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,gBACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,aACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,YACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,iBACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,gBACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,iBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,SACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,WACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,UACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,YACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,WACf,CACF,EACA,OAAQ,CACN,OAAQ,SACR,KAAM,SACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,kBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,iBACf,CACF,EACA,MAAO,CACL,OAAQ,QACR,KAAM,QACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,OACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,SACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,QACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,iBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,gBACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,WACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,UACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,eACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,cACf,CACF,EACA,IAAK,CACH,OAAQ,MACR,KAAM,iBACN,KAAM,+CACN,SAAU,EACV,WAAY,CACV,YAAa,gBACf,CACF,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,OACN,KAAM,+CACN,SAAU,EACV,WAAY,CAAC,CACf,EACA,KAAM,CACJ,OAAQ,OACR,KAAM,WACN,KAAM,8CACN,SAAU,EACV,WAAY,CACV,YAAa,UACf,CACF,EA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","names":["PublicKey","Transaction","BN","PublicKey","BN","isBN","_bits","_BitStructure","_blob","_Blob","_cstr","_f32","_f32be","_f64","_f64be","_greedy","_Layout","_ns64","_ns64be","_nu64","_nu64be","_offset","_s16","_s16be","_s24","_s24be","_s32","_s32be","_s40","_s40be","_s48","_s48be","_s8","_seq","_struct","_Structure","_u16","_u16be","_u24","_u24be","_u32","_u32be","_u40","_u40be","_u48","_u48be","_u8","_UInt","_union","_Union","_unionLayoutDiscriminator","_utf8","Layout","Structure","UInt","_UInt","u8","_u8","u16","_u16","s32","_s32","seq","_seq","blob","_blob","BNLayout","Layout","span","signed","property","blob","b","offset","num","BN","src","u8","property","UInt","u32","u64","BNLayout","u128","i128","property","BNLayout","WrappedLayout","Layout","layout","decoder","encoder","b","offset","src","publicKey","blob","PublicKey","key","bool","property","WrappedLayout","u8","decodeBool","encodeBool","value","Structure","b","offset","struct","fields","property","decodePrefixes","seq","elementLayout","count","property","parsedCount","superCount","isBN","target","countProperty","value","BN","PublicKey","PublicKey","BN","_Big","BN","BN","BN","ZERO","BN","ONE","TWO","THREE","FIVE","TEN","_100","_1000","_10000","logger","Logger","MAX_SAFE","parseBigNumberish","value","BN","tenExponentiate","shift","TEN","divCeil","a","b","dm","SOL","WSOL","MAINNET_SPL_TOKENS","__spreadValues","WSOL","MAINNET_LP_TOKENS","DEVNET_SPL_TOKENS","__spreadValues","WSOL","TESTNET_SPL_TOKENS","__spreadValues","WSOL","logger","Logger","_Currency","decimals","symbol","name","Currency","SOL","_Token","Currency","mint","decimals","symbol","name","validateAndParsePublicKey","other","Token","WSOL","SOL","currencyEquals","currencyA","currencyB","Token","_Big","_Decimal","_toFarmat","toFormat","to_format_default","logger","Logger","Big","to_format_default","_Big","Decimal","_Decimal","toSignificantRounding","toFixedRounding","Fraction","numerator","denominator","ONE","parseBigNumberish","other","otherParsed","significantDigits","format","rounding","quotient","decimalPlaces","logger","Logger","Big","to_format_default","_Big","splitNumber","num","decimals","integral","fractional","splited","CurrencyAmount","Fraction","currency","amount","isRaw","parsedAmount","BN","multiplier","TEN","parseBigNumberish","integralAmount","fractionalAmount","other","currencyEquals","significantDigits","format","rounding","decimalPlaces","TokenAmount","token","_100_PERCENT","Fraction","_100","Percent","significantDigits","format","rounding","decimalPlaces","logger","Logger","Price","Fraction","baseCurrency","denominator","quoteCurrency","numerator","tenExponentiate","other","currencyEquals","fraction","significantDigits","format","rounding","decimalPlaces","PublicKey","SystemProgram","PublicKey","version","_permanentCensorErrors","_censorErrors","LogLevels","_moduleLogLevel","_globalLogger","_checkNormalize","missing","form","error","_normalizeError","LogLevel","ErrorCode","HEX","perfectDisplay","value","deeping","_value","hex","PublicKey","obj","k","v","_Logger","moduleName","version","logLevel","args","level","message","code","params","messageDetails","key","reason","name","condition","count","expectedCount","target","kind","censorship","permanent","Logger","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","SYSVAR_CLOCK_PUBKEY","SYSVAR_RENT_PUBKEY","logger","Logger","SYSTEM_PROGRAM_ID","SystemProgram","MEMO_PROGRAM_ID","PublicKey","RENT_PROGRAM_ID","METADATA_PROGRAM_ID","validateAndParsePublicKey","publicKey","findProgramAddress","seeds","programId","nonce","AccountMeta","isSigner","AccountMetaReadonly","baseInnerObjects","TokenAmount","PublicKey","Fraction","BN","Currency","CurrencyAmount","Price","Percent","notInnerObject","v","o","jsonInfo2PoolKeys","jsonInfo","validateAndParsePublicKey","k","PublicKey","BN","chunkArray","arr","chunkSize","cache","tmp","PublicKey","Transaction","logger","Logger","getMultipleAccountsInfo","connection","publicKeys","config","__async","batchRequest","commitment","__spreadValues","chunkedKeys","chunkArray","results","batch","keys","key","unsafeRes","accountInfo","data","executable","lamports","owner","rentEpoch","PublicKey","error","getMultipleAccountsInfoWithCustomFlags","publicKeysWithCustomFlag","multipleAccountsInfo","o","idx","__spreadProps","forecastTransactionSize","instructions","signers","transaction","Transaction","simulateMultipleInstruction","keyword","feePayer","transactions","instruction","simulateTransaction","i","logs","result","filteredLog","log","parseSimulateLogToJson","parseSimulateValue","getLatestBlockhash","encodedTransactions","signData","encodedTransaction","reqData","itemReqIndex","ii","splitTxAndSigners","payer","signerKey","item","itemIns","_itemIns","_signerStrs","_signer","i32ToBytes","num","arr","AMM_CONFIG_SEED","POOL_SEED","POOL_VAULT_SEED","POOL_REWARD_VAULT_SEED","POSITION_SEED","TICK_ARRAY_SEED","OPERATION_SEED","getPdaPoolId","programId","ammConfigId","mintA","mintB","findProgramAddress","POOL_SEED","getPdaPoolVaultId","poolId","vaultMint","POOL_VAULT_SEED","getPdaPoolRewardVaulId","rewardMint","POOL_REWARD_VAULT_SEED","getPdaTickArrayAddress","startIndex","TICK_ARRAY_SEED","i32ToBytes","getPdaProtocolPositionAddress","tickLower","tickUpper","POSITION_SEED","getPdaPersonalPositionAddress","nftMint","getATAAddress","owner","mint","TOKEN_PROGRAM_ID","PublicKey","getPdaMetadataKey","METADATA_PROGRAM_ID","getPdaOperationAccount","OPERATION_SEED","TICK_ARRAY_SIZE","TICK_ARRAY_BITMAP_SIZE","TickUtils","programId","poolId","tickIndex","tickSpacing","startIndex","tickArrayAddress","getPdaTickArrayAddress","startTickIndex","offsetInArray","tick","multiplier","compressed","bitmap","bit_pos","lastTickArrayStartIndex","zeroForOne","bns","tickArrayBitmap","tickArrayStartIndex","expectedCount","tickArrayOffset","result","allInitializedTickArrayIndex","address","tickArray","i","start","end","fetchNum","BN","nextStartIndex","AmmConfigLayout","struct","blob","u8","u16","publicKey","u32","seq","u64","ObservationLayout","u128","ObservationInfoLayout","bool","RewardInfo","PoolInfoLayout","s32","PositionRewardInfoLayout","PositionInfoLayout","ProtocolPositionLayout","TickLayout","i128","TickArrayLayout","TICK_ARRAY_SIZE","OperationLayout","PublicKey","TransactionInstruction","anchorDataBuf","createPoolInstruction","programId","poolId","poolCreator","ammConfigId","observationId","mintA","mintVaultA","mintB","mintVaultB","sqrtPriceX64","dataLayout","struct","u128","keys","TOKEN_PROGRAM_ID","SYSTEM_PROGRAM_ID","RENT_PROGRAM_ID","data","aData","TransactionInstruction","openPositionInstruction","payer","positionNftOwner","positionNftMint","positionNftAccount","metadataAccount","protocolPosition","tickArrayLower","tickArrayUpper","personalPosition","ownerTokenAccountA","ownerTokenAccountB","tokenVaultA","tokenVaultB","tickLowerIndex","tickUpperIndex","tickArrayLowerStartIndex","tickArrayUpperStartIndex","liquidity","amountMinA","amountMinB","s32","u64","ASSOCIATED_TOKEN_PROGRAM_ID","METADATA_PROGRAM_ID","closePositionInstruction","increaseLiquidityInstruction","amountMaxA","amountMaxB","decreaseLiquidityInstruction","rewardAccounts","i","swapInstruction","inputTokenAccount","outputTokenAccount","inputVault","outputVault","tickArray","amount","otherAmountThreshold","sqrtPriceLimitX64","isBaseInput","bool","initRewardInstruction","operationId","ownerTokenAccount","rewardMint","rewardVault","openTime","endTime","emissionsPerSecondX64","parseBigNumberish","setRewardInstruction","rewardIndex","u8","collectRewardInstruction","addComputations","PublicKey","Keypair","PublicKey","SystemProgram","Transaction","BN","Decimal","AccountLayout","TOKEN_PROGRAM_ID","Keypair","SystemProgram","SPL_MINT_LAYOUT","struct","u32","publicKey","u64","u8","SPL_ACCOUNT_LAYOUT","createAssociatedTokenAccountInstruction","createCloseAccountInstruction","createInitializeAccountInstruction","createInitializeMintInstruction","createMintToInstruction","createTransferInstruction","Keypair","SystemProgram","TransactionInstruction","BN","Spl","mint","owner","getATAAddress","associatedAccount","payer","createAssociatedTokenAccountInstruction","_0","__async","connection","amount","commitment","instructions","balanceNeeded","SPL_ACCOUNT_LAYOUT","lamports","parseBigNumberish","BN","newAccount","Keypair","SystemProgram","TOKEN_PROGRAM_ID","validateAndParsePublicKey","WSOL","signers","newInstructions","decimals","mintAuthority","freezeAuthority","createInitializeMintInstruction","dest","authority","multiSigners","createMintToInstruction","tokenAccount","createInitializeAccountInstruction","source","destination","createTransferInstruction","createCloseAccountInstruction","programId","account","keys","SYSVAR_RENT_PUBKEY","dataLayout","u8","data","TransactionInstruction","Base","params","tokenAccounts","mint","owner","config","associatedOnly","__spreadValues","_tokenAccounts","accountInfo","a","b","ata","Spl","tokenAccount","pubkey","__async","connection","side","amount","payer","frontInstructions","endInstructions","signers","bypassAssociatedCheck","Token","newTokenAccount","_a","_b","createInfo","accounts","i","Keypair","balanceNeeded","AccountLayout","createAccountIns","SystemProgram","TOKEN_PROGRAM_ID","initAccountIns","PublicKey","BN","BN","NEGATIVE_ONE","BN","Q64","Q128","MaxU64","ONE","U64Resolution","MaxUint128","MIN_TICK","MAX_TICK","MIN_SQRT_PRICE_X64","MAX_SQRT_PRICE_X64","MIN_TICK_ARRAY_START_INDEX","MAX_TICK_ARRAY_START_INDEX","BIT_PRECISION","LOG_B_2_X32","LOG_B_P_ERR_MARGIN_LOWER_X64","LOG_B_P_ERR_MARGIN_UPPER_X64","FEE_RATE_DENOMINATOR","BN","Decimal","FETCH_TICKARRAY_COUNT","TickQuery","connection","programId","poolId","tickCurrent","tickSpacing","tickArrayBitmapArray","__async","tickArrayBitmap","TickUtils","tickArraysToFetch","currentTickArrayStartIndex","startIndexArray","i","tickArrayAddress","getPdaTickArrayAddress","fetchedTickArrays","getMultipleAccountsInfo","TickArrayLayout","tickArrayCache","_info","__spreadProps","__spreadValues","tickIndex","zeroForOne","nextTick","tickArrayStartTickIndex","MIN_TICK_ARRAY_START_INDEX","MAX_TICK_ARRAY_START_INDEX","cachedTickArray","_nextTick","_tickArrayAddress","_tickArrayStartTickIndex","tickArray","nextInitializedTick","TICK_ARRAY_SIZE","tickInArray","startIndex","tickPositionInArray","MathUtil","a","b","denominator","numerator","result","ZERO","ONE","num","decimalPlaces","Decimal","BN","n0","n1","Q128","mulRightShift","val","mulBy","signedRightShift","signedLeftShift","shiftBy","bitWidth","twosN0","twoN0","SqrtPriceMath","sqrtPriceX64","decimalsA","decimalsB","price","liquidity","amountIn","zeroForOne","amountOut","amount","add","liquidityLeftShift","U64Resolution","numerator1","amountMulSqrtPrice","deltaY","amountDivLiquidity","tick","MIN_TICK","MAX_TICK","tickAbs","ratio","MaxUint128","MAX_SQRT_PRICE_X64","MIN_SQRT_PRICE_X64","msb","adjustedMsb","log2pIntegerX32","bit","precision","log2pFractionX64","r","BIT_PRECISION","rMoreThanTwo","log2pFractionX32","logbpX64","LOG_B_2_X32","tickLow","LOG_B_P_ERR_MARGIN_LOWER_X64","tickHigh","LOG_B_P_ERR_MARGIN_UPPER_X64","TickMath","tickSpacing","mintDecimalsA","mintDecimalsB","LiquidityMath","x","y","sqrtPriceX64A","sqrtPriceX64B","roundUp","numerator2","Q64","amountA","MaxU64","amountB","sqrtPriceCurrentX64","liquidity0","liquidity1","amountMax","amountSlippage","coefficient","amount0Slippage","amount1Slippage","SwapMath","programId","poolId","tickArrayCache","fee","currentTick","currentSqrtPriceX64","amountSpecified","lastSavedTickArrayStartIndex","sqrtPriceLimitX64","baseInput","state","loopCount","step","nextInitTick","tickArrayAddress","tickAarrayStartIndex","TickQuery","targetPrice","liquidityNet","NEGATIVE_ONE","sqrtPriceX64Current","sqrtPriceX64Target","amountRemaining","feeRate","swapStep","amountRemainingSubtractFee","FEE_RATE_DENOMINATOR","reachTargetPrice","PublicKey","BN","PoolUtils","poolInfo","tickArrayCache","inputTokenMint","inputAmount","sqrtPriceLimitX64","zeroForOne","allNeededAccounts","isExist","firstTickArrayStartIndex","nextAccountMeta","outputAmount","reaminAccounts","executionPrice","feeAmount","SwapMath","NEGATIVE_ONE","tickArrayBitmap","TickUtils","isInitialized","startIndex","address","getPdaTickArrayAddress","nextStartIndex","currentOffset","result","chainTime","poolLiquidity","rewardInfos","nRewardInfo","_itemReward","itemReward","__spreadProps","__spreadValues","MathUtil","PublicKey","ZERO","latestUpdateTime","BN","timeDelta","rewardGrowthDeltaX64","rewardGrowthGlobalX64","rewardEmissionedDelta","Q64","rewardTotalEmissioned","BN","PositionUtils","poolState","tickLowerState","tickUpperState","feeGrowthBelowX64A","BN","feeGrowthBelowX64B","feeGrowthAboveX64A","feeGrowthAboveX64B","feeGrowthInsideX64A","MathUtil","feeGrowthInsideBX64","ammPool","positionState","feeGrowthdeltaA","Q64","tokenFeeAmountA","feeGrowthdelta1","tokenFeeAmountB","rewards","rewardGrowthsInside","i","rewardGrowthInside","currRewardInfo","rewardGrowthDelta","amountOwedDelta","rewardAmountOwed","tickCurrentIndex","rewardInfos","rewardGrowthsBelow","rewardGrowthsAbove","logger","Logger","AmmV3","Base","_0","__async","connection","programId","owner","mint1","mint2","ammConfig","initialPrice","mintA","mintB","initPrice","Decimal","initialPriceX64","SqrtPriceMath","transaction","Transaction","addComputations","insInfo","ZERO","poolInfo","ownerInfo","tickLower","tickUpper","liquidity","slippage","associatedOnly","frontInstructions","endInstructions","signers","amountSlippageA","amountSlippageB","LiquidityMath","mintAUseSOLBalance","Token","mintBUseSOLBalance","ownerTokenAccountA","ownerTokenAccountB","__spreadProps","__spreadValues","ownerPosition","PublicKey","WSOL","amountMinA","amountMinB","_amountMinA","_amountMinB","rewardAccounts","itemReward","rewardUseSOLBalance","ownerRewardAccount","inputMint","amountIn","amountOutMin","priceLimit","remainingAccounts","sqrtPriceLimitX64","MIN_SQRT_PRICE_X64","ONE","MAX_SQRT_PRICE_X64","isInputMintA","ins","rewardInfo","rewardMintUseSOLBalance","BN","MathUtil","rewardInfos","initInstructions","updateRewardInstructions","rewardMint","rewardMints","iInstructions","fetchPoolInfos","_a","_b","_c","ownerMintToAccount","item","getATAAddress","harvestInstructions","itemInfo","i","ii","itemPosition","allInstruction","splitTxAndSigners","ammConfigId","observationId","Keypair","SystemProgram","ObservationInfoLayout","poolId","getPdaPoolId","mintAVault","getPdaPoolVaultId","mintBVault","createPoolInstruction","nftMintAKeypair","tickArrayLowerStartIndex","TickUtils","tickArrayUpperStartIndex","tickArrayLower","getPdaTickArrayAddress","tickArrayUpper","positionNftAccount","metadataAccount","getPdaMetadataKey","personalPosition","getPdaPersonalPositionAddress","protocolPosition","getPdaProtocolPositionAddress","openPositionInstruction","increaseLiquidityInstruction","decreaseLiquidityInstruction","closePositionInstruction","swapInstruction","poolRewardVault","getPdaPoolRewardVaulId","operationId","getPdaOperationAccount","initRewardInstruction","rewardIndex","rewardVault","index","setRewardInstruction","collectRewardInstruction","inputA","amount","add","sqrtPriceX64","sqrtPriceX64A","sqrtPriceX64B","coefficient","_amount","liquidity0","liquidity1","amountsSlippage","amounts","price","baseIn","_price","tick","TickMath","tickSqrtPriceX64","tickPrice","tickArrayCache","currencyOut","amountInIsTokenAmount","TokenAmount","_amountIn","_slippage","amountOut","minAmountOut","currentPrice","executionPrice","priceImpact","fee","_amountOut","CurrencyAmount","_minAmountOut","_currentPrice","Price","__pow","_executionPrice","_fee","baseMint","expectedAmountOut","_executionPriceX64","feeAmount","PoolUtils","poolPrice","Percent","aprType","positionTickLowerIndex","positionTickUpperIndex","aprInfo","priceLower","priceUpper","_minPrice","sub","userRange","tradeRange","p","mintPrice","rewardMintDecimals","chainTime","aprTypeDay","mintPriceA","mintPriceB","mintDecimalsA","mintDecimalsB","poolLiquidityA","poolLiquidityB","userLiquidityA","userLiquidityB","poolTvl","userTvl","feeApr","SECONDS_PER_YEAR","rewardsApr","iDecimal","iPrice","a","b","poolKeys","batchRequest","poolAccountInfos","getMultipleAccountsInfo","programIds","poolsInfo","updateRewardInfos","apiPoolInfo","accountInfo","layoutAccountInfo","PoolInfoLayout","allMint","allPositionKey","itemMint","itemProgramId","positionAccountInfos","keyToTickArrayAddress","itemAccountInfo","position","PositionInfoLayout","itemPoolId","poolInfoA","amountA","amountB","leverage","tickArrayLowerAddress","tickArrayUpperAddress","tickArrayKeys","tickArrayDatas","tickArrayLayout","tickArrayData","key","TickArrayLayout","state","positionAccount","itemPA","keyLower","keyUpper","tickLowerState","tickUpperState","tokenFeeAmountA","tokenFeeAmountB","PositionUtils","vaults","rewardVaultInfos","rewardVaultAmount","valutKey","itemRewardVaultInfo","info","SPL_ACCOUNT_LAYOUT","vaultAmount","tickArraysToPoolId","tickArrays","itemPoolInfo","tickArrayBitmap","currentTickArrayStartIndex","startIndexArray","FETCH_TICKARRAY_COUNT","itemIndex","tickArrayAddress","fetchedTickArrays","getMultipleAccountsInfoWithCustomFlags","accountLayoutData","OperationLayout","PublicKey","_LIQUIDITY_PROGRAM_ID_V4","LIQUIDITY_PROGRAM_ID_V4","_LIQUIDITY_PROGRAM_ID_V5","LIQUIDITY_PROGRAM_ID_V5","LIQUIDITY_PROGRAMID_TO_VERSION","LIQUIDITY_VERSION_TO_PROGRAMID","LIQUIDITY_VERSION_TO_SERUM_VERSION","LIQUIDITY_STATE_LAYOUT_V4","struct","u64","u128","publicKey","seq","LIQUIDITY_STATE_LAYOUT_V5","LIQUIDITY_VERSION_TO_STATE_LAYOUT","ComputeBudgetProgram","PublicKey","Transaction","TransactionInstruction","BN","PublicKey","_SERUM_PROGRAM_ID_V3","SERUM_PROGRAM_ID_V3","SERUM_PROGRAMID_TO_VERSION","SERUM_VERSION_TO_PROGRAMID","MARKET_STATE_LAYOUT_V3","struct","blob","publicKey","u64","MARKET_VERSION_TO_STATE_LAYOUT","PublicKey","logger","Logger","Market","version","programId","SERUM_VERSION_TO_PROGRAMID","programIdString","SERUM_PROGRAMID_TO_VERSION","STATE_LAYOUT","MARKET_VERSION_TO_STATE_LAYOUT","marketId","seeds","nonce","publicKey","seedsWithNonce","PublicKey","err","PublicKey","ModelDataPubkey","PublicKey","ELEMENT_SIZE","DataElement","struct","u64","ModelDataInfo","seq","estimateRangeByXyReal","_xReal","_yReal","estimateRangeByX","_x","estimateRangeByY","_y","getMininumRangeByXyReal","layoutData","xReal","yReal","min","max","minRangeIdx","maxRangeIdx","mid","target","cur","left","right","getRatio","find","x","x1","y1","x2","y2","xDenominator","xNumerator1","xNumerator2","xNumerator","realToTable","realValue","ratio","tableToReal","tableValue","getMinimumRangeByX","getMinimumRangeByY","y","getDataByX","dx","priceUp","xWithDx","minIdx","maxIdx","p1","p2","p","getDataByY","dy","yWithDy","getMidPrice","ret","getDyByDxBaseIn","dxReal","lessTrade","getDxByDyBaseIn","dyReal","formatLayout","buffer","layoutInfo","item","getStablePrice","coinReal","pcReal","baseCoin","price","logger","Logger","modelData","initStableModelLayout","connection","__async","acc","ModelDataPubkey","formatLayout","LIQUIDITY_FEES_NUMERATOR","BN","LIQUIDITY_FEES_DENOMINATOR","_Liquidity","Base","version","programId","LIQUIDITY_VERSION_TO_PROGRAMID","logger","programIdString","LIQUIDITY_PROGRAMID_TO_VERSION","serumVersion","LIQUIDITY_VERSION_TO_SERUM_VERSION","STATE_LAYOUT","LIQUIDITY_VERSION_TO_STATE_LAYOUT","marketId","publicKey","findProgramAddress","marketVersion","baseMint","quoteMint","baseDecimals","quoteDecimals","marketProgramId","id","lpMint","authority","nonce","baseVault","quoteVault","lpVault","openOrders","targetOrders","withdrawQueue","marketAuthority","Market","params","poolKeys","userKeys","baseAmountIn","quoteAmountIn","fixedSide","LAYOUT","struct","u8","u64","data","parseBigNumberish","keys","AccountMetaReadonly","TOKEN_PROGRAM_ID","AccountMeta","ModelDataPubkey","TransactionInstruction","__async","connection","amountInA","amountInB","config","tokenAccounts","owner","payer","bypassAssociatedCheck","__spreadValues","tokenA","TokenAmount","Token","tokenB","tokenAccountA","tokenAccountB","lpTokenAccount","tokens","_tokenAccounts","rawAmounts","sideA","_fixedSide","baseToken","quoteToken","baseTokenAccount","quoteTokenAccount","baseAmountRaw","quoteAmountRaw","frontInstructions","endInstructions","signers","_baseTokenAccount","_quoteTokenAccount","_lpTokenAccount","transaction","Transaction","amountIn","ComputeBudgetProgram","amountOut","minAmountOut","maxAmountIn","tokenIn","tokenOut","tokenAccountIn","tokenAccountOut","amountInRaw","amountOutRaw","_tokenAccountIn","_tokenAccountOut","SYSTEM_PROGRAM_ID","SYSVAR_RENT_PUBKEY","startTime","baseAmount","quoteAmount","Spl","lsl","supported","v","serumProgramId","poolsAccountInfo","stateLayout","accounts","info","__spreadProps","error","Logger","flatPoolsAccountInfo","tempPoolsKeys","pubkey","accountInfo","LIQUIDITY_STATE_LAYOUT","fields","status","baseDecimal","quoteDecimal","PublicKey","associatedPoolKeys","marketsInfo","getMultipleAccountsInfo","poolsKeys","index","marketInfo","MARKET_STATE_LAYOUT","marketBaseVault","marketQuoteVault","marketBids","marketAsks","marketEventQueue","_0","pools","initStableModelLayout","instructions","pool","simulateMultipleInstruction","log","json","parseSimulateLogToJson","parseSimulateValue","lpDecimals","baseReserve","quoteReserve","lpSupply","poolInfo","_status","token","sideB","amount","amountA","amountB","anotherCurrency","slippage","currencyIn","input","amountRaw","ZERO","divCeil","slippageAdjustedAmount","Percent","ONE","_anotherAmount","CurrencyAmount","_maxAnotherAmount","currentPrice","exactQuote","Price","Currency","currencyOut","reserves","output","reserveIn","reserveOut","denominator","maxAmountInRaw","executionPrice","priceImpact","Liquidity","p","getStablePrice","modelData","feeRaw","amountInWithFee","getDyByDxBaseIn","getDxByDyBaseIn","minAmountOutRaw","priceImpactDenominator","priceImpactNumerator","fee","PublicKey","_ROUTE_PROGRAM_ID_V1","ROUTE_PROGRAM_ID_V1","ROUTE_PROGRAMID_TO_VERSION","ROUTE_VERSION_TO_PROGRAMID","ROUTE_VERSION_TO_LIQUIDITY_VERSION","PublicKey","Transaction","TransactionInstruction","intersection","xor","logger","Logger","Route","Base","version","programId","ROUTE_VERSION_TO_PROGRAMID","programIdString","ROUTE_PROGRAMID_TO_VERSION","liquidityVersion","ROUTE_VERSION_TO_LIQUIDITY_VERSION","fromPoolId","middleMint","owner","publicKey","findProgramAddress","params","fixedSide","fromPoolKeys","toPoolKeys","userKeys","amountIn","amountOut","LAYOUT","struct","u8","u64","data","keys","parseBigNumberish","AccountMetaReadonly","SYSTEM_PROGRAM_ID","TOKEN_PROGRAM_ID","AccountMeta","ModelDataPubkey","TransactionInstruction","ROUTE_PROGRAM_ID_V1","__async","connection","config","tokenAccounts","bypassAssociatedCheck","__spreadValues","tokenIn","TokenAmount","Token","tokenOut","tokenAccountIn","tokenAccountOut","fromPoolMints","toPoolMints","_middleMint","intersection","PublicKey","tokenAccountMiddle","amountInRaw","amountOutRaw","setupInstructions","setupSigners","swapInstructions","_tokenAccountIn","_tokenAccountOut","_tokenAccountMiddle","setupTransaction","swapTransaction","Transaction","fromPoolInfo","toPoolInfo","currencyOut","slippage","fromPoolSwapEnabled","Liquidity","toPoolSwapEnabled","mints","decimals","mintIn","mintOut","xorMints","xor","intersectionMints","index","middleMintDecimals","middleToken","minMiddleAmountOut","firstPriceImpact","firstFee","minAmountOut","secondPriceImpact","secondFee","executionPrice","currencyIn","Price","TOKEN_PROGRAM_ID","PublicKey","TransactionInstruction","route1Instruction","programId","poolKeyA","poolKeyB","userSourceToken","userRouteToken","userPdaAccount","ownerWallet","inputMint","amountIn","amountOut","tickArrayA","dataLayout","struct","u8","u64","keys","SYSTEM_PROGRAM_ID","TOKEN_PROGRAM_ID","PublicKey","poolKey","i","jsonInfo2PoolKeys","data","TransactionInstruction","route2Instruction","userDestinationToken","routeMint","tickArrayB","TradeV2","Base","inputMint","outputMint","apiPoolList","ammV3List","_a","_b","needSimulate","needTickArray","directPath","routePathDict","itemAmmPool","t","addLiquidityPools","_inputMint","_outputMint","_insertAddLiquidityPool","info","infoIn","infoOut","_0","__async","connection","pools","batchRequest","i","initStableModelLayout","instructions","pool","Liquidity","jsonInfo2PoolKeys","logs","simulateMultipleInstruction","poolsInfo","log","json","parseSimulateLogToJson","ammId","status","BN","parseSimulateValue","baseDecimals","quoteDecimals","lpDecimals","baseReserve","quoteReserve","lpSupply","startTime","error","poolInfosCache","a","b","_addLiquidityPools","ammIdToPoolInfo","aInfo","bInfo","ZERO","inputTokenAmount","outputToken","simulateCache","tickCache","slippage","chainTime","amountIn","outRoute","itemPool","amountOut","minAmountOut","currentPrice","executionPrice","priceImpact","fee","remainingAccounts","AmmV3","e","routeMint","iFromPool","iOutPool","PublicKey","infoAPoolOpen","infoBPoolOpen","poolTypeA","poolTypeB","middleMintInfo","currencyOut","fromPool","toPool","middleToken","Token","minMiddleAmountOut","firstPriceImpact","firstFee","firstRemainingAccounts","_slippage","Percent","_minMiddleAmountOut","_firstPriceImpact","_firstFee","_firstRemainingAccounts","secondPriceImpact","secondFee","secondRemainingAccounts","_amountOut","_minAmountOut","_secondPriceImpact","_secondFee","_secondRemainingAccounts","amountInRaw","amountOutRaw","currencyIn","TokenAmount","Price","routeProgram","ownerInfo","swapInfo","_poolKey","sqrtPriceLimitX64","MIN_SQRT_PRICE_X64","ONE","MAX_SQRT_PRICE_X64","poolKey1","poolKey2","route1Instruction","route2Instruction","checkTransaction","frontInstructions","endInstructions","signers","useSolBalance","outSolBalance","middleMint","sourceToken","destinationToken","routeToken","ins","Route","transactions","tempIns","tempSigner","forecastTransactionSize","Transaction","__spreadValues"]}